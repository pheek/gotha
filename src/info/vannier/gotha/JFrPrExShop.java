/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package info.vannier.gotha;

import java.awt.Component;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.rmi.RemoteException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author Luc
 */
public class JFrPrExShop extends javax.swing.JFrame {
    private static final long REFRESH_DELAY = 2000;
    private long lastComponentsUpdateTime = 0;

    private TournamentInterface tournament;   
    int processedRoundNumber = 0;
    
    /**
     * Creates new form JFrPrExShop
     */
    public JFrPrExShop(TournamentInterface tournament) throws RemoteException{
        this.tournament = tournament;       
        processedRoundNumber = tournament.presumablyCurrentRoundNumber();
        initComponents();
        customInitComponents();
        setupRefreshTimer();
    }
    
    private void setupRefreshTimer(){
        ActionListener taskPerformer = new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent evt){
                try {
                    
                    if (tournament.getLastTournamentModificationTime() > lastComponentsUpdateTime) {
                        updateAllViews();
                    }
                } catch (RemoteException ex) {
                    Logger.getLogger(JFrPrExShop.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        };
        new javax.swing.Timer((int) REFRESH_DELAY, taskPerformer).start();
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        grpGameFormat = new javax.swing.ButtonGroup();
        jLabel4 = new javax.swing.JLabel();
        grpSortType = new javax.swing.ButtonGroup();
        btnClose = new javax.swing.JButton();
        tpnPrEx = new javax.swing.JTabbedPane();
        pnlPar = new javax.swing.JPanel();
        jLabel28 = new javax.swing.JLabel();
        rdbGameFormatFull = new javax.swing.JRadioButton();
        rdbGameFormatShort = new javax.swing.JRadioButton();
        jLabel38 = new javax.swing.JLabel();
        ckbDisplayNumCol = new javax.swing.JCheckBox();
        ckbDisplayPlCol = new javax.swing.JCheckBox();
        jLabel39 = new javax.swing.JLabel();
        ckbDisplayIndGames = new javax.swing.JCheckBox();
        ckbDisplayCoCol = new javax.swing.JCheckBox();
        ckbDisplayClCol = new javax.swing.JCheckBox();
        jLabel1 = new javax.swing.JLabel();
        ckbShowNotPairedPlayers = new javax.swing.JCheckBox();
        ckbShowNotParticipatingPlayers = new javax.swing.JCheckBox();
        ckbShowByePlayer = new javax.swing.JCheckBox();
        jLabel3 = new javax.swing.JLabel();
        ckbShowPlayerCountry = new javax.swing.JCheckBox();
        ckbShowPlayerClub = new javax.swing.JCheckBox();
        ckbShowPlayerRank = new javax.swing.JCheckBox();
        jLabel29 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        rdbSorBytName = new javax.swing.JRadioButton();
        rdbSortByRank = new javax.swing.JRadioButton();
        jLabel30 = new javax.swing.JLabel();
        jCheckBox1 = new javax.swing.JCheckBox();
        pnlPub = new javax.swing.JPanel();
        btnPrintPL = new javax.swing.JButton();
        btnExportRLFFG = new javax.swing.JButton();
        btnExportGL = new javax.swing.JButton();
        btnPrintGL = new javax.swing.JButton();
        btnPrintStandings = new javax.swing.JButton();
        btnExportStandings = new javax.swing.JButton();
        btnPrintTP = new javax.swing.JButton();
        btnExportPL = new javax.swing.JButton();
        btnExportRLAGA = new javax.swing.JButton();
        btnExportRLEGF = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        spnRoundNumber = new javax.swing.JSpinner();
        btnPrintNPP = new javax.swing.JButton();
        btnExportPlayersCSV = new javax.swing.JButton();
        pnlTeams = new javax.swing.JPanel();
        btnExportTL = new javax.swing.JButton();
        btnPrintTL = new javax.swing.JButton();
        btnPrintML = new javax.swing.JButton();
        btnPrintTS = new javax.swing.JButton();
        btnExportTS = new javax.swing.JButton();
        btnExportML = new javax.swing.JButton();
        btnHelp = new javax.swing.JButton();

        jLabel4.setText("jLabel4");

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);
        getContentPane().setLayout(null);

        btnClose.setText("Close");
        btnClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCloseActionPerformed(evt);
            }
        });
        getContentPane().add(btnClose);
        btnClose.setBounds(410, 490, 380, 30);

        pnlPar.setLayout(null);

        jLabel28.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel28.setText("Players List ");
        pnlPar.add(jLabel28);
        jLabel28.setBounds(140, 20, 130, 17);

        grpGameFormat.add(rdbGameFormatFull);
        rdbGameFormatFull.setText("Full (123+/w4)");
        rdbGameFormatFull.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                allRDBFocusLost(evt);
            }
        });
        pnlPar.add(rdbGameFormatFull);
        rdbGameFormatFull.setBounds(410, 350, 190, 23);

        grpGameFormat.add(rdbGameFormatShort);
        rdbGameFormatShort.setText("Short (123+)");
        rdbGameFormatShort.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                allRDBFocusLost(evt);
            }
        });
        pnlPar.add(rdbGameFormatShort);
        rdbGameFormatShort.setBounds(410, 370, 190, 23);

        jLabel38.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel38.setText("Standings");
        pnlPar.add(jLabel38);
        jLabel38.setBounds(140, 270, 130, 17);

        ckbDisplayNumCol.setSelected(true);
        ckbDisplayNumCol.setText("display Num column");
        ckbDisplayNumCol.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                allCKBFocusLost(evt);
            }
        });
        pnlPar.add(ckbDisplayNumCol);
        ckbDisplayNumCol.setBounds(410, 260, 190, 23);

        ckbDisplayPlCol.setSelected(true);
        ckbDisplayPlCol.setText("display Pl column");
        ckbDisplayPlCol.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                allCKBFocusLost(evt);
            }
        });
        pnlPar.add(ckbDisplayPlCol);
        ckbDisplayPlCol.setBounds(410, 280, 190, 23);

        jLabel39.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel39.setText("Matches list (Team tournaments)");
        pnlPar.add(jLabel39);
        jLabel39.setBounds(140, 410, 260, 17);

        ckbDisplayIndGames.setSelected(true);
        ckbDisplayIndGames.setText("also display Individual games");
        ckbDisplayIndGames.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                allCKBFocusLost(evt);
            }
        });
        pnlPar.add(ckbDisplayIndGames);
        ckbDisplayIndGames.setBounds(410, 410, 190, 23);

        ckbDisplayCoCol.setText("display Country column");
        ckbDisplayCoCol.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                allCKBFocusLost(evt);
            }
        });
        pnlPar.add(ckbDisplayCoCol);
        ckbDisplayCoCol.setBounds(410, 300, 190, 23);

        ckbDisplayClCol.setText("display Club column");
        ckbDisplayClCol.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                allCKBFocusLost(evt);
            }
        });
        pnlPar.add(ckbDisplayClCol);
        ckbDisplayClCol.setBounds(410, 320, 190, 23);

        jLabel1.setText("Sort type");
        pnlPar.add(jLabel1);
        jLabel1.setBounds(280, 20, 130, 14);

        ckbShowNotPairedPlayers.setSelected(true);
        ckbShowNotPairedPlayers.setText("Show not paired players if any");
        ckbShowNotPairedPlayers.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                allCKBFocusLost(evt);
            }
        });
        pnlPar.add(ckbShowNotPairedPlayers);
        ckbShowNotPairedPlayers.setBounds(410, 180, 290, 20);

        ckbShowNotParticipatingPlayers.setText("Show not participating players if any");
        ckbShowNotParticipatingPlayers.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                allCKBFocusLost(evt);
            }
        });
        pnlPar.add(ckbShowNotParticipatingPlayers);
        ckbShowNotParticipatingPlayers.setBounds(410, 200, 290, 20);

        ckbShowByePlayer.setSelected(true);
        ckbShowByePlayer.setText("Show Bye player if any");
        ckbShowByePlayer.setEnabled(false);
        ckbShowByePlayer.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                allCKBFocusLost(evt);
            }
        });
        pnlPar.add(ckbShowByePlayer);
        ckbShowByePlayer.setBounds(410, 160, 290, 20);

        jLabel3.setText("For each player, show");
        pnlPar.add(jLabel3);
        jLabel3.setBounds(280, 80, 130, 14);

        ckbShowPlayerCountry.setText("Country");
        ckbShowPlayerCountry.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                allCKBFocusLost(evt);
            }
        });
        pnlPar.add(ckbShowPlayerCountry);
        ckbShowPlayerCountry.setBounds(410, 100, 190, 23);

        ckbShowPlayerClub.setSelected(true);
        ckbShowPlayerClub.setText("Club");
        ckbShowPlayerClub.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                allCKBFocusLost(evt);
            }
        });
        pnlPar.add(ckbShowPlayerClub);
        ckbShowPlayerClub.setBounds(410, 120, 190, 23);

        ckbShowPlayerRank.setSelected(true);
        ckbShowPlayerRank.setText("Rank");
        ckbShowPlayerRank.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                allCKBFocusLost(evt);
            }
        });
        pnlPar.add(ckbShowPlayerRank);
        ckbShowPlayerRank.setBounds(410, 80, 190, 23);

        jLabel29.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel29.setText("Games List ");
        pnlPar.add(jLabel29);
        jLabel29.setBounds(140, 80, 130, 17);

        jLabel5.setText("Game format");
        pnlPar.add(jLabel5);
        jLabel5.setBounds(280, 360, 130, 14);

        grpSortType.add(rdbSorBytName);
        rdbSorBytName.setText("Name");
        rdbSorBytName.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                allRDBFocusLost(evt);
            }
        });
        pnlPar.add(rdbSorBytName);
        rdbSorBytName.setBounds(410, 10, 190, 23);

        grpSortType.add(rdbSortByRank);
        rdbSortByRank.setText("Rank");
        rdbSortByRank.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                allRDBFocusLost(evt);
            }
        });
        pnlPar.add(rdbSortByRank);
        rdbSortByRank.setBounds(410, 30, 190, 23);

        jLabel30.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel30.setText("Not playing players List ");
        pnlPar.add(jLabel30);
        jLabel30.setBounds(140, 170, 250, 17);

        jCheckBox1.setSelected(true);
        jCheckBox1.setText("Show not Finally registered players if any");
        jCheckBox1.setEnabled(false);
        pnlPar.add(jCheckBox1);
        jCheckBox1.setBounds(410, 220, 290, 23);

        tpnPrEx.addTab("Parameters", pnlPar);

        pnlPub.setLayout(null);

        btnPrintPL.setText("Print players list");
        btnPrintPL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPrintPLActionPerformed(evt);
            }
        });
        pnlPub.add(btnPrintPL);
        btnPrintPL.setBounds(10, 80, 230, 23);

        btnExportRLFFG.setForeground(new java.awt.Color(255, 0, 0));
        btnExportRLFFG.setText("Export results for FFG rating list");
        btnExportRLFFG.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExportRLFFGActionPerformed(evt);
            }
        });
        pnlPub.add(btnExportRLFFG);
        btnExportRLFFG.setBounds(540, 180, 230, 50);

        btnExportGL.setForeground(new java.awt.Color(0, 0, 255));
        btnExportGL.setText("Export(html) games of round 1");
        btnExportGL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExportGLActionPerformed(evt);
            }
        });
        pnlPub.add(btnExportGL);
        btnExportGL.setBounds(260, 110, 260, 23);

        btnPrintGL.setText("Print games of round 1");
        btnPrintGL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPrintGLActionPerformed(evt);
            }
        });
        pnlPub.add(btnPrintGL);
        btnPrintGL.setBounds(260, 80, 260, 23);

        btnPrintStandings.setText("Print standings after round 1");
        btnPrintStandings.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPrintStandingsActionPerformed(evt);
            }
        });
        pnlPub.add(btnPrintStandings);
        btnPrintStandings.setBounds(260, 190, 260, 23);

        btnExportStandings.setForeground(new java.awt.Color(0, 0, 255));
        btnExportStandings.setText("Export(html) standings after round 1");
        btnExportStandings.setOpaque(false);
        btnExportStandings.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExportStandingsActionPerformed(evt);
            }
        });
        pnlPub.add(btnExportStandings);
        btnExportStandings.setBounds(260, 220, 260, 23);

        btnPrintTP.setText("Print Tournament parameters");
        btnPrintTP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPrintTPActionPerformed(evt);
            }
        });
        pnlPub.add(btnPrintTP);
        btnPrintTP.setBounds(10, 190, 230, 23);

        btnExportPL.setForeground(new java.awt.Color(0, 0, 255));
        btnExportPL.setText("Export(html) players list");
        btnExportPL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExportPLActionPerformed(evt);
            }
        });
        pnlPub.add(btnExportPL);
        btnExportPL.setBounds(10, 110, 230, 23);

        btnExportRLAGA.setForeground(new java.awt.Color(255, 0, 0));
        btnExportRLAGA.setText("Export results for AGA rating list");
        btnExportRLAGA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExportRLAGAActionPerformed(evt);
            }
        });
        pnlPub.add(btnExportRLAGA);
        btnExportRLAGA.setBounds(540, 280, 230, 50);

        btnExportRLEGF.setForeground(new java.awt.Color(255, 0, 0));
        btnExportRLEGF.setText("Export results for EGF rating list");
        btnExportRLEGF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExportRLEGFActionPerformed(evt);
            }
        });
        pnlPub.add(btnExportRLEGF);
        btnExportRLEGF.setBounds(540, 80, 230, 50);

        jLabel2.setText("Round");
        pnlPub.add(jLabel2);
        jLabel2.setBounds(310, 30, 60, 14);

        spnRoundNumber.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spnRoundNumberStateChanged(evt);
            }
        });
        pnlPub.add(spnRoundNumber);
        spnRoundNumber.setBounds(390, 20, 40, 30);

        btnPrintNPP.setText("Print not playing players of Round 1");
        btnPrintNPP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPrintNPPActionPerformed(evt);
            }
        });
        pnlPub.add(btnPrintNPP);
        btnPrintNPP.setBounds(260, 140, 260, 23);

        btnExportPlayersCSV.setForeground(new java.awt.Color(0, 128, 0));
        btnExportPlayersCSV.setText("Export players in csv format");
        btnExportPlayersCSV.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExportPlayersCSVActionPerformed(evt);
            }
        });
        pnlPub.add(btnExportPlayersCSV);
        btnExportPlayersCSV.setBounds(540, 380, 230, 50);

        pnlTeams.setBorder(javax.swing.BorderFactory.createTitledBorder("Teams"));
        pnlTeams.setLayout(null);

        btnExportTL.setForeground(new java.awt.Color(0, 0, 255));
        btnExportTL.setText("Export(html) teams list");
        btnExportTL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExportTLActionPerformed(evt);
            }
        });
        pnlTeams.add(btnExportTL);
        btnExportTL.setBounds(10, 60, 230, 23);

        btnPrintTL.setText("Print teams list");
        btnPrintTL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPrintTLActionPerformed(evt);
            }
        });
        pnlTeams.add(btnPrintTL);
        btnPrintTL.setBounds(10, 30, 230, 23);

        btnPrintML.setText("Print Matches list of round 1");
        btnPrintML.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPrintMLActionPerformed(evt);
            }
        });
        pnlTeams.add(btnPrintML);
        btnPrintML.setBounds(260, 30, 260, 23);

        btnPrintTS.setText("Print Teams Standings after round 1");
        btnPrintTS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPrintTSActionPerformed(evt);
            }
        });
        pnlTeams.add(btnPrintTS);
        btnPrintTS.setBounds(260, 110, 260, 23);

        btnExportTS.setForeground(new java.awt.Color(0, 0, 255));
        btnExportTS.setText("Export(html) Teams St. after round 1");
        btnExportTS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExportTSActionPerformed(evt);
            }
        });
        pnlTeams.add(btnExportTS);
        btnExportTS.setBounds(260, 140, 260, 23);

        btnExportML.setForeground(new java.awt.Color(0, 0, 240));
        btnExportML.setText("Export(html) Matches list of round 1");
        btnExportML.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExportMLActionPerformed(evt);
            }
        });
        pnlTeams.add(btnExportML);
        btnExportML.setBounds(260, 60, 260, 23);

        pnlPub.add(pnlTeams);
        pnlTeams.setBounds(0, 260, 530, 180);

        tpnPrEx.addTab("Publish", pnlPub);

        getContentPane().add(tpnPrEx);
        tpnPrEx.setBounds(3, 0, 790, 480);

        btnHelp.setIcon(new javax.swing.ImageIcon(getClass().getResource("/info/vannier/gotha/gothalogo16.jpg"))); // NOI18N
        btnHelp.setText("help");
        btnHelp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHelpActionPerformed(evt);
            }
        });
        getContentPane().add(btnHelp);
        btnHelp.setBounds(10, 490, 380, 30);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void customInitComponents()throws RemoteException{
        int w = JFrGotha.MEDIUM_FRAME_WIDTH;
        int h = JFrGotha.MEDIUM_FRAME_HEIGHT;
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((dim.width - w)/2, (dim.height -h)/2, w, h);
        setIconImage(Gotha.getIconImage());
        
        this.tpnPrEx.setBounds(0, 0, w - 6, h - 84);
       
        this.tpnPrEx.setSelectedComponent(pnlPub);
        
        updateAllViews();
    }

    private void btnCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCloseActionPerformed
        dispose();
    }//GEN-LAST:event_btnCloseActionPerformed

    private void spnRoundNumberStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spnRoundNumberStateChanged
        int demandedRN = (Integer) (spnRoundNumber.getValue()) - 1;
        this.demandedDisplayedRoundNumberHasChanged(demandedRN);
    }//GEN-LAST:event_spnRoundNumberStateChanged

    private void allCKBFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_allCKBFocusLost
        TournamentParameterSet tps;
        DPParameterSet dpps;
        try {
            tps = tournament.getTournamentParameterSet();
            dpps = tps.getDPParameterSet();
        } catch (RemoteException ex) {
            Logger.getLogger(JFrTournamentOptions.class.getName()).log(Level.SEVERE, null, ex);
            return;
        }
        boolean oldValue;
        boolean newValue;

        boolean somethingHasChanged = false;
        
        oldValue = dpps.isShowPlayerRank();
        newValue = this.ckbShowPlayerRank.isSelected();
        if (newValue != oldValue){
            dpps.setShowPlayerRank(newValue);
            somethingHasChanged = true;
        }
        oldValue = dpps.isShowPlayerCountry();
        newValue = this.ckbShowPlayerCountry.isSelected();
        if (newValue != oldValue){
            dpps.setShowPlayerCountry(newValue);
            somethingHasChanged = true;
        }
        oldValue = dpps.isShowPlayerClub();
        newValue = this.ckbShowPlayerClub.isSelected();
        if (newValue != oldValue){
            dpps.setShowPlayerClub(newValue);
            somethingHasChanged = true;
        }
        oldValue = dpps.isShowByePlayer();
        newValue = this.ckbShowByePlayer.isSelected();
        if (newValue != oldValue){
            dpps.setShowByePlayer(newValue);
            somethingHasChanged = true;
        }
        oldValue = dpps.isShowNotPairedPlayers();
        newValue = this.ckbShowNotPairedPlayers.isSelected();
        if (newValue != oldValue){
            dpps.setShowNotPairedPlayers(newValue);
            somethingHasChanged = true;
        }
        oldValue = dpps.isShowNotParticipatingPlayers();
        newValue = this.ckbShowNotParticipatingPlayers.isSelected();
        if (newValue != oldValue){
            dpps.setShowNotParticipatingPlayers(newValue);
            somethingHasChanged = true;
        }
        oldValue = dpps.isDisplayNumCol();
        newValue = this.ckbDisplayNumCol.isSelected();
        if (newValue != oldValue){
            dpps.setDisplayNumCol(newValue);
            somethingHasChanged = true;
        }
        oldValue = dpps.isDisplayPlCol();
        newValue = this.ckbDisplayPlCol.isSelected();
        if (newValue != oldValue){
            dpps.setDisplayPlCol(newValue);
            somethingHasChanged = true;
        }
        oldValue = dpps.isDisplayCoCol();
        newValue = this.ckbDisplayCoCol.isSelected();
        if (newValue != oldValue){
            dpps.setDisplayCoCol(newValue);
            somethingHasChanged = true;
        }
        oldValue = dpps.isDisplayClCol();
        newValue = this.ckbDisplayClCol.isSelected();
        if (newValue != oldValue){
            dpps.setDisplayClCol(newValue);
            somethingHasChanged = true;
        }
        oldValue = dpps.isDisplayIndGamesInMatches();
        newValue = this.ckbDisplayIndGames.isSelected();
        if (newValue != oldValue){
            dpps.setDisplayIndGamesInMatches(newValue);
            somethingHasChanged = true;
        }
       
        if (somethingHasChanged){
            try {
                tournament.setTournamentParameterSet(tps);
                this.tournamentChanged();
            } catch (RemoteException ex) {
                Logger.getLogger(JFrTournamentOptions.class.getName()).log(Level.SEVERE, null, ex);
            }        
        }
    }//GEN-LAST:event_allCKBFocusLost

    private void allRDBFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_allRDBFocusLost
        TournamentParameterSet tps;
        DPParameterSet dpps;
        try {
            tps = tournament.getTournamentParameterSet();
            dpps = tps.getDPParameterSet();
        } catch (RemoteException ex) {
            Logger.getLogger(JFrTournamentOptions.class.getName()).log(Level.SEVERE, null, ex);
            return;
        }

        boolean somethingHasChanged = false;
        int newPlayerSortType = PlayerComparator.NAME_ORDER;
        if (this.rdbSortByRank.isSelected()) newPlayerSortType = PlayerComparator.RANK_ORDER;
        if (newPlayerSortType != dpps.getPlayerSortType()){
            dpps.setPlayerSortType(newPlayerSortType);
            somethingHasChanged = true;
        }
        
        
        int newGameFormat = DPParameterSet.DP_GAME_FORMAT_FULL;
        if (this.rdbGameFormatShort.isSelected())newGameFormat = DPParameterSet.DP_GAME_FORMAT_SHORT;
        if (newGameFormat != dpps.getGameFormat()){
            dpps.setGameFormat(newGameFormat);
            somethingHasChanged = true;
        }

        if (somethingHasChanged){
            try {
                tournament.setTournamentParameterSet(tps);
                this.tournamentChanged();
            } catch (RemoteException ex) {
                Logger.getLogger(JFrTournamentOptions.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_allRDBFocusLost

    private void btnPrintPLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPrintPLActionPerformed
        TournamentPrinting.printPlayersList(tournament);
    }//GEN-LAST:event_btnPrintPLActionPerformed

    private void btnPrintTLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPrintTLActionPerformed
        TournamentPrinting.printTeamsList(tournament);
    }//GEN-LAST:event_btnPrintTLActionPerformed

    private void btnPrintTPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPrintTPActionPerformed
        TournamentPrinting.printTournamentParameters(tournament);
    }//GEN-LAST:event_btnPrintTPActionPerformed

    private void btnPrintGLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPrintGLActionPerformed
        TournamentPrinting.printGamesList(tournament, processedRoundNumber);
    }//GEN-LAST:event_btnPrintGLActionPerformed

    private void btnPrintNPPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPrintNPPActionPerformed
         TournamentPrinting.printNotPlayingPlayersList(tournament, processedRoundNumber);
    }//GEN-LAST:event_btnPrintNPPActionPerformed

    private void btnPrintTSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPrintTSActionPerformed
        TournamentPrinting.printTeamsStandings(tournament, processedRoundNumber);
    }//GEN-LAST:event_btnPrintTSActionPerformed

    private void btnPrintStandingsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPrintStandingsActionPerformed
        TournamentPrinting.printStandings(tournament, processedRoundNumber);
    }//GEN-LAST:event_btnPrintStandingsActionPerformed

    private void btnPrintMLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPrintMLActionPerformed
        TournamentPrinting.printMatchesList(tournament, processedRoundNumber);
    }//GEN-LAST:event_btnPrintMLActionPerformed

    private void btnExportRLEGFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExportRLEGFActionPerformed
        if (tournament == null) {
            JOptionPane.showMessageDialog(this, "No currently open tournament", "Message", JOptionPane.ERROR_MESSAGE);
            return;
        }

        File f = ExternalDocument.chooseAFileForExport(tournament, Gotha.exportDirectory, "h9");
        if (f == null) {
            return;
        }
        // Keep tournamentDirectory
        Gotha.exportDirectory = f.getParentFile();

        int response = JOptionPane.showConfirmDialog(this, "Do you want to keep by default results in the exportFile ?"
                + "\nClick Yes to keep them or No to drop them", "Message", JOptionPane.YES_NO_CANCEL_OPTION);

        if (response == JOptionPane.YES_OPTION) {
            ExternalDocument.generateH9File(tournament, f, true);
        } else if (response == JOptionPane.NO_OPTION) {
            ExternalDocument.generateH9File(tournament, f, false);
        } else {
            return;
        }
    }//GEN-LAST:event_btnExportRLEGFActionPerformed

    private void btnExportRLFFGActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExportRLFFGActionPerformed
        if (tournament == null) {
            JOptionPane.showMessageDialog(this, "No currently open tournament", "Message", JOptionPane.ERROR_MESSAGE);
            return;
        }

        TournamentParameterSet tps = null;
        try {
            tps = tournament.getTournamentParameterSet();
        } catch (RemoteException ex) {
            Logger.getLogger(JFrGotha.class.getName()).log(Level.SEVERE, null, ex);
            return;
        }
        GeneralParameterSet gps = tps.getGeneralParameterSet();
        if (gps.getStrSize().length() == 0 || gps.getBasicTime() == 0) {
            JOptionPane.showMessageDialog(this, "Goban size and Thinking time should be documented."
                    + "\nSee Options .. Games menu item", "Message", JOptionPane.ERROR_MESSAGE);
            return;
        }

        File f = ExternalDocument.chooseAFileForExport(tournament, Gotha.exportDirectory, "tou");
        System.out.println("f = " + f + " " + f.canWrite());
        if (f == null) {
            return;
        }
        // Keep tournamentDirectory
        Gotha.exportDirectory = f.getParentFile();

        ExternalDocument.generateTouFile(tournament, f);

    }//GEN-LAST:event_btnExportRLFFGActionPerformed

    private void btnExportRLAGAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExportRLAGAActionPerformed
    if (tournament == null) {
        JOptionPane.showMessageDialog(this, "No currently open tournament", "Message", JOptionPane.ERROR_MESSAGE);
        return;
    }
    // If some players have no aga id, should OpenGotha generate dummy Ids ?
    ArrayList<Player> alP = null;
    try {
        alP = tournament.playersList();
    } catch (RemoteException ex) {
        Logger.getLogger(JFrGotha.class.getName()).log(Level.SEVERE, null, ex);
    }
    int nbPWithoutId = 0;
    for (Player p : alP) {
        if (p.getAgaId().equals("")) {
            nbPWithoutId++;
        }
    }
    if (nbPWithoutId > 0) {
        String strPrompt = "" + nbPWithoutId + " players have no AGA Id."
                + "\nOpenGotha will generate dummy AGA Ids in the \"99xxx\" range.";
        int response = JOptionPane.showConfirmDialog(this, strPrompt, "Message", JOptionPane.OK_CANCEL_OPTION);

        if (response == JOptionPane.CANCEL_OPTION) {
            return;
        }
    }
    File f = ExternalDocument.chooseAFileForExport(tournament, Gotha.exportDirectory, "txt");
    if (f == null) {
        return;
    }
    // Keep tournamentDirectory
    Gotha.exportDirectory = f.getParentFile();

    ExternalDocument.generateAGAResultsFile(tournament, f);       
    }//GEN-LAST:event_btnExportRLAGAActionPerformed

    private void btnExportPlayersCSVActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExportPlayersCSVActionPerformed
        if (tournament == null) {
            JOptionPane.showMessageDialog(this, "No currently open tournament", "Message", JOptionPane.ERROR_MESSAGE);
            return;
        }

        File f = ExternalDocument.chooseAFileForExport(tournament, Gotha.exportDirectory, "csv");
        if (f == null) {
            return;
        }
        // Keep tournamentDirectory
        Gotha.exportDirectory = f.getParentFile();

        ExternalDocument.generatePlayersCSVFile(tournament, f);
    }//GEN-LAST:event_btnExportPlayersCSVActionPerformed

    private void btnExportPLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExportPLActionPerformed
        ExternalDocument.generatePlayersListHTMLFile(tournament);
    }//GEN-LAST:event_btnExportPLActionPerformed

    private void btnExportStandingsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExportStandingsActionPerformed
        ExternalDocument.generateStandingsHTMLFile(tournament, this.processedRoundNumber);
    }//GEN-LAST:event_btnExportStandingsActionPerformed

    private void btnExportTLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExportTLActionPerformed
        ExternalDocument.generateTeamsListHTMLFile(tournament);
    }//GEN-LAST:event_btnExportTLActionPerformed

    private void btnExportGLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExportGLActionPerformed
        ExternalDocument.generateGamesListHTMLFile(tournament, this.processedRoundNumber);
    }//GEN-LAST:event_btnExportGLActionPerformed

    private void btnExportTSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExportTSActionPerformed
        ExternalDocument.generateTeamsStandingsHTMLFile(tournament, this.processedRoundNumber);
    }//GEN-LAST:event_btnExportTSActionPerformed

    private void btnExportMLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExportMLActionPerformed
        ExternalDocument.generateMatchesListHTMLFile(tournament, this.processedRoundNumber);
    }//GEN-LAST:event_btnExportMLActionPerformed

    private void btnHelpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHelpActionPerformed
        Gotha.displayGothaHelp("Print and Export Shop");
    }//GEN-LAST:event_btnHelpActionPerformed
    
    private void demandedDisplayedRoundNumberHasChanged(int demandedRN) {
        int numberOfRounds = 0;
        try {
            numberOfRounds = tournament.getTournamentParameterSet().getGeneralParameterSet().getNumberOfRounds();
        } catch (RemoteException ex) {
            Logger.getLogger(JFrGotha.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (demandedRN < 0 || demandedRN >= numberOfRounds) {
            spnRoundNumber.setValue(processedRoundNumber + 1);
            return;
        }
        if (demandedRN == processedRoundNumber) {
            return;
        }

        processedRoundNumber = demandedRN;
        updateAllViews();
    }

    private void tournamentChanged(){
        try {
            tournament.setLastTournamentModificationTime(tournament.getCurrentTournamentTime());
        } catch (RemoteException ex) {
            Logger.getLogger(JFrTournamentOptions.class.getName()).log(Level.SEVERE, null, ex);
        }
        updateAllViews();
    }

    
    private void updateAllViews(){      
        try {
            if (!tournament.isOpen()) dispose();
            this.lastComponentsUpdateTime = tournament.getCurrentTournamentTime();
            setTitle("Print & Export Shop. " + tournament.getFullName());
        } catch (RemoteException ex) {
            Logger.getLogger(JFrGamesPair.class.getName()).log(Level.SEVERE, null, ex);
        }

        int nbRounds = Gotha.MAX_NUMBER_OF_ROUNDS;
        try {
            nbRounds = tournament.getTournamentParameterSet().getGeneralParameterSet().getNumberOfRounds();
        } catch (RemoteException ex) {
            Logger.getLogger(JFrGamesPair.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (this.processedRoundNumber >= nbRounds) {
            JOptionPane.showMessageDialog(this, "The number of rounds has been modified."
                    + "\n" + "Current round will be consequently changed",
                    "Games Pair Message", JOptionPane.WARNING_MESSAGE);
            this.processedRoundNumber = nbRounds - 1;
        }


        updateComponents();

            try {
            this.lastComponentsUpdateTime = tournament.getCurrentTournamentTime();
        } catch (RemoteException ex) {
            Logger.getLogger(JFrPrExShop.class.getName()).log(Level.SEVERE, null, ex);
        }

    }
    
    private void updateComponents() {
        try {
            updatePnlPub();
            updatePnlPar();
        } catch (RemoteException ex) {
            Logger.getLogger(JFrPrExShop.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void updatePnlPub()throws RemoteException{
        this.spnRoundNumber.setValue(this.processedRoundNumber + 1);
        
        String strRound = " round " + (processedRoundNumber + 1);
        this.btnPrintGL.setText("Print games of" + strRound);
        this.btnPrintNPP.setText("Print not playing players of" + strRound);
        this.btnExportGL.setText("Export(html) games of" + strRound);
        this.btnPrintStandings.setText("Print standings after" + strRound);
        this.btnExportStandings.setText("Export(html) standings after" + strRound);
        this.btnPrintML.setText("Print matches list of" + strRound);
        this.btnExportML.setText("Export(html) matches list of" + strRound);
        this.btnPrintTS.setText("Print team standings after" + strRound);
        this.btnExportTS.setText("Export(html) team st. after" + strRound);
        
        int nbTeams = tournament.teamsList().size();
        boolean bT = false;
        if (nbTeams > 0) bT = true;
        Component[] tabComp = this.pnlTeams.getComponents();
        for(Component comp : tabComp){
            comp.setEnabled(bT);
        }
    } 
    
    private void updatePnlPar()throws RemoteException{
        DPParameterSet dpps = tournament.getTournamentParameterSet().getDPParameterSet();
        if (dpps.getPlayerSortType() == PlayerComparator.NAME_ORDER) this.rdbSorBytName.setSelected(true);
        else this.rdbSortByRank.setSelected(true);
        if (dpps.getGameFormat() == DPParameterSet.DP_GAME_FORMAT_FULL) this.rdbGameFormatFull.setSelected(true);
        else this.rdbGameFormatShort.setSelected(true);

        this.ckbShowPlayerRank.setSelected(dpps.isShowPlayerRank());
        this.ckbShowPlayerCountry.setSelected(dpps.isShowPlayerCountry());
        this.ckbShowPlayerClub.setSelected(dpps.isShowPlayerClub());

        this.ckbDisplayNumCol.setSelected(dpps.isDisplayNumCol());
        this.ckbDisplayPlCol.setSelected(dpps.isDisplayPlCol());
        this.ckbDisplayCoCol.setSelected(dpps.isDisplayCoCol());
        this.ckbDisplayClCol.setSelected(dpps.isDisplayClCol());
        this.ckbShowByePlayer.setSelected(dpps.isShowByePlayer());
        this.ckbShowNotPairedPlayers.setSelected(dpps.isShowNotPairedPlayers());
        this.ckbShowNotParticipatingPlayers.setSelected(dpps.isShowNotParticipatingPlayers());

        this.ckbDisplayIndGames.setSelected(dpps.isDisplayIndGamesInMatches());
        
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClose;
    private javax.swing.JButton btnExportGL;
    private javax.swing.JButton btnExportML;
    private javax.swing.JButton btnExportPL;
    private javax.swing.JButton btnExportPlayersCSV;
    private javax.swing.JButton btnExportRLAGA;
    private javax.swing.JButton btnExportRLEGF;
    private javax.swing.JButton btnExportRLFFG;
    private javax.swing.JButton btnExportStandings;
    private javax.swing.JButton btnExportTL;
    private javax.swing.JButton btnExportTS;
    private javax.swing.JButton btnHelp;
    private javax.swing.JButton btnPrintGL;
    private javax.swing.JButton btnPrintML;
    private javax.swing.JButton btnPrintNPP;
    private javax.swing.JButton btnPrintPL;
    private javax.swing.JButton btnPrintStandings;
    private javax.swing.JButton btnPrintTL;
    private javax.swing.JButton btnPrintTP;
    private javax.swing.JButton btnPrintTS;
    private javax.swing.JCheckBox ckbDisplayClCol;
    private javax.swing.JCheckBox ckbDisplayCoCol;
    private javax.swing.JCheckBox ckbDisplayIndGames;
    private javax.swing.JCheckBox ckbDisplayNumCol;
    private javax.swing.JCheckBox ckbDisplayPlCol;
    private javax.swing.JCheckBox ckbShowByePlayer;
    private javax.swing.JCheckBox ckbShowNotPairedPlayers;
    private javax.swing.JCheckBox ckbShowNotParticipatingPlayers;
    private javax.swing.JCheckBox ckbShowPlayerClub;
    private javax.swing.JCheckBox ckbShowPlayerCountry;
    private javax.swing.JCheckBox ckbShowPlayerRank;
    private javax.swing.ButtonGroup grpGameFormat;
    private javax.swing.ButtonGroup grpSortType;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel pnlPar;
    private javax.swing.JPanel pnlPub;
    private javax.swing.JPanel pnlTeams;
    private javax.swing.JRadioButton rdbGameFormatFull;
    private javax.swing.JRadioButton rdbGameFormatShort;
    private javax.swing.JRadioButton rdbSorBytName;
    private javax.swing.JRadioButton rdbSortByRank;
    private javax.swing.JSpinner spnRoundNumber;
    private javax.swing.JTabbedPane tpnPrEx;
    // End of variables declaration//GEN-END:variables
}
