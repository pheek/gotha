/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package info.vannier.gotha;

import com.google.zxing.WriterException;
import info.vannier.qr.QR;
import it.sauronsoftware.ftp4j.FTPClient;
import java.awt.Component;
import java.awt.Desktop;
import java.awt.Dimension;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLConnection;
import java.rmi.RemoteException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.prefs.Preferences;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;

/**
 *
 * @author Luc
 */
public class JFrPrExShop extends javax.swing.JFrame {

    private static final long REFRESH_DELAY = 2000;
    private long lastComponentsUpdateTime = 0;
    private TournamentInterface tournament;
    int processedRoundNumber = 0;

    /**
     * Creates new form JFrPrExShop
     */
    public JFrPrExShop(TournamentInterface tournament) throws RemoteException {
        this.tournament = tournament;
        processedRoundNumber = tournament.presumablyCurrentRoundNumber();
        initComponents();
        customInitComponents();
        setupRefreshTimer();
    }

    private void setupRefreshTimer() {
        ActionListener taskPerformer = new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent evt) {
                try {

                    if (tournament.getLastTournamentModificationTime() > lastComponentsUpdateTime) {
                        updateAllViews();
                    }
                } catch (RemoteException ex) {
                    Logger.getLogger(JFrPrExShop.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        };
        new javax.swing.Timer((int) REFRESH_DELAY, taskPerformer).start();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        grpGameFormat = new javax.swing.ButtonGroup();
        jLabel4 = new javax.swing.JLabel();
        grpSortType = new javax.swing.ButtonGroup();
        grpRemote = new javax.swing.ButtonGroup();
        dlgFTPSite = new javax.swing.JDialog();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        txfHost = new javax.swing.JTextField();
        txfLogin = new javax.swing.JTextField();
        pwfPassword = new javax.swing.JPasswordField();
        btnDlgFTPSiteOK = new javax.swing.JButton();
        ckbKeepIDs = new javax.swing.JCheckBox();
        jLabel9 = new javax.swing.JLabel();
        btnClose = new javax.swing.JButton();
        tpnPrEx = new javax.swing.JTabbedPane();
        pnlPar = new javax.swing.JPanel();
        pnlPL = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        rdbSorBytName = new javax.swing.JRadioButton();
        rdbSortByRank = new javax.swing.JRadioButton();
        pnlGL = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        ckbShowPlayerRank = new javax.swing.JCheckBox();
        ckbShowPlayerCountry = new javax.swing.JCheckBox();
        ckbShowPlayerClub = new javax.swing.JCheckBox();
        pnlNPP = new javax.swing.JPanel();
        ckbShowNotPairedPlayers = new javax.swing.JCheckBox();
        ckbShowNotParticipatingPlayers = new javax.swing.JCheckBox();
        ckbShowByePlayer = new javax.swing.JCheckBox();
        jCheckBox1 = new javax.swing.JCheckBox();
        pnlSt = new javax.swing.JPanel();
        rdbGameFormatFull = new javax.swing.JRadioButton();
        rdbGameFormatShort = new javax.swing.JRadioButton();
        ckbDisplayNumCol = new javax.swing.JCheckBox();
        ckbDisplayPlCol = new javax.swing.JCheckBox();
        ckbDisplayCoCol = new javax.swing.JCheckBox();
        ckbDisplayClCol = new javax.swing.JCheckBox();
        jLabel5 = new javax.swing.JLabel();
        pnlML = new javax.swing.JPanel();
        ckbDisplayIndGames = new javax.swing.JCheckBox();
        pnlExport = new javax.swing.JPanel();
        ckbExportToLocalFile = new javax.swing.JCheckBox();
        ckbExportToWebSite = new javax.swing.JCheckBox();
        rdbSpecificSite = new javax.swing.JRadioButton();
        rdbOGSite = new javax.swing.JRadioButton();
        lblLocalExport = new javax.swing.JLabel();
        lblRemoteExport = new javax.swing.JLabel();
        btnTestFTP = new javax.swing.JButton();
        lblQR = new javax.swing.JLabel();
        btnOG = new javax.swing.JButton();
        pnlPub = new javax.swing.JPanel();
        btnPrintPL = new javax.swing.JButton();
        btnExportRLFFG = new javax.swing.JButton();
        btnExportGL = new javax.swing.JButton();
        btnPrintGL = new javax.swing.JButton();
        btnPrintStandings = new javax.swing.JButton();
        btnExportStandings = new javax.swing.JButton();
        btnPrintTP = new javax.swing.JButton();
        btnExportPL = new javax.swing.JButton();
        btnExportRLAGA = new javax.swing.JButton();
        btnExportRLEGF = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        spnRoundNumber = new javax.swing.JSpinner();
        btnPrintNPP = new javax.swing.JButton();
        btnExportPlayersCSV = new javax.swing.JButton();
        pnlTeams = new javax.swing.JPanel();
        btnExportTL = new javax.swing.JButton();
        btnPrintTL = new javax.swing.JButton();
        btnPrintML = new javax.swing.JButton();
        btnPrintTS = new javax.swing.JButton();
        btnExportTS = new javax.swing.JButton();
        btnExportML = new javax.swing.JButton();
        btnHelp = new javax.swing.JButton();

        jLabel4.setText("jLabel4");

        dlgFTPSite.setModal(true);
        dlgFTPSite.getContentPane().setLayout(null);

        jLabel6.setText("Host");
        dlgFTPSite.getContentPane().add(jLabel6);
        jLabel6.setBounds(110, 40, 90, 14);

        jLabel7.setText("Login");
        dlgFTPSite.getContentPane().add(jLabel7);
        jLabel7.setBounds(110, 90, 90, 14);

        jLabel8.setText("Password");
        dlgFTPSite.getContentPane().add(jLabel8);
        jLabel8.setBounds(110, 130, 90, 14);
        dlgFTPSite.getContentPane().add(txfHost);
        txfHost.setBounds(230, 40, 140, 20);
        dlgFTPSite.getContentPane().add(txfLogin);
        txfLogin.setBounds(230, 80, 140, 20);

        pwfPassword.setText("jPasswordField1");
        dlgFTPSite.getContentPane().add(pwfPassword);
        pwfPassword.setBounds(230, 130, 140, 20);

        btnDlgFTPSiteOK.setText("OK");
        btnDlgFTPSiteOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDlgFTPSiteOKActionPerformed(evt);
            }
        });
        dlgFTPSite.getContentPane().add(btnDlgFTPSiteOK);
        btnDlgFTPSiteOK.setBounds(100, 220, 270, 23);

        ckbKeepIDs.setText("keep identifiers");
        dlgFTPSite.getContentPane().add(ckbKeepIDs);
        ckbKeepIDs.setBounds(110, 170, 190, 23);

        jLabel9.setText("jLabel9");

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);
        getContentPane().setLayout(null);

        btnClose.setText("Close");
        btnClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCloseActionPerformed(evt);
            }
        });
        getContentPane().add(btnClose);
        btnClose.setBounds(410, 490, 380, 30);

        pnlPar.setLayout(null);

        pnlPL.setBorder(javax.swing.BorderFactory.createTitledBorder("Players list"));
        pnlPL.setLayout(null);

        jLabel1.setText("Sort players by");
        pnlPL.add(jLabel1);
        jLabel1.setBounds(20, 20, 100, 20);

        grpSortType.add(rdbSorBytName);
        rdbSorBytName.setText("Name");
        rdbSorBytName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                allRDBActionPerformed(evt);
            }
        });
        pnlPL.add(rdbSorBytName);
        rdbSorBytName.setBounds(130, 10, 70, 23);

        grpSortType.add(rdbSortByRank);
        rdbSortByRank.setText("Rank");
        rdbSortByRank.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                allRDBActionPerformed(evt);
            }
        });
        pnlPL.add(rdbSortByRank);
        rdbSortByRank.setBounds(130, 30, 70, 23);

        pnlPar.add(pnlPL);
        pnlPL.setBounds(10, 5, 250, 60);

        pnlGL.setBorder(javax.swing.BorderFactory.createTitledBorder("Games list"));
        pnlGL.setLayout(null);

        jLabel3.setText("For each player, show");
        pnlGL.add(jLabel3);
        jLabel3.setBounds(10, 20, 130, 14);

        ckbShowPlayerRank.setSelected(true);
        ckbShowPlayerRank.setText("Rank");
        ckbShowPlayerRank.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                allCKBActionPerformed(evt);
            }
        });
        pnlGL.add(ckbShowPlayerRank);
        ckbShowPlayerRank.setBounds(10, 40, 180, 23);

        ckbShowPlayerCountry.setText("Country");
        ckbShowPlayerCountry.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                allCKBActionPerformed(evt);
            }
        });
        pnlGL.add(ckbShowPlayerCountry);
        ckbShowPlayerCountry.setBounds(10, 60, 180, 23);

        ckbShowPlayerClub.setSelected(true);
        ckbShowPlayerClub.setText("Club");
        ckbShowPlayerClub.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                allCKBActionPerformed(evt);
            }
        });
        pnlGL.add(ckbShowPlayerClub);
        ckbShowPlayerClub.setBounds(10, 80, 180, 23);

        pnlPar.add(pnlGL);
        pnlGL.setBounds(270, 5, 200, 110);

        pnlNPP.setBorder(javax.swing.BorderFactory.createTitledBorder("Not playing players list"));
        pnlNPP.setLayout(null);

        ckbShowNotPairedPlayers.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        ckbShowNotPairedPlayers.setSelected(true);
        ckbShowNotPairedPlayers.setText("Show not paired players if any");
        ckbShowNotPairedPlayers.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                allCKBActionPerformed(evt);
            }
        });
        pnlNPP.add(ckbShowNotPairedPlayers);
        ckbShowNotPairedPlayers.setBounds(10, 40, 230, 20);

        ckbShowNotParticipatingPlayers.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        ckbShowNotParticipatingPlayers.setText("Show not participating players if any");
        ckbShowNotParticipatingPlayers.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                allCKBActionPerformed(evt);
            }
        });
        pnlNPP.add(ckbShowNotParticipatingPlayers);
        ckbShowNotParticipatingPlayers.setBounds(10, 60, 230, 20);

        ckbShowByePlayer.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        ckbShowByePlayer.setSelected(true);
        ckbShowByePlayer.setText("Show Bye player if any");
        ckbShowByePlayer.setEnabled(false);
        ckbShowByePlayer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                allCKBActionPerformed(evt);
            }
        });
        pnlNPP.add(ckbShowByePlayer);
        ckbShowByePlayer.setBounds(10, 20, 230, 20);

        jCheckBox1.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jCheckBox1.setSelected(true);
        jCheckBox1.setText("Show not Finally registered players if any");
        jCheckBox1.setEnabled(false);
        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                allCKBActionPerformed(evt);
            }
        });
        pnlNPP.add(jCheckBox1);
        jCheckBox1.setBounds(10, 80, 230, 20);

        pnlPar.add(pnlNPP);
        pnlNPP.setBounds(10, 70, 250, 100);

        pnlSt.setBorder(javax.swing.BorderFactory.createTitledBorder("Standings"));
        pnlSt.setLayout(null);

        grpGameFormat.add(rdbGameFormatFull);
        rdbGameFormatFull.setText("Full (123+/w4)");
        rdbGameFormatFull.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                allRDBActionPerformed(evt);
            }
        });
        pnlSt.add(rdbGameFormatFull);
        rdbGameFormatFull.setBounds(110, 110, 180, 23);

        grpGameFormat.add(rdbGameFormatShort);
        rdbGameFormatShort.setText("Short (123+)");
        rdbGameFormatShort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                allRDBActionPerformed(evt);
            }
        });
        pnlSt.add(rdbGameFormatShort);
        rdbGameFormatShort.setBounds(110, 130, 180, 23);

        ckbDisplayNumCol.setSelected(true);
        ckbDisplayNumCol.setText("display Num column");
        ckbDisplayNumCol.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                allCKBActionPerformed(evt);
            }
        });
        pnlSt.add(ckbDisplayNumCol);
        ckbDisplayNumCol.setBounds(110, 10, 180, 23);

        ckbDisplayPlCol.setSelected(true);
        ckbDisplayPlCol.setText("display Pl column");
        ckbDisplayPlCol.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                allCKBActionPerformed(evt);
            }
        });
        pnlSt.add(ckbDisplayPlCol);
        ckbDisplayPlCol.setBounds(110, 30, 180, 23);

        ckbDisplayCoCol.setText("display Country column");
        ckbDisplayCoCol.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                allCKBActionPerformed(evt);
            }
        });
        pnlSt.add(ckbDisplayCoCol);
        ckbDisplayCoCol.setBounds(110, 50, 180, 23);

        ckbDisplayClCol.setText("display Club column");
        ckbDisplayClCol.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                allCKBActionPerformed(evt);
            }
        });
        pnlSt.add(ckbDisplayClCol);
        ckbDisplayClCol.setBounds(110, 70, 180, 23);

        jLabel5.setText("Game format");
        pnlSt.add(jLabel5);
        jLabel5.setBounds(20, 120, 70, 14);

        pnlPar.add(pnlSt);
        pnlSt.setBounds(480, 5, 300, 165);

        pnlML.setBorder(javax.swing.BorderFactory.createTitledBorder("Matches list (Team tournaments)"));
        pnlML.setLayout(null);

        ckbDisplayIndGames.setSelected(true);
        ckbDisplayIndGames.setText("also display Individual games");
        ckbDisplayIndGames.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                allCKBActionPerformed(evt);
            }
        });
        pnlML.add(ckbDisplayIndGames);
        ckbDisplayIndGames.setBounds(10, 20, 180, 23);

        pnlPar.add(pnlML);
        pnlML.setBounds(270, 120, 200, 50);

        pnlExport.setBorder(javax.swing.BorderFactory.createTitledBorder("HTML Exports"));
        pnlExport.setLayout(null);

        ckbExportToLocalFile.setSelected(true);
        ckbExportToLocalFile.setText("Export to a local file");
        ckbExportToLocalFile.setEnabled(false);
        pnlExport.add(ckbExportToLocalFile);
        ckbExportToLocalFile.setBounds(20, 20, 240, 23);

        ckbExportToWebSite.setSelected(true);
        ckbExportToWebSite.setText("Export to a Web Site");
        ckbExportToWebSite.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                allCKBActionPerformed(evt);
            }
        });
        pnlExport.add(ckbExportToWebSite);
        ckbExportToWebSite.setBounds(20, 60, 240, 23);

        grpRemote.add(rdbSpecificSite);
        rdbSpecificSite.setText("Use a specific site");
        rdbSpecificSite.setEnabled(false);
        rdbSpecificSite.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                allRDBActionPerformed(evt);
            }
        });
        pnlExport.add(rdbSpecificSite);
        rdbSpecificSite.setBounds(80, 80, 210, 23);

        grpRemote.add(rdbOGSite);
        rdbOGSite.setSelected(true);
        rdbOGSite.setText("Use opengotha site");
        rdbOGSite.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                allRDBActionPerformed(evt);
            }
        });
        pnlExport.add(rdbOGSite);
        rdbOGSite.setBounds(80, 100, 210, 23);

        lblLocalExport.setFont(new java.awt.Font("Tahoma", 3, 11)); // NOI18N
        lblLocalExport.setText("HTML local exports will be stored on :");
        pnlExport.add(lblLocalExport);
        lblLocalExport.setBounds(50, 40, 650, 20);

        lblRemoteExport.setFont(new java.awt.Font("Tahoma", 3, 11)); // NOI18N
        lblRemoteExport.setText("HTML remote exports will be sent to :");
        pnlExport.add(lblRemoteExport);
        lblRemoteExport.setBounds(50, 130, 680, 14);

        btnTestFTP.setText("Test FTP");
        btnTestFTP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTestFTPActionPerformed(evt);
            }
        });
        pnlExport.add(btnTestFTP);
        btnTestFTP.setBounds(300, 70, 90, 50);
        pnlExport.add(lblQR);
        lblQR.setBounds(300, 160, 90, 90);

        btnOG.setForeground(new java.awt.Color(0, 0, 192));
        btnOG.setText("http://opengotha.org/tournaments");
        btnOG.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOGActionPerformed(evt);
            }
        });
        pnlExport.add(btnOG);
        btnOG.setBounds(200, 250, 290, 23);

        pnlPar.add(pnlExport);
        pnlExport.setBounds(10, 175, 770, 280);

        tpnPrEx.addTab("Parameters", pnlPar);

        pnlPub.setLayout(null);

        btnPrintPL.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        btnPrintPL.setText("Print players list");
        btnPrintPL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPrintPLActionPerformed(evt);
            }
        });
        pnlPub.add(btnPrintPL);
        btnPrintPL.setBounds(10, 80, 230, 21);

        btnExportRLFFG.setForeground(new java.awt.Color(255, 0, 0));
        btnExportRLFFG.setText("Export results for FFG rating list");
        btnExportRLFFG.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExportRLFFGActionPerformed(evt);
            }
        });
        pnlPub.add(btnExportRLFFG);
        btnExportRLFFG.setBounds(540, 180, 230, 50);

        btnExportGL.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        btnExportGL.setForeground(new java.awt.Color(0, 0, 255));
        btnExportGL.setText("Export(html) games of round 1");
        btnExportGL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExportGLActionPerformed(evt);
            }
        });
        pnlPub.add(btnExportGL);
        btnExportGL.setBounds(260, 110, 260, 21);

        btnPrintGL.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        btnPrintGL.setText("Print games of round 1");
        btnPrintGL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPrintGLActionPerformed(evt);
            }
        });
        pnlPub.add(btnPrintGL);
        btnPrintGL.setBounds(260, 80, 260, 21);

        btnPrintStandings.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        btnPrintStandings.setText("Print standings after round 1");
        btnPrintStandings.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPrintStandingsActionPerformed(evt);
            }
        });
        pnlPub.add(btnPrintStandings);
        btnPrintStandings.setBounds(260, 190, 260, 21);

        btnExportStandings.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        btnExportStandings.setForeground(new java.awt.Color(0, 0, 255));
        btnExportStandings.setText("Export(html) standings after round 1");
        btnExportStandings.setOpaque(false);
        btnExportStandings.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExportStandingsActionPerformed(evt);
            }
        });
        pnlPub.add(btnExportStandings);
        btnExportStandings.setBounds(260, 220, 260, 21);

        btnPrintTP.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        btnPrintTP.setText("Print Tournament parameters");
        btnPrintTP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPrintTPActionPerformed(evt);
            }
        });
        pnlPub.add(btnPrintTP);
        btnPrintTP.setBounds(10, 190, 230, 21);

        btnExportPL.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        btnExportPL.setForeground(new java.awt.Color(0, 0, 255));
        btnExportPL.setText("Export(html) players list");
        btnExportPL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExportPLActionPerformed(evt);
            }
        });
        pnlPub.add(btnExportPL);
        btnExportPL.setBounds(10, 110, 230, 21);

        btnExportRLAGA.setForeground(new java.awt.Color(255, 0, 0));
        btnExportRLAGA.setText("Export results for AGA rating list");
        btnExportRLAGA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExportRLAGAActionPerformed(evt);
            }
        });
        pnlPub.add(btnExportRLAGA);
        btnExportRLAGA.setBounds(540, 280, 230, 50);

        btnExportRLEGF.setForeground(new java.awt.Color(255, 0, 0));
        btnExportRLEGF.setText("Export results for EGF rating list");
        btnExportRLEGF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExportRLEGFActionPerformed(evt);
            }
        });
        pnlPub.add(btnExportRLEGF);
        btnExportRLEGF.setBounds(540, 80, 230, 50);

        jLabel2.setText("Round");
        pnlPub.add(jLabel2);
        jLabel2.setBounds(310, 30, 60, 14);

        spnRoundNumber.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spnRoundNumberStateChanged(evt);
            }
        });
        pnlPub.add(spnRoundNumber);
        spnRoundNumber.setBounds(390, 20, 40, 30);

        btnPrintNPP.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        btnPrintNPP.setText("Print not playing players of Round 1");
        btnPrintNPP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPrintNPPActionPerformed(evt);
            }
        });
        pnlPub.add(btnPrintNPP);
        btnPrintNPP.setBounds(260, 140, 260, 21);

        btnExportPlayersCSV.setForeground(new java.awt.Color(0, 128, 0));
        btnExportPlayersCSV.setText("Export players in csv format");
        btnExportPlayersCSV.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExportPlayersCSVActionPerformed(evt);
            }
        });
        pnlPub.add(btnExportPlayersCSV);
        btnExportPlayersCSV.setBounds(540, 380, 230, 50);

        pnlTeams.setBorder(javax.swing.BorderFactory.createTitledBorder("Teams"));
        pnlTeams.setLayout(null);

        btnExportTL.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        btnExportTL.setForeground(new java.awt.Color(0, 0, 255));
        btnExportTL.setText("Export(html) teams list");
        btnExportTL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExportTLActionPerformed(evt);
            }
        });
        pnlTeams.add(btnExportTL);
        btnExportTL.setBounds(10, 60, 230, 21);

        btnPrintTL.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        btnPrintTL.setText("Print teams list");
        btnPrintTL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPrintTLActionPerformed(evt);
            }
        });
        pnlTeams.add(btnPrintTL);
        btnPrintTL.setBounds(10, 30, 230, 21);

        btnPrintML.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        btnPrintML.setText("Print Matches list of round 1");
        btnPrintML.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPrintMLActionPerformed(evt);
            }
        });
        pnlTeams.add(btnPrintML);
        btnPrintML.setBounds(260, 30, 260, 21);

        btnPrintTS.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        btnPrintTS.setText("Print Teams Standings after round 1");
        btnPrintTS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPrintTSActionPerformed(evt);
            }
        });
        pnlTeams.add(btnPrintTS);
        btnPrintTS.setBounds(260, 110, 260, 21);

        btnExportTS.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        btnExportTS.setForeground(new java.awt.Color(0, 0, 255));
        btnExportTS.setText("Export(html) Teams St. after round 1");
        btnExportTS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExportTSActionPerformed(evt);
            }
        });
        pnlTeams.add(btnExportTS);
        btnExportTS.setBounds(260, 140, 260, 21);

        btnExportML.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        btnExportML.setForeground(new java.awt.Color(0, 0, 240));
        btnExportML.setText("Export(html) Matches list of round 1");
        btnExportML.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExportMLActionPerformed(evt);
            }
        });
        pnlTeams.add(btnExportML);
        btnExportML.setBounds(260, 60, 260, 21);

        pnlPub.add(pnlTeams);
        pnlTeams.setBounds(0, 260, 530, 180);

        tpnPrEx.addTab("Publish", pnlPub);

        getContentPane().add(tpnPrEx);
        tpnPrEx.setBounds(3, 0, 790, 490);

        btnHelp.setIcon(new javax.swing.ImageIcon(getClass().getResource("/info/vannier/gotha/gothalogo16.jpg"))); // NOI18N
        btnHelp.setText("help");
        btnHelp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHelpActionPerformed(evt);
            }
        });
        getContentPane().add(btnHelp);
        btnHelp.setBounds(10, 490, 380, 30);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void customInitComponents() throws RemoteException {
        int w = JFrGotha.MEDIUM_FRAME_WIDTH;
        int h = JFrGotha.MEDIUM_FRAME_HEIGHT;
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((dim.width - w) / 2, (dim.height - h) / 2, w, h);
        setIconImage(Gotha.getIconImage());

//        this.tpnPrEx.setBounds(0, 0, w - 6, h - 84);
        this.tpnPrEx.setBounds(0, 0, w - 6, h - 74);
        
        this.tpnPrEx.setSelectedComponent(pnlPub);

        int wFTP = JFrGotha.SMALL_FRAME_WIDTH;
        int hFTP = JFrGotha.SMALL_FRAME_HEIGHT;
        Dimension dimFTP = Toolkit.getDefaultToolkit().getScreenSize();
        dlgFTPSite.setBounds((dimFTP.width - wFTP) / 2, (dimFTP.height - hFTP) / 2, wFTP, hFTP);
        dlgFTPSite.setTitle("FTP Site");
        dlgFTPSite.setIconImage(Gotha.getIconImage());
        updateAllViews();
    }

    private void btnCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCloseActionPerformed
        dispose();
    }//GEN-LAST:event_btnCloseActionPerformed

    private void spnRoundNumberStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spnRoundNumberStateChanged
        int demandedRN = (Integer) (spnRoundNumber.getValue()) - 1;
        this.demandedDisplayedRoundNumberHasChanged(demandedRN);
    }//GEN-LAST:event_spnRoundNumberStateChanged

    private void btnPrintPLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPrintPLActionPerformed
        TournamentPrinting.printPlayersList(tournament);
    }//GEN-LAST:event_btnPrintPLActionPerformed

    private void btnPrintTLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPrintTLActionPerformed
        TournamentPrinting.printTeamsList(tournament);
    }//GEN-LAST:event_btnPrintTLActionPerformed

    private void btnPrintTPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPrintTPActionPerformed
        TournamentPrinting.printTournamentParameters(tournament);
    }//GEN-LAST:event_btnPrintTPActionPerformed

    private void btnPrintGLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPrintGLActionPerformed
        TournamentPrinting.printGamesList(tournament, processedRoundNumber);
    }//GEN-LAST:event_btnPrintGLActionPerformed

    private void btnPrintNPPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPrintNPPActionPerformed
        TournamentPrinting.printNotPlayingPlayersList(tournament, processedRoundNumber);
    }//GEN-LAST:event_btnPrintNPPActionPerformed

    private void btnPrintTSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPrintTSActionPerformed
        TournamentPrinting.printTeamsStandings(tournament, processedRoundNumber);
    }//GEN-LAST:event_btnPrintTSActionPerformed

    private void btnPrintStandingsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPrintStandingsActionPerformed
        TournamentPrinting.printStandings(tournament, processedRoundNumber);
    }//GEN-LAST:event_btnPrintStandingsActionPerformed

    private void btnPrintMLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPrintMLActionPerformed
        TournamentPrinting.printMatchesList(tournament, processedRoundNumber);
    }//GEN-LAST:event_btnPrintMLActionPerformed

    private void btnExportRLEGFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExportRLEGFActionPerformed
        if (tournament == null) {
            JOptionPane.showMessageDialog(this, "No currently open tournament", "Message", JOptionPane.ERROR_MESSAGE);
            return;
        }

        File f = ExternalDocument.chooseAFileForExport(tournament, Gotha.exportDirectory, "h9");
        if (f == null) {
            return;
        }
        // Keep tournamentDirectory
        Gotha.exportDirectory = f.getParentFile();

        int response = JOptionPane.showConfirmDialog(this, "Do you want to keep by default results in the exportFile ?"
                + "\nClick Yes to keep them or No to drop them", "Message", JOptionPane.YES_NO_CANCEL_OPTION);

        if (response == JOptionPane.YES_OPTION) {
            ExternalDocument.generateH9File(tournament, f, true);
        } else if (response == JOptionPane.NO_OPTION) {
            ExternalDocument.generateH9File(tournament, f, false);
        } else {
            return;
        }
    }//GEN-LAST:event_btnExportRLEGFActionPerformed

    private void btnExportRLFFGActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExportRLFFGActionPerformed
        if (tournament == null) {
            JOptionPane.showMessageDialog(this, "No currently open tournament", "Message", JOptionPane.ERROR_MESSAGE);
            return;
        }

        TournamentParameterSet tps = null;
        try {
            tps = tournament.getTournamentParameterSet();
        } catch (RemoteException ex) {
            Logger.getLogger(JFrGotha.class.getName()).log(Level.SEVERE, null, ex);
            return;
        }
        GeneralParameterSet gps = tps.getGeneralParameterSet();
        if (gps.getStrSize().length() == 0 || gps.getBasicTime() == 0) {
            JOptionPane.showMessageDialog(this, "Goban size and Thinking time should be documented."
                    + "\nSee Options .. Games menu item", "Message", JOptionPane.ERROR_MESSAGE);
            return;
        }

        File f = ExternalDocument.chooseAFileForExport(tournament, Gotha.exportDirectory, "tou");
        System.out.println("f = " + f + " " + f.canWrite());
        if (f == null) {
            return;
        }
        // Keep tournamentDirectory
        Gotha.exportDirectory = f.getParentFile();

        ExternalDocument.generateTouFile(tournament, f);

    }//GEN-LAST:event_btnExportRLFFGActionPerformed

    private void btnExportRLAGAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExportRLAGAActionPerformed
        if (tournament == null) {
            JOptionPane.showMessageDialog(this, "No currently open tournament", "Message", JOptionPane.ERROR_MESSAGE);
            return;
        }
        // If some players have no aga id, should OpenGotha generate dummy Ids ?
        ArrayList<Player> alP = null;
        try {
            alP = tournament.playersList();
        } catch (RemoteException ex) {
            Logger.getLogger(JFrGotha.class.getName()).log(Level.SEVERE, null, ex);
        }
        int nbPWithoutId = 0;
        for (Player p : alP) {
            if (p.getAgaId().equals("")) {
                nbPWithoutId++;
            }
        }
        if (nbPWithoutId > 0) {
            String strPrompt = "" + nbPWithoutId + " players have no AGA Id."
                    + "\nOpenGotha will generate dummy AGA Ids in the \"99xxx\" range.";
            int response = JOptionPane.showConfirmDialog(this, strPrompt, "Message", JOptionPane.OK_CANCEL_OPTION);

            if (response == JOptionPane.CANCEL_OPTION) {
                return;
            }
        }
        File f = ExternalDocument.chooseAFileForExport(tournament, Gotha.exportDirectory, "txt");
        if (f == null) {
            return;
        }
        // Keep tournamentDirectory
        Gotha.exportDirectory = f.getParentFile();

        ExternalDocument.generateAGAResultsFile(tournament, f);
    }//GEN-LAST:event_btnExportRLAGAActionPerformed

    private void btnExportPlayersCSVActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExportPlayersCSVActionPerformed
        if (tournament == null) {
            JOptionPane.showMessageDialog(this, "No currently open tournament", "Message", JOptionPane.ERROR_MESSAGE);
            return;
        }

        File f = ExternalDocument.chooseAFileForExport(tournament, Gotha.exportDirectory, "csv");
        if (f == null) {
            return;
        }
        // Keep tournamentDirectory
        Gotha.exportDirectory = f.getParentFile();

        ExternalDocument.generatePlayersCSVFile(tournament, f);
    }//GEN-LAST:event_btnExportPlayersCSVActionPerformed

    private void btnExportPLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExportPLActionPerformed
        File f = ExternalDocument.generatePlayersListHTMLFile(tournament);
        String strLocalReport = "";
        if (f != null) {
            strLocalReport = "Players list" + " has been generated and stored into " + f.getPath();
        }

        String strRemoteReport = this.sendByFTP(f);

        String strReport = strLocalReport + "\n\n" + strRemoteReport;
        if (strReport.length() == 0) {
            strReport = "No file has been exported";
        }
        JOptionPane.showMessageDialog(this, strReport);
    }//GEN-LAST:event_btnExportPLActionPerformed

    /**
     * conditionnally sends f to a site via FTP returns a string report
     *
     */
    private String sendByFTP(File f) {
        DPParameterSet dpps = null;
        GeneralParameterSet gps = null;
        String shortName = "defaultTournament";
        try {
            gps = tournament.getTournamentParameterSet().getGeneralParameterSet();
            dpps = tournament.getTournamentParameterSet().getDPParameterSet();
            shortName = tournament.getTournamentParameterSet().getGeneralParameterSet().getShortName();
        } catch (RemoteException ex) {
            Logger.getLogger(JFrPrExShop.class.getName()).log(Level.SEVERE, null, ex);
        }

        if (!dpps.isExportToWebSite()) {
            return "";
        }

        String strHost;
        String strLogin;
        String strPassword;
        if (dpps.isUseSpecificSite()) {
            Preferences prefsRoot = Preferences.userRoot();
            Preferences gothaPrefs = prefsRoot.node(Gotha.strPreferences);

            strHost = gothaPrefs.get("ftpHost", "");
            strLogin = gothaPrefs.get("ftpLogin", "");
            strPassword = gothaPrefs.get("ftpPassword", "");
            this.txfHost.setText(strHost);
            this.txfLogin.setText(strLogin);
            this.pwfPassword.setText(strPassword);

            this.ckbKeepIDs.setSelected(strHost.length() > 0);

            this.dlgFTPSite.setVisible(true);    // Dialogue de récup des id FTP
            strHost = this.txfHost.getText();
            strLogin = this.txfLogin.getText();
            strPassword = new String(this.pwfPassword.getPassword());

            if (this.ckbKeepIDs.isSelected()) {
                gothaPrefs.put("ftpHost", strHost);
                gothaPrefs.put("ftpLogin", strLogin);
                gothaPrefs.put("ftpPassword", strPassword);
            } else {
                gothaPrefs.put("ftpHost", "");
                gothaPrefs.put("ftpLogin", "");
                gothaPrefs.put("ftpPassword", "");
            }

        } else {
            strHost = "s206369267.onlinehome.fr";
            strLogin = "u45348341-ogt";
            strPassword = "hmeannnk";
        }

        FTPClient client = new FTPClient();
        try {
            client.connect(strHost);
            client.login(strLogin, strPassword);
        } catch (Exception ex) {
            return "FTP connection has failed";
        }

        String dirName = new SimpleDateFormat("yyyyMMdd").format(gps.getBeginDate()) + shortName;
        try {
            client.createDirectory(dirName);
        } catch (Exception ex) {
            // System.out.println("Création de répertoire a échoué");
        }
        try {
            client.changeDirectory(dirName);
            client.upload(f);
        } catch (Exception ex) {
            return "FTP upload has not been possible";
        }
        try {
            File cssFile = new java.io.File(f.getParent(), "current.css");
            client.upload(cssFile);
            File idxFile = new java.io.File(f.getParent(), "index.php");
            client.upload(idxFile);
            client.upload(new java.io.File(f.getParent(), "whitestone.png"));
            client.upload(new java.io.File(f.getParent(), "blackstone.png"));
        } catch (Exception ex) {
            //System.out.println("Exception" + ex.toString());
        }
        try {
            client.disconnect(true);
        } catch (Exception ex) {
            Logger.getLogger(JFrPrExShop.class.getName()).log(Level.SEVERE, null, ex);
        }

        String strURL = "" + f.getName() + " has been successfully uploaded to opengotha.info/tournaments/" + dirName + "/" + f.getName();
        return strURL;

    }

    private void btnExportStandingsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExportStandingsActionPerformed
        File f = ExternalDocument.generateStandingsHTMLFile(tournament, this.processedRoundNumber);

        String strLocalReport = "";
        if (f != null) {
            strLocalReport = "Standings lst after Round " + (this.processedRoundNumber + 1)
                    + " has been generated and stored into " + f.getPath();
        }

        String strRemoteReport = this.sendByFTP(f);

        String strReport = strLocalReport + "\n\n" + strRemoteReport;
        if (strReport.length() == 0) {
            strReport = "No file has been exported";
        }
        JOptionPane.showMessageDialog(this, strReport);

    }//GEN-LAST:event_btnExportStandingsActionPerformed

    private void btnExportTLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExportTLActionPerformed
        File f = ExternalDocument.generateTeamsListHTMLFile(tournament);

        String strLocalReport = "";
        if (f != null) {
            strLocalReport = "Teams list "
                    + " has been generated and stored into " + f.getPath();
        }

        String strRemoteReport = this.sendByFTP(f);

        String strReport = strLocalReport + "\n\n" + strRemoteReport;
        if (strReport.length() == 0) {
            strReport = "No file has been exported";
        }
        JOptionPane.showMessageDialog(this, strReport);
    }//GEN-LAST:event_btnExportTLActionPerformed

    private void btnExportGLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExportGLActionPerformed
        File f = ExternalDocument.generateGamesListHTMLFile(tournament, this.processedRoundNumber);

//        File f = ExternalDocument.generatePlayersListHTMLFile(tournament);
        String strLocalReport = "";
        if (f != null) {
            strLocalReport = "Games list of Round " + (this.processedRoundNumber + 1)
                    + " has been generated and stored into " + f.getPath();
        }

        String strRemoteReport = this.sendByFTP(f);

        String strReport = strLocalReport + "\n\n" + strRemoteReport;
        if (strReport.length() == 0) {
            strReport = "No file has been exported";
        }
        JOptionPane.showMessageDialog(this, strReport);
    }//GEN-LAST:event_btnExportGLActionPerformed

    private void btnExportTSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExportTSActionPerformed
        File f = ExternalDocument.generateTeamsStandingsHTMLFile(tournament, this.processedRoundNumber);

        String strLocalReport = "";
        if (f != null) {
            strLocalReport = "Team standings list of Round " + (this.processedRoundNumber + 1)
                    + " has been generated and stored into " + f.getPath();
        }

        String strRemoteReport = this.sendByFTP(f);

        String strReport = strLocalReport + "\n\n" + strRemoteReport;
        if (strReport.length() == 0) {
            strReport = "No file has been exported";
        }
        JOptionPane.showMessageDialog(this, strReport);
    }//GEN-LAST:event_btnExportTSActionPerformed

    private void btnExportMLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExportMLActionPerformed
        File f = ExternalDocument.generateMatchesListHTMLFile(tournament, this.processedRoundNumber);

        String strLocalReport = "";
        if (f != null) {
            strLocalReport = "Matches list of Round " + (this.processedRoundNumber + 1)
                    + " has been generated and stored into " + f.getPath();
        }

        String strRemoteReport = this.sendByFTP(f);

        String strReport = strLocalReport + "\n\n" + strRemoteReport;
        if (strReport.length() == 0) {
            strReport = "No file has been exported";
        }
        JOptionPane.showMessageDialog(this, strReport);
    }//GEN-LAST:event_btnExportMLActionPerformed

    private void btnHelpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHelpActionPerformed
        Gotha.displayGothaHelp("Print and Export Shop");
    }//GEN-LAST:event_btnHelpActionPerformed

    private void allCKBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_allCKBActionPerformed
        TournamentParameterSet tps;
        DPParameterSet dpps;
        try {
            tps = tournament.getTournamentParameterSet();
            dpps = tps.getDPParameterSet();
        } catch (RemoteException ex) {
            Logger.getLogger(JFrTournamentOptions.class.getName()).log(Level.SEVERE, null, ex);
            return;
        }
        boolean oldValue;
        boolean newValue;

        boolean somethingHasChanged = false;

        oldValue = dpps.isShowPlayerRank();
        newValue = this.ckbShowPlayerRank.isSelected();
        if (newValue != oldValue) {
            dpps.setShowPlayerRank(newValue);
            somethingHasChanged = true;
        }
        oldValue = dpps.isShowPlayerCountry();
        newValue = this.ckbShowPlayerCountry.isSelected();
        if (newValue != oldValue) {
            dpps.setShowPlayerCountry(newValue);
            somethingHasChanged = true;
        }
        oldValue = dpps.isShowPlayerClub();
        newValue = this.ckbShowPlayerClub.isSelected();
        if (newValue != oldValue) {
            dpps.setShowPlayerClub(newValue);
            somethingHasChanged = true;
        }
        oldValue = dpps.isShowByePlayer();
        newValue = this.ckbShowByePlayer.isSelected();
        if (newValue != oldValue) {
            dpps.setShowByePlayer(newValue);
            somethingHasChanged = true;
        }
        oldValue = dpps.isShowNotPairedPlayers();
        newValue = this.ckbShowNotPairedPlayers.isSelected();
        if (newValue != oldValue) {
            dpps.setShowNotPairedPlayers(newValue);
            somethingHasChanged = true;
        }
        oldValue = dpps.isShowNotParticipatingPlayers();
        newValue = this.ckbShowNotParticipatingPlayers.isSelected();
        if (newValue != oldValue) {
            dpps.setShowNotParticipatingPlayers(newValue);
            somethingHasChanged = true;
        }
        oldValue = dpps.isDisplayNumCol();
        newValue = this.ckbDisplayNumCol.isSelected();
        if (newValue != oldValue) {
            dpps.setDisplayNumCol(newValue);
            somethingHasChanged = true;
        }
        oldValue = dpps.isDisplayPlCol();
        newValue = this.ckbDisplayPlCol.isSelected();
        if (newValue != oldValue) {
            dpps.setDisplayPlCol(newValue);
            somethingHasChanged = true;
        }
        oldValue = dpps.isDisplayCoCol();
        newValue = this.ckbDisplayCoCol.isSelected();
        if (newValue != oldValue) {
            dpps.setDisplayCoCol(newValue);
            somethingHasChanged = true;
        }
        oldValue = dpps.isDisplayClCol();
        newValue = this.ckbDisplayClCol.isSelected();
        if (newValue != oldValue) {
            dpps.setDisplayClCol(newValue);
            somethingHasChanged = true;
        }
        oldValue = dpps.isDisplayIndGamesInMatches();
        newValue = this.ckbDisplayIndGames.isSelected();
        if (newValue != oldValue) {
            dpps.setDisplayIndGamesInMatches(newValue);
            somethingHasChanged = true;
        }
        oldValue = dpps.isExportToLocalFile();
        newValue = this.ckbExportToLocalFile.isSelected();
        if (newValue != oldValue) {
            dpps.setExportToLocalFile(newValue);
            somethingHasChanged = true;
        }
        oldValue = dpps.isExportToWebSite();
        newValue = this.ckbExportToWebSite.isSelected();
        if (newValue != oldValue) {
            dpps.setExportToWebSite(newValue);
            somethingHasChanged = true;
        }

        if (somethingHasChanged) {
            try {
                tournament.setTournamentParameterSet(tps);
                this.tournamentChanged();
            } catch (RemoteException ex) {
                Logger.getLogger(JFrTournamentOptions.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_allCKBActionPerformed

    private void allRDBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_allRDBActionPerformed
        TournamentParameterSet tps;
        DPParameterSet dpps;
        try {
            tps = tournament.getTournamentParameterSet();
            dpps = tps.getDPParameterSet();
        } catch (RemoteException ex) {
            Logger.getLogger(JFrTournamentOptions.class.getName()).log(Level.SEVERE, null, ex);
            return;
        }

        boolean somethingHasChanged = false;
        int newPlayerSortType = PlayerComparator.NAME_ORDER;
        if (this.rdbSortByRank.isSelected()) {
            newPlayerSortType = PlayerComparator.RANK_ORDER;
        }
        if (newPlayerSortType != dpps.getPlayerSortType()) {
            dpps.setPlayerSortType(newPlayerSortType);
            somethingHasChanged = true;
        }


        int newGameFormat = DPParameterSet.DP_GAME_FORMAT_FULL;
        if (this.rdbGameFormatShort.isSelected()) {
            newGameFormat = DPParameterSet.DP_GAME_FORMAT_SHORT;
        }
        if (newGameFormat != dpps.getGameFormat()) {
            dpps.setGameFormat(newGameFormat);
            somethingHasChanged = true;
        }

        boolean newUseSpecificSite = this.rdbSpecificSite.isSelected();
        if (newUseSpecificSite != dpps.isUseSpecificSite()) {
            dpps.setUseSpecificSite(newUseSpecificSite);
            somethingHasChanged = true;
        }

        if (somethingHasChanged) {
            try {
                tournament.setTournamentParameterSet(tps);
                this.tournamentChanged();
            } catch (RemoteException ex) {
                Logger.getLogger(JFrTournamentOptions.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_allRDBActionPerformed

    private void btnDlgFTPSiteOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDlgFTPSiteOKActionPerformed

        this.dlgFTPSite.dispose();
    }//GEN-LAST:event_btnDlgFTPSiteOKActionPerformed

    private void btnTestFTPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTestFTPActionPerformed
        File f = new File(Gotha.exportHTMLDirectory, "testfile.html");
        String strReport = this.sendByFTP(f);

        JOptionPane.showMessageDialog(this, strReport);

    }//GEN-LAST:event_btnTestFTPActionPerformed

    private void btnOGActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOGActionPerformed
        String strURL = "http://opengotha.info";
        URL url = null;
        try {
            url = new URL(strURL);
        } catch (MalformedURLException ex) {
            Logger.getLogger(JFrPrExShop.class.getName()).log(Level.SEVERE, null, ex);
        }
        Desktop desktop = Desktop.isDesktopSupported() ? Desktop.getDesktop() : null;
        if (desktop != null && desktop.isSupported(Desktop.Action.BROWSE)) {
            try {
                desktop.browse(url.toURI());
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_btnOGActionPerformed

    private void demandedDisplayedRoundNumberHasChanged(int demandedRN) {
        int numberOfRounds = 0;
        try {
            numberOfRounds = tournament.getTournamentParameterSet().getGeneralParameterSet().getNumberOfRounds();
        } catch (RemoteException ex) {
            Logger.getLogger(JFrGotha.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (demandedRN < 0 || demandedRN >= numberOfRounds) {
            spnRoundNumber.setValue(processedRoundNumber + 1);
            return;
        }
        if (demandedRN == processedRoundNumber) {
            return;
        }

        processedRoundNumber = demandedRN;
        updateAllViews();
    }

    private void tournamentChanged() {
        try {
            tournament.setLastTournamentModificationTime(tournament.getCurrentTournamentTime());
        } catch (RemoteException ex) {
            Logger.getLogger(JFrTournamentOptions.class.getName()).log(Level.SEVERE, null, ex);
        }
        updateAllViews();
    }

    private void updateAllViews() {
        try {
            if (!tournament.isOpen()) {
                dispose();
            }
            this.lastComponentsUpdateTime = tournament.getCurrentTournamentTime();
            setTitle("Print & Export Shop. " + tournament.getFullName());
        } catch (RemoteException ex) {
            Logger.getLogger(JFrGamesPair.class.getName()).log(Level.SEVERE, null, ex);
        }

        int nbRounds = Gotha.MAX_NUMBER_OF_ROUNDS;
        try {
            nbRounds = tournament.getTournamentParameterSet().getGeneralParameterSet().getNumberOfRounds();
        } catch (RemoteException ex) {
            Logger.getLogger(JFrGamesPair.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (this.processedRoundNumber >= nbRounds) {
            JOptionPane.showMessageDialog(this, "The number of rounds has been modified."
                    + "\n" + "Current round will be consequently changed",
                    "Games Pair Message", JOptionPane.WARNING_MESSAGE);
            this.processedRoundNumber = nbRounds - 1;
        }


        updateComponents();

        try {
            this.lastComponentsUpdateTime = tournament.getCurrentTournamentTime();
        } catch (RemoteException ex) {
            Logger.getLogger(JFrPrExShop.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    private void updateComponents() {
        try {
            updatePnlPub();
            updatePnlPar();
        } catch (RemoteException ex) {
            Logger.getLogger(JFrPrExShop.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void updatePnlPub() throws RemoteException {
        this.spnRoundNumber.setValue(this.processedRoundNumber + 1);

        String strRound = " round " + (processedRoundNumber + 1);
        this.btnPrintGL.setText("Print games of" + strRound);
        this.btnPrintNPP.setText("Print not playing players of" + strRound);
        this.btnExportGL.setText("Export(html) games of" + strRound);
        this.btnPrintStandings.setText("Print standings after" + strRound);
        this.btnExportStandings.setText("Export(html) standings after" + strRound);
        this.btnPrintML.setText("Print matches list of" + strRound);
        this.btnExportML.setText("Export(html) matches list of" + strRound);
        this.btnPrintTS.setText("Print team standings after" + strRound);
        this.btnExportTS.setText("Export(html) team st. after" + strRound);

        int nbTeams = tournament.teamsList().size();
        boolean bT = false;
        if (nbTeams > 0) {
            bT = true;
        }
        Component[] tabComp = this.pnlTeams.getComponents();
        for (Component comp : tabComp) {
            comp.setEnabled(bT);
        }
    }

    private void updatePnlPar() throws RemoteException {
        DPParameterSet dpps = tournament.getTournamentParameterSet().getDPParameterSet();
        GeneralParameterSet gps = tournament.getTournamentParameterSet().getGeneralParameterSet();
        if (dpps.getPlayerSortType() == PlayerComparator.NAME_ORDER) {
            this.rdbSorBytName.setSelected(true);
        } else {
            this.rdbSortByRank.setSelected(true);
        }
        if (dpps.getGameFormat() == DPParameterSet.DP_GAME_FORMAT_FULL) {
            this.rdbGameFormatFull.setSelected(true);
        } else {
            this.rdbGameFormatShort.setSelected(true);
        }

        this.ckbShowPlayerRank.setSelected(dpps.isShowPlayerRank());
        this.ckbShowPlayerCountry.setSelected(dpps.isShowPlayerCountry());
        this.ckbShowPlayerClub.setSelected(dpps.isShowPlayerClub());

        this.ckbDisplayNumCol.setSelected(dpps.isDisplayNumCol());
        this.ckbDisplayPlCol.setSelected(dpps.isDisplayPlCol());
        this.ckbDisplayCoCol.setSelected(dpps.isDisplayCoCol());
        this.ckbDisplayClCol.setSelected(dpps.isDisplayClCol());
        this.ckbShowByePlayer.setSelected(dpps.isShowByePlayer());
        this.ckbShowNotPairedPlayers.setSelected(dpps.isShowNotPairedPlayers());
        this.ckbShowNotParticipatingPlayers.setSelected(dpps.isShowNotParticipatingPlayers());

        this.ckbDisplayIndGames.setSelected(dpps.isDisplayIndGamesInMatches());

        this.ckbExportToLocalFile.setSelected(dpps.isExportToLocalFile());
        if (dpps.isExportToLocalFile()) {
            String strDir = "" + Gotha.exportHTMLDirectory;
            this.lblLocalExport.setVisible(true);
            this.lblLocalExport.setText("HTML local exports will be stored into " + strDir);
        } else {
            this.lblLocalExport.setVisible(false);
        }

        this.ckbExportToWebSite.setSelected(dpps.isExportToWebSite());
        this.rdbSpecificSite.setSelected(dpps.isUseSpecificSite());
        this.lblQR.setVisible(false);

        boolean bExportWS = dpps.isExportToWebSite();
        this.rdbOGSite.setEnabled(bExportWS);
        this.btnTestFTP.setEnabled(bExportWS);
        this.lblRemoteExport.setVisible(bExportWS);

        if (bExportWS) {
            //this.rdbSpecificSite.setEnabled(bExportWS);

            this.rdbSpecificSite.setSelected(dpps.isUseSpecificSite());
            String strRemote = "HTML remote exports will be uploaded to ";
            String dirName = new SimpleDateFormat("yyyyMMdd").format(gps.getBeginDate()) + tournament.getShortName() + "/";


            if (dpps.isUseSpecificSite()) {
                strRemote += "the specified site /" + dirName;
            } else {
               String strURL = "opengotha.info/tournaments/" + dirName;
                strRemote += strURL;
                Image img = null;
                try {
                    img = QR.qrImage(strURL);
                } catch (WriterException ex) {
                    Logger.getLogger(JFrPrExShop.class.getName()).log(Level.SEVERE, null, ex);
                }
                this.lblQR.setIcon(new ImageIcon(img));
                this.lblQR.setVisible(true);
            }
            this.lblRemoteExport.setText(strRemote);
        }

    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClose;
    private javax.swing.JButton btnDlgFTPSiteOK;
    private javax.swing.JButton btnExportGL;
    private javax.swing.JButton btnExportML;
    private javax.swing.JButton btnExportPL;
    private javax.swing.JButton btnExportPlayersCSV;
    private javax.swing.JButton btnExportRLAGA;
    private javax.swing.JButton btnExportRLEGF;
    private javax.swing.JButton btnExportRLFFG;
    private javax.swing.JButton btnExportStandings;
    private javax.swing.JButton btnExportTL;
    private javax.swing.JButton btnExportTS;
    private javax.swing.JButton btnHelp;
    private javax.swing.JButton btnOG;
    private javax.swing.JButton btnPrintGL;
    private javax.swing.JButton btnPrintML;
    private javax.swing.JButton btnPrintNPP;
    private javax.swing.JButton btnPrintPL;
    private javax.swing.JButton btnPrintStandings;
    private javax.swing.JButton btnPrintTL;
    private javax.swing.JButton btnPrintTP;
    private javax.swing.JButton btnPrintTS;
    private javax.swing.JButton btnTestFTP;
    private javax.swing.JCheckBox ckbDisplayClCol;
    private javax.swing.JCheckBox ckbDisplayCoCol;
    private javax.swing.JCheckBox ckbDisplayIndGames;
    private javax.swing.JCheckBox ckbDisplayNumCol;
    private javax.swing.JCheckBox ckbDisplayPlCol;
    private javax.swing.JCheckBox ckbExportToLocalFile;
    private javax.swing.JCheckBox ckbExportToWebSite;
    private javax.swing.JCheckBox ckbKeepIDs;
    private javax.swing.JCheckBox ckbShowByePlayer;
    private javax.swing.JCheckBox ckbShowNotPairedPlayers;
    private javax.swing.JCheckBox ckbShowNotParticipatingPlayers;
    private javax.swing.JCheckBox ckbShowPlayerClub;
    private javax.swing.JCheckBox ckbShowPlayerCountry;
    private javax.swing.JCheckBox ckbShowPlayerRank;
    private javax.swing.JDialog dlgFTPSite;
    private javax.swing.ButtonGroup grpGameFormat;
    private javax.swing.ButtonGroup grpRemote;
    private javax.swing.ButtonGroup grpSortType;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel lblLocalExport;
    private javax.swing.JLabel lblQR;
    private javax.swing.JLabel lblRemoteExport;
    private javax.swing.JPanel pnlExport;
    private javax.swing.JPanel pnlGL;
    private javax.swing.JPanel pnlML;
    private javax.swing.JPanel pnlNPP;
    private javax.swing.JPanel pnlPL;
    private javax.swing.JPanel pnlPar;
    private javax.swing.JPanel pnlPub;
    private javax.swing.JPanel pnlSt;
    private javax.swing.JPanel pnlTeams;
    private javax.swing.JPasswordField pwfPassword;
    private javax.swing.JRadioButton rdbGameFormatFull;
    private javax.swing.JRadioButton rdbGameFormatShort;
    private javax.swing.JRadioButton rdbOGSite;
    private javax.swing.JRadioButton rdbSorBytName;
    private javax.swing.JRadioButton rdbSortByRank;
    private javax.swing.JRadioButton rdbSpecificSite;
    private javax.swing.JSpinner spnRoundNumber;
    private javax.swing.JTabbedPane tpnPrEx;
    private javax.swing.JTextField txfHost;
    private javax.swing.JTextField txfLogin;
    // End of variables declaration//GEN-END:variables
}
