/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package info.vannier.gotha;

import java.awt.Dimension;
import java.awt.Font;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.rmi.RemoteException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JCheckBox;
import javax.swing.JOptionPane;

/**
 *
 * @author Luc
 */
public class JFrDiscardRounds extends javax.swing.JFrame {
    private static final long REFRESH_DELAY = 2000;
    private long lastComponentsUpdateTime = 0;

    private TournamentInterface tournament;

    /**
     * Creates new form JFrDiscardRounds
     */
    public JFrDiscardRounds(TournamentInterface tournament) throws RemoteException {
        this.tournament = tournament;
        
        initComponents();
        customInitComponents();
        setupRefreshTimer();
    }

    private void setupRefreshTimer(){
        ActionListener taskPerformer = new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent evt){
                try {
                    if (tournament.getLastTournamentModificationTime() > lastComponentsUpdateTime) {
                        updateAllViews();
                    }
                } catch (RemoteException ex) {
                    Logger.getLogger(JFrGamesResults.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        };
        new javax.swing.Timer((int) REFRESH_DELAY, taskPerformer).start();
    }

 
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnClose = new javax.swing.JButton();
        btnHelp = new javax.swing.JButton();
        pnlRoundsToKeep = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        ckbRemoveNotImpliedPlayers = new javax.swing.JCheckBox();
        ckbShiftRounds = new javax.swing.JCheckBox();
        btnDiscardRounds = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Discard rounds");
        setResizable(false);
        getContentPane().setLayout(null);

        btnClose.setText("Close");
        btnClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCloseActionPerformed(evt);
            }
        });
        getContentPane().add(btnClose);
        btnClose.setBounds(150, 280, 370, 30);

        btnHelp.setIcon(new javax.swing.ImageIcon(getClass().getResource("/info/vannier/gotha/gothalogo16.jpg"))); // NOI18N
        btnHelp.setText("help");
        btnHelp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHelpActionPerformed(evt);
            }
        });
        getContentPane().add(btnHelp);
        btnHelp.setBounds(20, 280, 110, 30);

        pnlRoundsToKeep.setBorder(javax.swing.BorderFactory.createTitledBorder("Rounds to keep"));
        pnlRoundsToKeep.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        pnlRoundsToKeep.setLayout(null);
        getContentPane().add(pnlRoundsToKeep);
        pnlRoundsToKeep.setBounds(300, 30, 220, 140);

        jLabel1.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
        jLabel1.setText("Checked rounds will be kept");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(20, 40, 260, 14);

        jLabel2.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
        jLabel2.setText("Unchecked rounds will be discarded");
        getContentPane().add(jLabel2);
        jLabel2.setBounds(20, 60, 260, 14);

        ckbRemoveNotImpliedPlayers.setSelected(true);
        ckbRemoveNotImpliedPlayers.setText("Remove players implied in no round ");
        getContentPane().add(ckbRemoveNotImpliedPlayers);
        ckbRemoveNotImpliedPlayers.setBounds(30, 130, 260, 23);

        ckbShiftRounds.setSelected(true);
        ckbShiftRounds.setText("Shift  rounds to fill discarded rounds");
        getContentPane().add(ckbShiftRounds);
        ckbShiftRounds.setBounds(30, 150, 260, 23);

        btnDiscardRounds.setText("Discard rounds");
        btnDiscardRounds.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDiscardRoundsActionPerformed(evt);
            }
        });
        getContentPane().add(btnDiscardRounds);
        btnDiscardRounds.setBounds(20, 210, 500, 40);

        jLabel3.setText("After discarding rounds");
        getContentPane().add(jLabel3);
        jLabel3.setBounds(20, 110, 270, 14);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCloseActionPerformed
        dispose();
    }//GEN-LAST:event_btnCloseActionPerformed

    private void btnHelpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHelpActionPerformed
//        JOptionPane.showMessageDialog(this, " This help will be available shortly");
        Gotha.displayGothaHelp("Discard rounds frame");
    }//GEN-LAST:event_btnHelpActionPerformed

    private void btnDiscardRoundsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDiscardRoundsActionPerformed
        boolean[] bRoundsToKeep = new boolean[Gotha.MAX_NUMBER_OF_ROUNDS];
        for (int r = 0; r < Gotha.MAX_NUMBER_OF_ROUNDS; r++){
            bRoundsToKeep[r] = this.tabCkbRoundsToKeep[r].isSelected();
        }
        
        int nbDiscardedRounds = 0;
        int nbRemovedGames = 0;
        int nbRemovedByes = 0;
        int nbRemovedPlayers = 0;
        int nbShiftedRounds = 0;
                
        int nbRounds = Gotha.MAX_NUMBER_OF_ROUNDS;
            try {
                nbRounds = tournament.getTournamentParameterSet().getGeneralParameterSet().getNumberOfRounds();
            } catch (RemoteException ex) {
                Logger.getLogger(JFrDiscardRounds.class.getName()).log(Level.SEVERE, null, ex);
            }

        // How many rounds to be discarded ?
        for (int r = 0; r < nbRounds; r++){
            if(!bRoundsToKeep[r]) nbDiscardedRounds++;
        }
        
        // Discard games from unchecked rounds 
        ArrayList<Game> alGames = null;
        try {
            alGames = tournament.gamesList();
        } catch (RemoteException ex) {
            Logger.getLogger(JFrExperimentalTools.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        for (Game g : alGames){
            int r = g.getRoundNumber();
            if (!bRoundsToKeep[r]) {
                try {
                    tournament.removeGame(g);
                } catch (TournamentException ex) {
                    Logger.getLogger(JFrDiscardRounds.class.getName()).log(Level.SEVERE, null, ex);
                } catch (RemoteException ex) {
                    Logger.getLogger(JFrDiscardRounds.class.getName()).log(Level.SEVERE, null, ex);
                }
                nbRemovedGames++;
            }
        }
        // Unassign bye players 
        for(int r = 0; r < Gotha.MAX_NUMBER_OF_ROUNDS; r++){
            if (!bRoundsToKeep[r]){
                try {    
                    if (tournament.getByePlayer(r) != null){
                        tournament.unassignByePlayer(r);
                        nbRemovedByes++;
                    }
                } catch (RemoteException ex) {
                    Logger.getLogger(JFrDiscardRounds.class.getName()).log(Level.SEVERE, null, ex);
                }
            }   
        }       
        
        // If required, remove unimplied players
        if (this.ckbRemoveNotImpliedPlayers.isSelected()){
            ArrayList<Player> alP;
            try {
                alP = tournament.playersList();
                for (Player p : alP){
                    if(!tournament.isPlayerImplied(p)){
                        tournament.removePlayer(p);
                        nbRemovedPlayers++;
                    }
                }
            } catch (RemoteException ex) {
                Logger.getLogger(JFrDiscardRounds.class.getName()).log(Level.SEVERE, null, ex);
            } catch (TournamentException ex) {
                Logger.getLogger(JFrDiscardRounds.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        

        // If required, shift rounds
        if (this.ckbShiftRounds.isSelected()){
            // All games are shifted
            // All bye players are shifted
            // All participations are shifted

            int newNumberOfRounds = nbRounds;

            int newR = -1;
            for (int oldR = 0; oldR < nbRounds; oldR++){
                if(!bRoundsToKeep[oldR]) continue;
                newR++;
                if (newR == oldR) continue;
                ArrayList<Game> alG = null;
                try {
                    nbShiftedRounds++;
                    alG = tournament.gamesList(oldR);
                    for(Game g : alG){
                        tournament.setRoundNumber(g, newR);
                    }
                    Player p = tournament.getByePlayer(oldR);
                    tournament.setByePlayer(p, newR);
                    tournament.setByePlayer(null, oldR);                   
                } catch (RemoteException ex) {
                    Logger.getLogger(JFrDiscardRounds.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            newNumberOfRounds = newR + 1;
            // Participation
            ArrayList<Player> alP = null;;
            try {
                alP = tournament.playersList();
            } catch (RemoteException ex) {
                Logger.getLogger(JFrDiscardRounds.class.getName()).log(Level.SEVERE, null, ex);
            }
            for (Player p: alP){
                boolean[] bPart = p.getParticipating();
                newR = -1;
                for (int oldR = 0; oldR < nbRounds; oldR++){
                    if(!bRoundsToKeep[oldR]) continue;
                    newR++;
                    if (newR == oldR) continue;
                    bPart[newR] = bPart[oldR];
                    bPart[oldR] = true;
                }
                p.setParticipating(bPart);
                try {
                    tournament.modifyPlayer(p, p);
                } catch (TournamentException ex) {
                    Logger.getLogger(JFrDiscardRounds.class.getName()).log(Level.SEVERE, null, ex);
                } catch (RemoteException ex) {
                    Logger.getLogger(JFrDiscardRounds.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            try {
                tournament.getTournamentParameterSet().getGeneralParameterSet().setNumberOfRounds(newNumberOfRounds);
            } catch (RemoteException ex) {
                Logger.getLogger(JFrDiscardRounds.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        // Reset check boxes selection
        for (int i = 0; i < Gotha.MAX_NUMBER_OF_ROUNDS; i++) {
            tabCkbRoundsToKeep[i].setSelected(true);
        }

        tournamentChanged();
        String str = "" + nbDiscardedRounds;
            if (nbDiscardedRounds < 2) str += " round has been discarded";
            else str += " rounds have been discarded";
        str += "\n" + nbRemovedGames;
            if (nbRemovedGames < 2) str += " game has been removed";
            else str += " games have been removed";
        str += "\n" + nbRemovedByes;
            if (nbRemovedByes < 2) str += " bye player has been unassigned";
            else str += " bye players have been unassigned";
        str += "\n" + nbRemovedPlayers;
            if (nbRemovedPlayers < 2) str += " player has been removed";
            else str += " players have been removed";
        str += "\n" + nbShiftedRounds;
            if (nbShiftedRounds < 2) str += " round has been shifted";
            else str += " rounds have been shifted";
        JOptionPane.showMessageDialog(this, str);

    }//GEN-LAST:event_btnDiscardRoundsActionPerformed

    private void customInitComponents()throws RemoteException{
        int w = JFrGotha.SMALL_FRAME_WIDTH;
        int h = JFrGotha.SMALL_FRAME_HEIGHT;
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((dim.width - w)/2, (dim.height -h)/2, w, h);
        setIconImage(Gotha.getIconImage());

        tabCkbRoundsToKeep = new JCheckBox[Gotha.MAX_NUMBER_OF_ROUNDS];
        for (int i = 0; i < Gotha.MAX_NUMBER_OF_ROUNDS; i++) {
            tabCkbRoundsToKeep[i] = new JCheckBox();
            tabCkbRoundsToKeep[i].setText("" + (i + 1));
            tabCkbRoundsToKeep[i].setFont(new Font("Default", Font.PLAIN, 9));
            pnlRoundsToKeep.add(tabCkbRoundsToKeep[i]);
            tabCkbRoundsToKeep[i].setBounds((i % 5) * 42 + 4, (i / 5) * 25 + 20, 40, 15);
            tabCkbRoundsToKeep[i].setSelected(true);
        }

        updateAllViews();
    }

    
    private void updateAllViews(){
        try {
            if (!tournament.isOpen()) dispose();
            this.lastComponentsUpdateTime = tournament.getCurrentTournamentTime();
            setTitle("Discard rounds. " + tournament.getFullName());        
        } catch (RemoteException ex) {
            Logger.getLogger(JFrPlayersQuickCheck.class.getName()).log(Level.SEVERE, null, ex);
        }
        int nbRounds = Gotha.MAX_NUMBER_OF_ROUNDS;
        try {
            nbRounds = tournament.getTournamentParameterSet().getGeneralParameterSet().getNumberOfRounds();
        } catch (RemoteException ex) {
            Logger.getLogger(JFrDiscardRounds.class.getName()).log(Level.SEVERE, null, ex);
        }
        for (int i = 0; i < nbRounds; i++) {
            tabCkbRoundsToKeep[i].setVisible(true); 
        }
        for (int i = nbRounds; i < Gotha.MAX_NUMBER_OF_ROUNDS; i++) {
            tabCkbRoundsToKeep[i].setVisible(false); 
        }
        this.pnlRoundsToKeep.setSize(new Dimension(220, 30 + (nbRounds + 4) / 5 * 25));
    } 
        
    private void tournamentChanged(){
        try {
            if (!tournament.isOpen()){
                dispose();
                return;
            }
            tournament.setLastTournamentModificationTime(tournament.getCurrentTournamentTime());
        } catch (RemoteException ex) {
            Logger.getLogger(JFrDiscardRounds.class.getName()).log(Level.SEVERE, null, ex);
        }
    

    updateAllViews();

}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClose;
    private javax.swing.JButton btnDiscardRounds;
    private javax.swing.JButton btnHelp;
    private javax.swing.JCheckBox ckbRemoveNotImpliedPlayers;
    private javax.swing.JCheckBox ckbShiftRounds;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel pnlRoundsToKeep;
    // End of variables declaration//GEN-END:variables
    // Custom variable declarations. Editable
    private javax.swing.JCheckBox[] tabCkbRoundsToKeep;
    // End of custom variables declaration

}
