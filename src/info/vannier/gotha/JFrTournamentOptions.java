/*
 * JFrTournamentOptions.java
 */

package info.vannier.gotha;

import java.awt.Dimension;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.rmi.RemoteException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JLabel;
import javax.swing.JTextField;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableModel;
/**
 *
 * @author  Luc Vannier
 */
public class JFrTournamentOptions extends javax.swing.JFrame{
    private static final long REFRESH_DELAY = 2000;
    private long lastComponentsUpdateTime = 0;

    
    private static final int CRITERION_NAME = 0;
    private static final int CRITERION_SHORT_NAME = 1;
    private static final int CRITERION_DESCRIPTION = 2;
    
    private TournamentInterface tournament;    
    
    private void setupRefreshTimer(){
        ActionListener taskPerformer = new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent evt){
                try {
                    if (tournament.getLastTournamentModificationTime() > lastComponentsUpdateTime) {
                        updateAllViews();
                    }
                } catch (RemoteException ex) {
                    Logger.getLogger(JFrGamesResults.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        };
        new javax.swing.Timer((int) REFRESH_DELAY, taskPerformer).start();
    }
    
    public JFrTournamentOptions(TournamentInterface tournament) throws RemoteException{
//        LogElements.incrementElement("options.tournament", "");
        this.tournament = tournament;
        
        initComponents();
        customInitComponents();
        setupRefreshTimer();

    }    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        grpHdCorrection = new javax.swing.ButtonGroup();
        grpAbsentNBW = new javax.swing.ButtonGroup();
        grpAbsentMMS = new javax.swing.ButtonGroup();
        grpByeNBW = new javax.swing.ButtonGroup();
        grpByeMMS = new javax.swing.ButtonGroup();
        grpRandom = new javax.swing.ButtonGroup();
        grpDUDDUG = new javax.swing.ButtonGroup();
        grpDUDDLG = new javax.swing.ButtonGroup();
        grpSeedingFormer = new javax.swing.ButtonGroup();
        grpSeedingLatter = new javax.swing.ButtonGroup();
        dlgChangeSystem = new javax.swing.JDialog();
        rdbMcMahon = new javax.swing.JRadioButton();
        rdbSwiss = new javax.swing.JRadioButton();
        rdbSwissCat = new javax.swing.JRadioButton();
        lblNewSystem = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        btnDlgChangeSystemOK = new javax.swing.JButton();
        btnDlgChangeSystemCancel = new javax.swing.JButton();
        jLabel27 = new javax.swing.JLabel();
        lblRecommended = new javax.swing.JLabel();
        ckbResetParameters = new javax.swing.JCheckBox();
        grpNewSystem = new javax.swing.ButtonGroup();
        grpHdBase = new javax.swing.ButtonGroup();
        grpGameFormat = new javax.swing.ButtonGroup();
        btnQuit = new javax.swing.JButton();
        tpnParameters = new javax.swing.JTabbedPane();
        pnlGen = new javax.swing.JPanel();
        pnlCategories = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        btnAdjustCategoryLimits = new javax.swing.JButton();
        txfNumberOfCategories = new javax.swing.JTextField();
        pnlTournamentDetails = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txfShortName = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txfName = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txfLocation = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txfBeginDate = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        txfNumberOfRounds = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        txfEndDate = new javax.swing.JTextField();
        jLabel37 = new javax.swing.JLabel();
        txfDirector = new javax.swing.JTextField();
        lblSystemName = new javax.swing.JLabel();
        pnlMcMahon = new javax.swing.JPanel();
        lblMMBar = new javax.swing.JLabel();
        txfMMBar = new javax.swing.JTextField();
        lblMMFloor = new javax.swing.JLabel();
        txfMMFloor = new javax.swing.JTextField();
        lblMMZero = new javax.swing.JLabel();
        txfMMZero = new javax.swing.JTextField();
        pnlSpecialResults = new javax.swing.JPanel();
        rdbAbsentNBW0 = new javax.swing.JRadioButton();
        rdbAbsentNBW1 = new javax.swing.JRadioButton();
        rdbAbsentNBW2 = new javax.swing.JRadioButton();
        rdbAbsentMMS0 = new javax.swing.JRadioButton();
        rdbAbsentMMS1 = new javax.swing.JRadioButton();
        rdbAbsentMMS2 = new javax.swing.JRadioButton();
        rdbByeNBW0 = new javax.swing.JRadioButton();
        rdbByeNBW1 = new javax.swing.JRadioButton();
        rdbByeNBW2 = new javax.swing.JRadioButton();
        rdbByeMMS0 = new javax.swing.JRadioButton();
        rdbByeMMS1 = new javax.swing.JRadioButton();
        rdbByeMMS2 = new javax.swing.JRadioButton();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        ckbRoundDown = new javax.swing.JCheckBox();
        btnChangeSystem = new javax.swing.JButton();
        btnHelpGeneral = new javax.swing.JButton();
        pnlHan = new javax.swing.JPanel();
        lblHandicap = new javax.swing.JLabel();
        pnlHandicap = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        txfNoHdRankThreshold = new javax.swing.JTextField();
        rdbHdCorrection0 = new javax.swing.JRadioButton();
        rdbHdCorrection1 = new javax.swing.JRadioButton();
        rdbHdCorrection2 = new javax.swing.JRadioButton();
        rdbHdCorrectionPlus1 = new javax.swing.JRadioButton();
        jLabel10 = new javax.swing.JLabel();
        txfHdCeiling = new javax.swing.JTextField();
        jLabel29 = new javax.swing.JLabel();
        rdbHdBaseMMS = new javax.swing.JRadioButton();
        rdbHdBaseRank = new javax.swing.JRadioButton();
        jLabel30 = new javax.swing.JLabel();
        rdbHdCorrection3 = new javax.swing.JRadioButton();
        btnHelpHandicap = new javax.swing.JButton();
        pnlPla = new javax.swing.JPanel();
        jLabel11 = new javax.swing.JLabel();
        cbxCrit1 = new javax.swing.JComboBox();
        jLabel12 = new javax.swing.JLabel();
        cbxCrit2 = new javax.swing.JComboBox();
        jLabel13 = new javax.swing.JLabel();
        cbxCrit3 = new javax.swing.JComboBox();
        jLabel14 = new javax.swing.JLabel();
        cbxCrit4 = new javax.swing.JComboBox();
        pnlGlossary = new javax.swing.JPanel();
        scpGlossary = new javax.swing.JScrollPane();
        tblGlossary = new javax.swing.JTable();
        jScrollPane1 = new javax.swing.JScrollPane();
        txaWarning = new javax.swing.JTextArea();
        btnHelpPlacement = new javax.swing.JButton();
        pnlPai = new javax.swing.JPanel();
        pnlBase = new javax.swing.JPanel();
        ckbAvoidPairingSamePair = new javax.swing.JCheckBox();
        ckbBalanceWB = new javax.swing.JCheckBox();
        rdbNoRandom = new javax.swing.JRadioButton();
        rdbAcceptRandom = new javax.swing.JRadioButton();
        ckbDeterministic = new javax.swing.JCheckBox();
        pnlMain = new javax.swing.JPanel();
        ckbAvoidMixingCategories = new javax.swing.JCheckBox();
        ckbMinimizeScoreDifference = new javax.swing.JCheckBox();
        pnlDUDD = new javax.swing.JPanel();
        pnlDUDDUG = new javax.swing.JPanel();
        rdbDUDDUGTop = new javax.swing.JRadioButton();
        rdbDUDDUGMid = new javax.swing.JRadioButton();
        rdbDUDDUGBot = new javax.swing.JRadioButton();
        pnlDUDDLG = new javax.swing.JPanel();
        rdbDUDDLGTop = new javax.swing.JRadioButton();
        rdbDUDDLGMid = new javax.swing.JRadioButton();
        rdbDUDDLGBot = new javax.swing.JRadioButton();
        ckbCompensate = new javax.swing.JCheckBox();
        ckbAvoid2DUDD = new javax.swing.JCheckBox();
        jLabel40 = new javax.swing.JLabel();
        pnlSeeding = new javax.swing.JPanel();
        txfLastRoundForSeedSystem1 = new javax.swing.JTextField();
        jLabel20 = new javax.swing.JLabel();
        pnlFormer = new javax.swing.JPanel();
        ckbAddSortOnRating = new javax.swing.JCheckBox();
        rdbFormerSplitAndRandom = new javax.swing.JRadioButton();
        rdbFormerSplitAndFold = new javax.swing.JRadioButton();
        rdbFormerSplitAndSlip = new javax.swing.JRadioButton();
        pnlLatter = new javax.swing.JPanel();
        rdbLatterSplitAndRandom = new javax.swing.JRadioButton();
        rdbLatterSplitAndFold = new javax.swing.JRadioButton();
        rdbLatterSplitAndSlip = new javax.swing.JRadioButton();
        pnlSecondary = new javax.swing.JPanel();
        jLabel21 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        txfSeRankThreshold = new javax.swing.JTextField();
        ckbSeNbWinsThresholdActive = new javax.swing.JCheckBox();
        jLabel23 = new javax.swing.JLabel();
        txfSeCountry = new javax.swing.JTextField();
        jLabel24 = new javax.swing.JLabel();
        txfSeClub = new javax.swing.JTextField();
        ckbSeMinimizeHandicap = new javax.swing.JCheckBox();
        jLabel25 = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        ckbSeBarThresholdActive = new javax.swing.JCheckBox();
        btnHelpPairing = new javax.swing.JButton();
        pnlTPL = new javax.swing.JPanel();
        jLabel31 = new javax.swing.JLabel();
        cbxTeamCrit1 = new javax.swing.JComboBox();
        jLabel32 = new javax.swing.JLabel();
        cbxTeamCrit2 = new javax.swing.JComboBox();
        jLabel33 = new javax.swing.JLabel();
        cbxTeamCrit3 = new javax.swing.JComboBox();
        jLabel34 = new javax.swing.JLabel();
        cbxTeamCrit4 = new javax.swing.JComboBox();
        jLabel35 = new javax.swing.JLabel();
        cbxTeamCrit5 = new javax.swing.JComboBox();
        jLabel36 = new javax.swing.JLabel();
        cbxTeamCrit6 = new javax.swing.JComboBox();
        pnlTeamGlossary = new javax.swing.JPanel();
        scpTeamGlossary = new javax.swing.JScrollPane();
        tblTeamGlossary = new javax.swing.JTable();
        scpTeamWarning = new javax.swing.JScrollPane();
        txaTeamWarning = new javax.swing.JTextArea();
        btnHelpTeamPlacement = new javax.swing.JButton();
        btnPrint = new javax.swing.JButton();

        dlgChangeSystem.getContentPane().setLayout(null);

        grpNewSystem.add(rdbMcMahon);
        rdbMcMahon.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        rdbMcMahon.setSelected(true);
        rdbMcMahon.setText("McMahon");
        rdbMcMahon.setToolTipText("Players will be paired according to their rank! The winner will be the strongest");
        rdbMcMahon.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        rdbMcMahon.setMargin(new java.awt.Insets(0, 0, 0, 0));
        dlgChangeSystem.getContentPane().add(rdbMcMahon);
        rdbMcMahon.setBounds(180, 110, 170, 13);

        grpNewSystem.add(rdbSwiss);
        rdbSwiss.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        rdbSwiss.setText("Swiss");
        rdbSwiss.setToolTipText("Good system for championships");
        rdbSwiss.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        rdbSwiss.setMargin(new java.awt.Insets(0, 0, 0, 0));
        dlgChangeSystem.getContentPane().add(rdbSwiss);
        rdbSwiss.setBounds(180, 140, 170, 13);

        grpNewSystem.add(rdbSwissCat);
        rdbSwissCat.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        rdbSwissCat.setText("Swiss with categories");
        rdbSwissCat.setToolTipText("Because of possible games with a big rank difference, this system is not usually recommended");
        rdbSwissCat.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        rdbSwissCat.setMargin(new java.awt.Insets(0, 0, 0, 0));
        dlgChangeSystem.getContentPane().add(rdbSwissCat);
        rdbSwissCat.setBounds(180, 170, 170, 13);

        lblNewSystem.setText("New system :");
        dlgChangeSystem.getContentPane().add(lblNewSystem);
        lblNewSystem.setBounds(180, 80, 110, 14);

        jLabel19.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
        jLabel19.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel19.setText("Changing tournament system will reset system-specific settings");
        dlgChangeSystem.getContentPane().add(jLabel19);
        jLabel19.setBounds(10, 220, 470, 20);

        btnDlgChangeSystemOK.setText("OK");
        btnDlgChangeSystemOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDlgChangeSystemOKActionPerformed(evt);
            }
        });
        dlgChangeSystem.getContentPane().add(btnDlgChangeSystemOK);
        btnDlgChangeSystemOK.setBounds(60, 270, 150, 23);

        btnDlgChangeSystemCancel.setText("Cancel");
        btnDlgChangeSystemCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDlgChangeSystemCancelActionPerformed(evt);
            }
        });
        dlgChangeSystem.getContentPane().add(btnDlgChangeSystemCancel);
        btnDlgChangeSystemCancel.setBounds(330, 270, 150, 23);

        jLabel27.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
        jLabel27.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel27.setText("to their default value");
        dlgChangeSystem.getContentPane().add(jLabel27);
        jLabel27.setBounds(10, 240, 470, 20);

        lblRecommended.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        lblRecommended.setText("(recommended for ancilliary standings only)");
        dlgChangeSystem.getContentPane().add(lblRecommended);
        lblRecommended.setBounds(220, 180, 250, 13);

        ckbResetParameters.setText("Keep current system but reset settings to their default values");
        ckbResetParameters.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ckbResetParametersActionPerformed(evt);
            }
        });
        dlgChangeSystem.getContentPane().add(ckbResetParameters);
        ckbResetParameters.setBounds(80, 50, 400, 23);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Tournament settings");
        setResizable(false);
        getContentPane().setLayout(null);

        btnQuit.setText("Close");
        btnQuit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnQuitActionPerformed(evt);
            }
        });
        getContentPane().add(btnQuit);
        btnQuit.setBounds(405, 480, 375, 30);

        pnlGen.setLayout(null);

        pnlCategories.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder(""), "Categories"));
        pnlCategories.setLayout(null);

        jLabel9.setText("Number of categories");
        pnlCategories.add(jLabel9);
        jLabel9.setBounds(10, 30, 140, 14);

        jLabel7.setText("Lower limits :");
        pnlCategories.add(jLabel7);
        jLabel7.setBounds(10, 100, 100, 14);

        btnAdjustCategoryLimits.setText("Adjust categories");
        btnAdjustCategoryLimits.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAdjustCategoryLimitsActionPerformed(evt);
            }
        });
        pnlCategories.add(btnAdjustCategoryLimits);
        btnAdjustCategoryLimits.setBounds(10, 60, 170, 30);

        txfNumberOfCategories.setText("1");
        txfNumberOfCategories.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txfNumberOfCategoriesFocusLost(evt);
            }
        });
        pnlCategories.add(txfNumberOfCategories);
        txfNumberOfCategories.setBounds(160, 30, 20, 20);

        pnlGen.add(pnlCategories);
        pnlCategories.setBounds(560, 40, 200, 300);

        pnlTournamentDetails.setBorder(javax.swing.BorderFactory.createTitledBorder("Tournament details"));
        pnlTournamentDetails.setLayout(null);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jLabel1.setText("Short name");
        pnlTournamentDetails.add(jLabel1);
        jLabel1.setBounds(10, 40, 100, 13);

        txfShortName.setToolTipText("default file mame and RMI name. Do not change it if clients are connected ");
        txfShortName.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txfShortNameFocusLost(evt);
            }
        });
        pnlTournamentDetails.add(txfShortName);
        txfShortName.setBounds(120, 40, 150, 20);

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jLabel2.setText("Full Name");
        pnlTournamentDetails.add(jLabel2);
        jLabel2.setBounds(10, 20, 100, 13);

        txfName.setText("Unnamed Tournament");
        txfName.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txfNameFocusLost(evt);
            }
        });
        pnlTournamentDetails.add(txfName);
        txfName.setBounds(120, 20, 150, 20);

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jLabel3.setText("Location");
        pnlTournamentDetails.add(jLabel3);
        jLabel3.setBounds(10, 60, 100, 13);

        txfLocation.setText("Unknown location");
        txfLocation.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txfLocationFocusLost(evt);
            }
        });
        pnlTournamentDetails.add(txfLocation);
        txfLocation.setBounds(120, 60, 150, 20);

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jLabel4.setText("Begin date");
        pnlTournamentDetails.add(jLabel4);
        jLabel4.setBounds(10, 120, 100, 13);

        txfBeginDate.setText("yyyy-mm-dd");
        txfBeginDate.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txfBeginDateFocusLost(evt);
            }
        });
        pnlTournamentDetails.add(txfBeginDate);
        txfBeginDate.setBounds(120, 120, 110, 20);

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jLabel5.setText("Number of rounds");
        pnlTournamentDetails.add(jLabel5);
        jLabel5.setBounds(10, 170, 120, 13);

        txfNumberOfRounds.setText("0");
        txfNumberOfRounds.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txfNumberOfRoundsFocusLost(evt);
            }
        });
        pnlTournamentDetails.add(txfNumberOfRounds);
        txfNumberOfRounds.setBounds(120, 170, 30, 20);

        jLabel8.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jLabel8.setText("End date");
        pnlTournamentDetails.add(jLabel8);
        jLabel8.setBounds(10, 140, 100, 13);

        txfEndDate.setText("yyyy-mm-dd");
        txfEndDate.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txfEndDateFocusLost(evt);
            }
        });
        pnlTournamentDetails.add(txfEndDate);
        txfEndDate.setBounds(120, 140, 110, 20);

        jLabel37.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jLabel37.setText("Director");
        pnlTournamentDetails.add(jLabel37);
        jLabel37.setBounds(10, 90, 100, 13);

        txfDirector.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txfDirectorFocusLost(evt);
            }
        });
        pnlTournamentDetails.add(txfDirector);
        txfDirector.setBounds(120, 90, 150, 20);

        pnlGen.add(pnlTournamentDetails);
        pnlTournamentDetails.setBounds(10, 40, 280, 200);

        lblSystemName.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lblSystemName.setText("System");
        pnlGen.add(lblSystemName);
        lblSystemName.setBounds(300, 20, 280, 20);

        pnlMcMahon.setBorder(javax.swing.BorderFactory.createTitledBorder("McMahon"));
        pnlMcMahon.setLayout(null);

        lblMMBar.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        lblMMBar.setText("McMahon Bar");
        pnlMcMahon.add(lblMMBar);
        lblMMBar.setBounds(10, 20, 140, 13);

        txfMMBar.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txfMMBarFocusLost(evt);
            }
        });
        pnlMcMahon.add(txfMMBar);
        txfMMBar.setBounds(150, 20, 30, 20);

        lblMMFloor.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        lblMMFloor.setText("McMahon Floor");
        pnlMcMahon.add(lblMMFloor);
        lblMMFloor.setBounds(10, 50, 140, 13);

        txfMMFloor.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txfMMFloorFocusLost(evt);
            }
        });
        pnlMcMahon.add(txfMMFloor);
        txfMMFloor.setBounds(150, 50, 30, 20);

        lblMMZero.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        lblMMZero.setText("McMahon Zero");
        pnlMcMahon.add(lblMMZero);
        lblMMZero.setBounds(10, 110, 140, 13);

        txfMMZero.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txfMMZeroFocusLost(evt);
            }
        });
        pnlMcMahon.add(txfMMZero);
        txfMMZero.setBounds(150, 110, 30, 20);

        pnlGen.add(pnlMcMahon);
        pnlMcMahon.setBounds(300, 90, 250, 150);

        pnlSpecialResults.setBorder(javax.swing.BorderFactory.createTitledBorder("Special Results"));
        pnlSpecialResults.setLayout(null);

        grpAbsentNBW.add(rdbAbsentNBW0);
        rdbAbsentNBW0.setText("0");
        rdbAbsentNBW0.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        rdbAbsentNBW0.setMargin(new java.awt.Insets(0, 0, 0, 0));
        rdbAbsentNBW0.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                rdbAbsentOrByeFocusLost(evt);
            }
        });
        pnlSpecialResults.add(rdbAbsentNBW0);
        rdbAbsentNBW0.setBounds(140, 20, 40, 15);

        grpAbsentNBW.add(rdbAbsentNBW1);
        rdbAbsentNBW1.setText("½");
        rdbAbsentNBW1.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        rdbAbsentNBW1.setMargin(new java.awt.Insets(0, 0, 0, 0));
        rdbAbsentNBW1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                rdbAbsentOrByeFocusLost(evt);
            }
        });
        pnlSpecialResults.add(rdbAbsentNBW1);
        rdbAbsentNBW1.setBounds(180, 20, 40, 15);

        grpAbsentNBW.add(rdbAbsentNBW2);
        rdbAbsentNBW2.setText("1");
        rdbAbsentNBW2.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        rdbAbsentNBW2.setMargin(new java.awt.Insets(0, 0, 0, 0));
        rdbAbsentNBW2.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                rdbAbsentOrByeFocusLost(evt);
            }
        });
        pnlSpecialResults.add(rdbAbsentNBW2);
        rdbAbsentNBW2.setBounds(220, 20, 40, 15);

        grpAbsentMMS.add(rdbAbsentMMS0);
        rdbAbsentMMS0.setText("0");
        rdbAbsentMMS0.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        rdbAbsentMMS0.setMargin(new java.awt.Insets(0, 0, 0, 0));
        rdbAbsentMMS0.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                rdbAbsentOrByeFocusLost(evt);
            }
        });
        pnlSpecialResults.add(rdbAbsentMMS0);
        rdbAbsentMMS0.setBounds(140, 40, 40, 15);

        grpAbsentMMS.add(rdbAbsentMMS1);
        rdbAbsentMMS1.setText("½");
        rdbAbsentMMS1.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        rdbAbsentMMS1.setMargin(new java.awt.Insets(0, 0, 0, 0));
        rdbAbsentMMS1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                rdbAbsentOrByeFocusLost(evt);
            }
        });
        pnlSpecialResults.add(rdbAbsentMMS1);
        rdbAbsentMMS1.setBounds(180, 40, 40, 15);

        grpAbsentMMS.add(rdbAbsentMMS2);
        rdbAbsentMMS2.setText("1");
        rdbAbsentMMS2.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        rdbAbsentMMS2.setMargin(new java.awt.Insets(0, 0, 0, 0));
        rdbAbsentMMS2.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                rdbAbsentOrByeFocusLost(evt);
            }
        });
        pnlSpecialResults.add(rdbAbsentMMS2);
        rdbAbsentMMS2.setBounds(220, 40, 40, 15);

        grpByeNBW.add(rdbByeNBW0);
        rdbByeNBW0.setText("0");
        rdbByeNBW0.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        rdbByeNBW0.setMargin(new java.awt.Insets(0, 0, 0, 0));
        rdbByeNBW0.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                rdbAbsentOrByeFocusLost(evt);
            }
        });
        pnlSpecialResults.add(rdbByeNBW0);
        rdbByeNBW0.setBounds(140, 60, 40, 15);

        grpByeNBW.add(rdbByeNBW1);
        rdbByeNBW1.setText("½");
        rdbByeNBW1.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        rdbByeNBW1.setMargin(new java.awt.Insets(0, 0, 0, 0));
        rdbByeNBW1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                rdbAbsentOrByeFocusLost(evt);
            }
        });
        pnlSpecialResults.add(rdbByeNBW1);
        rdbByeNBW1.setBounds(180, 60, 40, 15);

        grpByeNBW.add(rdbByeNBW2);
        rdbByeNBW2.setText("1");
        rdbByeNBW2.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        rdbByeNBW2.setMargin(new java.awt.Insets(0, 0, 0, 0));
        rdbByeNBW2.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                rdbAbsentOrByeFocusLost(evt);
            }
        });
        pnlSpecialResults.add(rdbByeNBW2);
        rdbByeNBW2.setBounds(220, 60, 40, 15);

        grpByeMMS.add(rdbByeMMS0);
        rdbByeMMS0.setText("0");
        rdbByeMMS0.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        rdbByeMMS0.setMargin(new java.awt.Insets(0, 0, 0, 0));
        rdbByeMMS0.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                rdbAbsentOrByeFocusLost(evt);
            }
        });
        pnlSpecialResults.add(rdbByeMMS0);
        rdbByeMMS0.setBounds(140, 80, 40, 15);

        grpByeMMS.add(rdbByeMMS1);
        rdbByeMMS1.setText("½");
        rdbByeMMS1.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        rdbByeMMS1.setMargin(new java.awt.Insets(0, 0, 0, 0));
        rdbByeMMS1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                rdbAbsentOrByeFocusLost(evt);
            }
        });
        pnlSpecialResults.add(rdbByeMMS1);
        rdbByeMMS1.setBounds(180, 80, 40, 15);

        grpByeMMS.add(rdbByeMMS2);
        rdbByeMMS2.setText("1");
        rdbByeMMS2.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        rdbByeMMS2.setMargin(new java.awt.Insets(0, 0, 0, 0));
        rdbByeMMS2.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                rdbAbsentOrByeFocusLost(evt);
            }
        });
        pnlSpecialResults.add(rdbByeMMS2);
        rdbByeMMS2.setBounds(220, 80, 40, 15);

        jLabel15.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jLabel15.setText("NBW for Absent player");
        pnlSpecialResults.add(jLabel15);
        jLabel15.setBounds(10, 20, 130, 13);

        jLabel16.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jLabel16.setText("MMS for Absent player");
        pnlSpecialResults.add(jLabel16);
        jLabel16.setBounds(10, 40, 130, 13);

        jLabel17.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jLabel17.setText("NBW for Bye player ");
        pnlSpecialResults.add(jLabel17);
        jLabel17.setBounds(10, 60, 130, 13);

        jLabel18.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jLabel18.setText("MMS for Bye player ");
        pnlSpecialResults.add(jLabel18);
        jLabel18.setBounds(10, 80, 130, 13);

        ckbRoundDown.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        ckbRoundDown.setSelected(true);
        ckbRoundDown.setText("Round down NBW and MMS scores");
        ckbRoundDown.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                ckbRoundDownFocusLost(evt);
            }
        });
        pnlSpecialResults.add(ckbRoundDown);
        ckbRoundDown.setBounds(10, 110, 260, 23);

        pnlGen.add(pnlSpecialResults);
        pnlSpecialResults.setBounds(10, 250, 280, 150);

        btnChangeSystem.setText("Change or Reset Tournament system");
        btnChangeSystem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChangeSystemActionPerformed(evt);
            }
        });
        pnlGen.add(btnChangeSystem);
        btnChangeSystem.setBounds(300, 50, 250, 30);

        btnHelpGeneral.setIcon(new javax.swing.ImageIcon(getClass().getResource("/info/vannier/gotha/gothalogo16.jpg"))); // NOI18N
        btnHelpGeneral.setText("help");
        btnHelpGeneral.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHelpGeneralActionPerformed(evt);
            }
        });
        pnlGen.add(btnHelpGeneral);
        btnHelpGeneral.setBounds(420, 400, 110, 30);

        tpnParameters.addTab("General", pnlGen);

        pnlHan.setLayout(null);

        lblHandicap.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lblHandicap.setText("No handicap");
        pnlHan.add(lblHandicap);
        lblHandicap.setBounds(10, 20, 300, 20);

        pnlHandicap.setBorder(javax.swing.BorderFactory.createTitledBorder("Handicap"));
        pnlHandicap.setLayout(null);

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jLabel6.setText("No handicap when both players' MMS above ");
        pnlHandicap.add(jLabel6);
        jLabel6.setBounds(10, 30, 220, 13);

        txfNoHdRankThreshold.setText("1D");
        txfNoHdRankThreshold.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txfNoHdRankThresholdFocusLost(evt);
            }
        });
        pnlHandicap.add(txfNoHdRankThreshold);
        txfNoHdRankThreshold.setBounds(230, 30, 40, 20);

        grpHdCorrection.add(rdbHdCorrection0);
        rdbHdCorrection0.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        rdbHdCorrection0.setText("handicap not corrected");
        rdbHdCorrection0.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        rdbHdCorrection0.setMargin(new java.awt.Insets(0, 0, 0, 0));
        rdbHdCorrection0.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdbHdCorrectionActionPerformed(evt);
            }
        });
        pnlHandicap.add(rdbHdCorrection0);
        rdbHdCorrection0.setBounds(20, 180, 180, 20);

        grpHdCorrection.add(rdbHdCorrection1);
        rdbHdCorrection1.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        rdbHdCorrection1.setText("handicap -1");
        rdbHdCorrection1.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        rdbHdCorrection1.setMargin(new java.awt.Insets(0, 0, 0, 0));
        rdbHdCorrection1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdbHdCorrectionActionPerformed(evt);
            }
        });
        pnlHandicap.add(rdbHdCorrection1);
        rdbHdCorrection1.setBounds(20, 200, 180, 20);

        grpHdCorrection.add(rdbHdCorrection2);
        rdbHdCorrection2.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        rdbHdCorrection2.setText("handicap -2");
        rdbHdCorrection2.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        rdbHdCorrection2.setMargin(new java.awt.Insets(0, 0, 0, 0));
        rdbHdCorrection2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdbHdCorrectionActionPerformed(evt);
            }
        });
        pnlHandicap.add(rdbHdCorrection2);
        rdbHdCorrection2.setBounds(20, 220, 180, 20);

        grpHdCorrection.add(rdbHdCorrectionPlus1);
        rdbHdCorrectionPlus1.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        rdbHdCorrectionPlus1.setText("handicap +1");
        rdbHdCorrectionPlus1.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        rdbHdCorrectionPlus1.setMargin(new java.awt.Insets(0, 0, 0, 0));
        rdbHdCorrectionPlus1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdbHdCorrectionActionPerformed(evt);
            }
        });
        pnlHandicap.add(rdbHdCorrectionPlus1);
        rdbHdCorrectionPlus1.setBounds(20, 270, 180, 20);

        jLabel10.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jLabel10.setText("Handicap ceiling : ");
        pnlHandicap.add(jLabel10);
        jLabel10.setBounds(10, 310, 210, 13);

        txfHdCeiling.setText("9");
        txfHdCeiling.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txfHdCeilingFocusLost(evt);
            }
        });
        pnlHandicap.add(txfHdCeiling);
        txfHdCeiling.setBounds(230, 310, 40, 20);

        jLabel29.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jLabel29.setText("Handicap based on :");
        pnlHandicap.add(jLabel29);
        jLabel29.setBounds(10, 70, 140, 13);

        grpHdBase.add(rdbHdBaseMMS);
        rdbHdBaseMMS.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        rdbHdBaseMMS.setText("McMahon score");
        rdbHdBaseMMS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdbHdBaseMMSActionPerformed(evt);
            }
        });
        pnlHandicap.add(rdbHdBaseMMS);
        rdbHdBaseMMS.setBounds(20, 90, 150, 20);

        grpHdBase.add(rdbHdBaseRank);
        rdbHdBaseRank.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        rdbHdBaseRank.setText("Rank");
        rdbHdBaseRank.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdbHdBaseRankActionPerformed(evt);
            }
        });
        pnlHandicap.add(rdbHdBaseRank);
        rdbHdBaseRank.setBounds(20, 110, 150, 20);

        jLabel30.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jLabel30.setText("Handicap correction");
        pnlHandicap.add(jLabel30);
        jLabel30.setBounds(10, 160, 160, 13);

        grpHdCorrection.add(rdbHdCorrection3);
        rdbHdCorrection3.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        rdbHdCorrection3.setText("handicap -3");
        rdbHdCorrection3.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        rdbHdCorrection3.setMargin(new java.awt.Insets(0, 0, 0, 0));
        rdbHdCorrection3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdbHdCorrectionActionPerformed(evt);
            }
        });
        pnlHandicap.add(rdbHdCorrection3);
        rdbHdCorrection3.setBounds(20, 240, 180, 20);

        pnlHan.add(pnlHandicap);
        pnlHandicap.setBounds(10, 50, 300, 370);

        btnHelpHandicap.setIcon(new javax.swing.ImageIcon(getClass().getResource("/info/vannier/gotha/gothalogo16.jpg"))); // NOI18N
        btnHelpHandicap.setText("help");
        btnHelpHandicap.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHelpHandicapActionPerformed(evt);
            }
        });
        pnlHan.add(btnHelpHandicap);
        btnHelpHandicap.setBounds(420, 400, 110, 30);

        tpnParameters.addTab("Handicap", pnlHan);

        pnlPla.setLayout(null);

        jLabel11.setText("Criterion 1");
        pnlPla.add(jLabel11);
        jLabel11.setBounds(20, 20, 80, 20);

        cbxCrit1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cbxCrit1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                cbxCritFocusLost(evt);
            }
        });
        pnlPla.add(cbxCrit1);
        cbxCrit1.setBounds(20, 40, 80, 20);

        jLabel12.setText("Criterion 2");
        pnlPla.add(jLabel12);
        jLabel12.setBounds(120, 20, 80, 20);

        cbxCrit2.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cbxCrit2.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                cbxCritFocusLost(evt);
            }
        });
        pnlPla.add(cbxCrit2);
        cbxCrit2.setBounds(120, 40, 80, 20);

        jLabel13.setText("Criterion 3");
        pnlPla.add(jLabel13);
        jLabel13.setBounds(220, 20, 80, 20);

        cbxCrit3.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cbxCrit3.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                cbxCritFocusLost(evt);
            }
        });
        pnlPla.add(cbxCrit3);
        cbxCrit3.setBounds(220, 40, 80, 20);

        jLabel14.setText("Criterion 4");
        pnlPla.add(jLabel14);
        jLabel14.setBounds(320, 20, 80, 20);

        cbxCrit4.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cbxCrit4.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                cbxCritFocusLost(evt);
            }
        });
        pnlPla.add(cbxCrit4);
        cbxCrit4.setBounds(320, 40, 80, 20);

        pnlGlossary.setBorder(javax.swing.BorderFactory.createTitledBorder("Criteria glossary"));
        pnlGlossary.setLayout(null);

        tblGlossary.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Name", "Short name", "Description"
            }
        ));
        tblGlossary.setEnabled(false);
        scpGlossary.setViewportView(tblGlossary);

        pnlGlossary.add(scpGlossary);
        scpGlossary.setBounds(10, 20, 380, 310);

        pnlPla.add(pnlGlossary);
        pnlGlossary.setBounds(10, 90, 400, 340);

        jScrollPane1.setBorder(null);

        txaWarning.setColumns(20);
        txaWarning.setForeground(new java.awt.Color(255, 0, 51));
        txaWarning.setLineWrap(true);
        txaWarning.setRows(5);
        txaWarning.setOpaque(false);
        jScrollPane1.setViewportView(txaWarning);

        pnlPla.add(jScrollPane1);
        jScrollPane1.setBounds(410, 100, 350, 110);

        btnHelpPlacement.setIcon(new javax.swing.ImageIcon(getClass().getResource("/info/vannier/gotha/gothalogo16.jpg"))); // NOI18N
        btnHelpPlacement.setText("help");
        btnHelpPlacement.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHelpPlacementActionPerformed(evt);
            }
        });
        pnlPla.add(btnHelpPlacement);
        btnHelpPlacement.setBounds(420, 400, 110, 30);

        tpnParameters.addTab("Placement", pnlPla);

        pnlPai.setLayout(null);

        pnlBase.setBorder(javax.swing.BorderFactory.createTitledBorder("Base Criteria"));
        pnlBase.setLayout(null);

        ckbAvoidPairingSamePair.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        ckbAvoidPairingSamePair.setSelected(true);
        ckbAvoidPairingSamePair.setText("Avoid pairing same pair twice");
        ckbAvoidPairingSamePair.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        ckbAvoidPairingSamePair.setEnabled(false);
        ckbAvoidPairingSamePair.setMargin(new java.awt.Insets(0, 0, 0, 0));
        pnlBase.add(ckbAvoidPairingSamePair);
        ckbAvoidPairingSamePair.setBounds(10, 20, 280, 13);

        ckbBalanceWB.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        ckbBalanceWB.setSelected(true);
        ckbBalanceWB.setText("Balance White and Black");
        ckbBalanceWB.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        ckbBalanceWB.setMargin(new java.awt.Insets(0, 0, 0, 0));
        ckbBalanceWB.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                ckbBalanceWBFocusLost(evt);
            }
        });
        pnlBase.add(ckbBalanceWB);
        ckbBalanceWB.setBounds(10, 110, 170, 13);

        grpRandom.add(rdbNoRandom);
        rdbNoRandom.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        rdbNoRandom.setSelected(true);
        rdbNoRandom.setText("No random");
        rdbNoRandom.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        rdbNoRandom.setMargin(new java.awt.Insets(0, 0, 0, 0));
        rdbNoRandom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdbNoRandomActionPerformed(evt);
            }
        });
        rdbNoRandom.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                rdbRandomFocusLost(evt);
            }
        });
        pnlBase.add(rdbNoRandom);
        rdbNoRandom.setBounds(20, 50, 130, 13);

        grpRandom.add(rdbAcceptRandom);
        rdbAcceptRandom.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        rdbAcceptRandom.setText("Accept random");
        rdbAcceptRandom.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        rdbAcceptRandom.setMargin(new java.awt.Insets(0, 0, 0, 0));
        rdbAcceptRandom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdbAcceptRandomActionPerformed(evt);
            }
        });
        rdbAcceptRandom.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                rdbRandomFocusLost(evt);
            }
        });
        pnlBase.add(rdbAcceptRandom);
        rdbAcceptRandom.setBounds(20, 70, 130, 20);

        ckbDeterministic.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        ckbDeterministic.setText("deterministic random");
        ckbDeterministic.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        ckbDeterministic.setMargin(new java.awt.Insets(0, 0, 0, 0));
        ckbDeterministic.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                ckbDeterministicFocusLost(evt);
            }
        });
        pnlBase.add(ckbDeterministic);
        ckbDeterministic.setBounds(160, 70, 150, 13);

        pnlPai.add(pnlBase);
        pnlBase.setBounds(420, 10, 340, 140);

        pnlMain.setBorder(javax.swing.BorderFactory.createTitledBorder("Main criteria"));
        pnlMain.setLayout(null);

        ckbAvoidMixingCategories.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        ckbAvoidMixingCategories.setSelected(true);
        ckbAvoidMixingCategories.setText("Avoid mixing categories");
        ckbAvoidMixingCategories.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        ckbAvoidMixingCategories.setEnabled(false);
        ckbAvoidMixingCategories.setMargin(new java.awt.Insets(0, 0, 0, 0));
        pnlMain.add(ckbAvoidMixingCategories);
        ckbAvoidMixingCategories.setBounds(10, 20, 290, 13);

        ckbMinimizeScoreDifference.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        ckbMinimizeScoreDifference.setSelected(true);
        ckbMinimizeScoreDifference.setText("Minimize score difference");
        ckbMinimizeScoreDifference.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        ckbMinimizeScoreDifference.setEnabled(false);
        ckbMinimizeScoreDifference.setMargin(new java.awt.Insets(0, 0, 0, 0));
        pnlMain.add(ckbMinimizeScoreDifference);
        ckbMinimizeScoreDifference.setBounds(10, 40, 290, 13);

        pnlDUDD.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "When pairing players from different groups is necessary :", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 10))); // NOI18N
        pnlDUDD.setLayout(null);

        pnlDUDDUG.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "the player in the upper group", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 10))); // NOI18N
        pnlDUDDUG.setLayout(null);

        grpDUDDUG.add(rdbDUDDUGTop);
        rdbDUDDUGTop.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        rdbDUDDUGTop.setText("in the top of the group");
        rdbDUDDUGTop.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        rdbDUDDUGTop.setMargin(new java.awt.Insets(0, 0, 0, 0));
        rdbDUDDUGTop.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                rdbDUDDFocusLost(evt);
            }
        });
        pnlDUDDUG.add(rdbDUDDUGTop);
        rdbDUDDUGTop.setBounds(10, 20, 170, 13);

        grpDUDDUG.add(rdbDUDDUGMid);
        rdbDUDDUGMid.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        rdbDUDDUGMid.setSelected(true);
        rdbDUDDUGMid.setText("in the middle of the group");
        rdbDUDDUGMid.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        rdbDUDDUGMid.setMargin(new java.awt.Insets(0, 0, 0, 0));
        rdbDUDDUGMid.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                rdbDUDDFocusLost(evt);
            }
        });
        pnlDUDDUG.add(rdbDUDDUGMid);
        rdbDUDDUGMid.setBounds(10, 40, 170, 13);

        grpDUDDUG.add(rdbDUDDUGBot);
        rdbDUDDUGBot.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        rdbDUDDUGBot.setText("in the bottom of the group");
        rdbDUDDUGBot.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        rdbDUDDUGBot.setMargin(new java.awt.Insets(0, 0, 0, 0));
        rdbDUDDUGBot.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                rdbDUDDFocusLost(evt);
            }
        });
        pnlDUDDUG.add(rdbDUDDUGBot);
        rdbDUDDUGBot.setBounds(10, 60, 170, 13);

        pnlDUDD.add(pnlDUDDUG);
        pnlDUDDUG.setBounds(10, 90, 190, 90);

        pnlDUDDLG.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "the player in the lower group", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 10))); // NOI18N
        pnlDUDDLG.setLayout(null);

        grpDUDDLG.add(rdbDUDDLGTop);
        rdbDUDDLGTop.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        rdbDUDDLGTop.setText("in the top of the group");
        rdbDUDDLGTop.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        rdbDUDDLGTop.setMargin(new java.awt.Insets(0, 0, 0, 0));
        rdbDUDDLGTop.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                rdbDUDDFocusLost(evt);
            }
        });
        pnlDUDDLG.add(rdbDUDDLGTop);
        rdbDUDDLGTop.setBounds(10, 20, 170, 13);

        grpDUDDLG.add(rdbDUDDLGMid);
        rdbDUDDLGMid.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        rdbDUDDLGMid.setSelected(true);
        rdbDUDDLGMid.setText("in the middle of the group");
        rdbDUDDLGMid.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        rdbDUDDLGMid.setMargin(new java.awt.Insets(0, 0, 0, 0));
        rdbDUDDLGMid.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                rdbDUDDFocusLost(evt);
            }
        });
        pnlDUDDLG.add(rdbDUDDLGMid);
        rdbDUDDLGMid.setBounds(10, 40, 170, 13);

        grpDUDDLG.add(rdbDUDDLGBot);
        rdbDUDDLGBot.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        rdbDUDDLGBot.setText("in the bottom of the group");
        rdbDUDDLGBot.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        rdbDUDDLGBot.setMargin(new java.awt.Insets(0, 0, 0, 0));
        rdbDUDDLGBot.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                rdbDUDDFocusLost(evt);
            }
        });
        pnlDUDDLG.add(rdbDUDDLGBot);
        rdbDUDDLGBot.setBounds(10, 60, 170, 13);

        pnlDUDD.add(pnlDUDDLG);
        pnlDUDDLG.setBounds(200, 90, 190, 90);

        ckbCompensate.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        ckbCompensate.setSelected(true);
        ckbCompensate.setText("Compensate a previous Draw up/down by a Draw down/up");
        ckbCompensate.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                ckbCompensateFocusLost(evt);
            }
        });
        pnlDUDD.add(ckbCompensate);
        ckbCompensate.setBounds(10, 40, 350, 21);

        ckbAvoid2DUDD.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        ckbAvoid2DUDD.setSelected(true);
        ckbAvoid2DUDD.setText("Avoid drawing up/down a player twice in the same sense");
        ckbAvoid2DUDD.setEnabled(false);
        pnlDUDD.add(ckbAvoid2DUDD);
        ckbAvoid2DUDD.setBounds(10, 20, 350, 21);

        jLabel40.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jLabel40.setText("Then, preferably choose :");
        pnlDUDD.add(jLabel40);
        jLabel40.setBounds(20, 70, 340, 13);

        pnlMain.add(pnlDUDD);
        pnlDUDD.setBounds(10, 230, 400, 180);

        pnlSeeding.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Inside a group, use a seeding system", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 10))); // NOI18N
        pnlSeeding.setLayout(null);

        txfLastRoundForSeedSystem1.setText("2");
        txfLastRoundForSeedSystem1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txfLastRoundForSeedSystem1FocusLost(evt);
            }
        });
        pnlSeeding.add(txfLastRoundForSeedSystem1);
        txfLastRoundForSeedSystem1.setBounds(190, 20, 30, 20);

        jLabel20.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jLabel20.setText("Former rounds up to round :");
        pnlSeeding.add(jLabel20);
        jLabel20.setBounds(10, 20, 180, 13);

        pnlFormer.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Former rounds", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 10))); // NOI18N
        pnlFormer.setLayout(null);

        ckbAddSortOnRating.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        ckbAddSortOnRating.setSelected(true);
        ckbAddSortOnRating.setText("Add a sorting on rating ");
        ckbAddSortOnRating.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        ckbAddSortOnRating.setMargin(new java.awt.Insets(0, 0, 0, 0));
        ckbAddSortOnRating.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                ckbAddSortOnRatingFocusLost(evt);
            }
        });
        pnlFormer.add(ckbAddSortOnRating);
        ckbAddSortOnRating.setBounds(10, 20, 200, 13);

        grpSeedingFormer.add(rdbFormerSplitAndRandom);
        rdbFormerSplitAndRandom.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        rdbFormerSplitAndRandom.setSelected(true);
        rdbFormerSplitAndRandom.setText("Split and Random");
        rdbFormerSplitAndRandom.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        rdbFormerSplitAndRandom.setMargin(new java.awt.Insets(0, 0, 0, 0));
        rdbFormerSplitAndRandom.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                rdbSeedSystemFocusLost(evt);
            }
        });
        pnlFormer.add(rdbFormerSplitAndRandom);
        rdbFormerSplitAndRandom.setBounds(10, 40, 150, 13);

        grpSeedingFormer.add(rdbFormerSplitAndFold);
        rdbFormerSplitAndFold.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        rdbFormerSplitAndFold.setText("Split and Fold");
        rdbFormerSplitAndFold.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        rdbFormerSplitAndFold.setMargin(new java.awt.Insets(0, 0, 0, 0));
        rdbFormerSplitAndFold.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                rdbSeedSystemFocusLost(evt);
            }
        });
        pnlFormer.add(rdbFormerSplitAndFold);
        rdbFormerSplitAndFold.setBounds(10, 60, 150, 13);

        grpSeedingFormer.add(rdbFormerSplitAndSlip);
        rdbFormerSplitAndSlip.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        rdbFormerSplitAndSlip.setText("Split and Slip");
        rdbFormerSplitAndSlip.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        rdbFormerSplitAndSlip.setMargin(new java.awt.Insets(0, 0, 0, 0));
        rdbFormerSplitAndSlip.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                rdbSeedSystemFocusLost(evt);
            }
        });
        pnlFormer.add(rdbFormerSplitAndSlip);
        rdbFormerSplitAndSlip.setBounds(10, 80, 150, 13);

        pnlSeeding.add(pnlFormer);
        pnlFormer.setBounds(10, 40, 220, 110);

        pnlLatter.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Latter rounds", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 10))); // NOI18N
        pnlLatter.setLayout(null);

        grpSeedingLatter.add(rdbLatterSplitAndRandom);
        rdbLatterSplitAndRandom.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        rdbLatterSplitAndRandom.setText("Split and Random");
        rdbLatterSplitAndRandom.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        rdbLatterSplitAndRandom.setMargin(new java.awt.Insets(0, 0, 0, 0));
        rdbLatterSplitAndRandom.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                rdbSeedSystemFocusLost(evt);
            }
        });
        pnlLatter.add(rdbLatterSplitAndRandom);
        rdbLatterSplitAndRandom.setBounds(10, 40, 140, 13);

        grpSeedingLatter.add(rdbLatterSplitAndFold);
        rdbLatterSplitAndFold.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        rdbLatterSplitAndFold.setSelected(true);
        rdbLatterSplitAndFold.setText("Split and Fold");
        rdbLatterSplitAndFold.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        rdbLatterSplitAndFold.setMargin(new java.awt.Insets(0, 0, 0, 0));
        rdbLatterSplitAndFold.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                rdbSeedSystemFocusLost(evt);
            }
        });
        pnlLatter.add(rdbLatterSplitAndFold);
        rdbLatterSplitAndFold.setBounds(10, 60, 140, 13);

        grpSeedingLatter.add(rdbLatterSplitAndSlip);
        rdbLatterSplitAndSlip.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        rdbLatterSplitAndSlip.setText("Split and Slip");
        rdbLatterSplitAndSlip.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        rdbLatterSplitAndSlip.setMargin(new java.awt.Insets(0, 0, 0, 0));
        rdbLatterSplitAndSlip.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                rdbSeedSystemFocusLost(evt);
            }
        });
        pnlLatter.add(rdbLatterSplitAndSlip);
        rdbLatterSplitAndSlip.setBounds(10, 80, 140, 13);

        pnlSeeding.add(pnlLatter);
        pnlLatter.setBounds(230, 40, 160, 110);

        pnlMain.add(pnlSeeding);
        pnlSeeding.setBounds(10, 60, 400, 160);

        pnlPai.add(pnlMain);
        pnlMain.setBounds(0, 10, 420, 430);

        pnlSecondary.setBorder(javax.swing.BorderFactory.createTitledBorder("Secondary criteria"));
        pnlSecondary.setLayout(null);

        jLabel21.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
        jLabel21.setText("Do not apply secondary criteria :");
        pnlSecondary.add(jLabel21);
        jLabel21.setBounds(10, 30, 270, 14);

        jLabel22.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
        jLabel22.setText("for players with a MMS equal or stronger than :");
        pnlSecondary.add(jLabel22);
        jLabel22.setBounds(10, 50, 280, 14);

        txfSeRankThreshold.setText("3D");
        txfSeRankThreshold.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txfSecCritFocusLost(evt);
            }
        });
        pnlSecondary.add(txfSeRankThreshold);
        txfSeRankThreshold.setBounds(290, 50, 30, 20);

        ckbSeNbWinsThresholdActive.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
        ckbSeNbWinsThresholdActive.setText("for players with at least nbRounds/2 wins");
        ckbSeNbWinsThresholdActive.setBorder(null);
        ckbSeNbWinsThresholdActive.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                ckbSecCritFocusLost(evt);
            }
        });
        pnlSecondary.add(ckbSeNbWinsThresholdActive);
        ckbSeNbWinsThresholdActive.setBounds(10, 70, 270, 20);

        jLabel23.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jLabel23.setText("Avoid intra-country pairing.");
        pnlSecondary.add(jLabel23);
        jLabel23.setBounds(10, 130, 270, 15);

        txfSeCountry.setText("1");
        txfSeCountry.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txfSecCritFocusLost(evt);
            }
        });
        pnlSecondary.add(txfSeCountry);
        txfSeCountry.setBounds(270, 150, 20, 20);

        jLabel24.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jLabel24.setText("Avoid intra-club pairing.");
        pnlSecondary.add(jLabel24);
        jLabel24.setBounds(10, 170, 270, 15);

        txfSeClub.setText("3");
        txfSeClub.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txfSecCritFocusLost(evt);
            }
        });
        pnlSecondary.add(txfSeClub);
        txfSeClub.setBounds(270, 190, 20, 20);

        ckbSeMinimizeHandicap.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        ckbSeMinimizeHandicap.setText("Minimize handicaps");
        ckbSeMinimizeHandicap.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        ckbSeMinimizeHandicap.setMargin(new java.awt.Insets(0, 0, 0, 0));
        ckbSeMinimizeHandicap.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                ckbSecCritFocusLost(evt);
            }
        });
        pnlSecondary.add(ckbSeMinimizeHandicap);
        ckbSeMinimizeHandicap.setBounds(10, 220, 170, 13);

        jLabel25.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jLabel25.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel25.setText("Prefer a group gap of :");
        pnlSecondary.add(jLabel25);
        jLabel25.setBounds(10, 190, 250, 13);

        jLabel26.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jLabel26.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel26.setText("Prefer a group gap of :");
        pnlSecondary.add(jLabel26);
        jLabel26.setBounds(10, 150, 250, 15);

        ckbSeBarThresholdActive.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
        ckbSeBarThresholdActive.setSelected(true);
        ckbSeBarThresholdActive.setText("for players above McMahon bar");
        ckbSeBarThresholdActive.setBorder(null);
        ckbSeBarThresholdActive.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                ckbSeBarThresholdActiveFocusLost(evt);
            }
        });
        pnlSecondary.add(ckbSeBarThresholdActive);
        ckbSeBarThresholdActive.setBounds(10, 90, 270, 20);

        pnlPai.add(pnlSecondary);
        pnlSecondary.setBounds(420, 150, 340, 240);

        btnHelpPairing.setIcon(new javax.swing.ImageIcon(getClass().getResource("/info/vannier/gotha/gothalogo16.jpg"))); // NOI18N
        btnHelpPairing.setText("help");
        btnHelpPairing.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHelpPairingActionPerformed(evt);
            }
        });
        pnlPai.add(btnHelpPairing);
        btnHelpPairing.setBounds(420, 400, 110, 30);

        tpnParameters.addTab("Pairing", pnlPai);

        pnlTPL.setLayout(null);

        jLabel31.setText("Criterion 1");
        pnlTPL.add(jLabel31);
        jLabel31.setBounds(20, 20, 80, 20);

        cbxTeamCrit1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cbxTeamCrit1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                cbxTeamCritFocusLost(evt);
            }
        });
        pnlTPL.add(cbxTeamCrit1);
        cbxTeamCrit1.setBounds(20, 40, 80, 20);

        jLabel32.setText("Criterion 2");
        pnlTPL.add(jLabel32);
        jLabel32.setBounds(120, 20, 80, 20);

        cbxTeamCrit2.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cbxTeamCrit2.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                cbxTeamCritFocusLost(evt);
            }
        });
        pnlTPL.add(cbxTeamCrit2);
        cbxTeamCrit2.setBounds(120, 40, 80, 20);

        jLabel33.setText("Criterion 3");
        pnlTPL.add(jLabel33);
        jLabel33.setBounds(220, 20, 80, 20);

        cbxTeamCrit3.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cbxTeamCrit3.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                cbxTeamCritFocusLost(evt);
            }
        });
        pnlTPL.add(cbxTeamCrit3);
        cbxTeamCrit3.setBounds(220, 40, 80, 20);

        jLabel34.setText("Criterion 4");
        pnlTPL.add(jLabel34);
        jLabel34.setBounds(320, 20, 80, 20);

        cbxTeamCrit4.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cbxTeamCrit4.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                cbxTeamCritFocusLost(evt);
            }
        });
        pnlTPL.add(cbxTeamCrit4);
        cbxTeamCrit4.setBounds(320, 40, 80, 20);

        jLabel35.setText("Criterion 5");
        pnlTPL.add(jLabel35);
        jLabel35.setBounds(430, 20, 80, 20);

        cbxTeamCrit5.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cbxTeamCrit5.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                cbxTeamCritFocusLost(evt);
            }
        });
        pnlTPL.add(cbxTeamCrit5);
        cbxTeamCrit5.setBounds(430, 40, 80, 20);

        jLabel36.setText("Criterion 6");
        pnlTPL.add(jLabel36);
        jLabel36.setBounds(530, 20, 80, 20);

        cbxTeamCrit6.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cbxTeamCrit6.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                cbxTeamCritFocusLost(evt);
            }
        });
        pnlTPL.add(cbxTeamCrit6);
        cbxTeamCrit6.setBounds(530, 40, 80, 20);

        pnlTeamGlossary.setBorder(javax.swing.BorderFactory.createTitledBorder("Criteria glossary"));
        pnlTeamGlossary.setLayout(null);

        tblTeamGlossary.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Name", "Short name", "Description"
            }
        ));
        tblTeamGlossary.setEnabled(false);
        scpTeamGlossary.setViewportView(tblTeamGlossary);

        pnlTeamGlossary.add(scpTeamGlossary);
        scpTeamGlossary.setBounds(10, 20, 380, 310);

        pnlTPL.add(pnlTeamGlossary);
        pnlTeamGlossary.setBounds(10, 90, 400, 340);

        scpTeamWarning.setBorder(null);

        txaTeamWarning.setColumns(20);
        txaTeamWarning.setForeground(new java.awt.Color(255, 0, 51));
        txaTeamWarning.setLineWrap(true);
        txaTeamWarning.setRows(5);
        txaTeamWarning.setOpaque(false);
        scpTeamWarning.setViewportView(txaTeamWarning);

        pnlTPL.add(scpTeamWarning);
        scpTeamWarning.setBounds(410, 100, 350, 110);

        btnHelpTeamPlacement.setIcon(new javax.swing.ImageIcon(getClass().getResource("/info/vannier/gotha/gothalogo16.jpg"))); // NOI18N
        btnHelpTeamPlacement.setText("help");
        btnHelpTeamPlacement.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHelpTeamPlacementActionPerformed(evt);
            }
        });
        pnlTPL.add(btnHelpTeamPlacement);
        btnHelpTeamPlacement.setBounds(420, 400, 110, 30);

        tpnParameters.addTab("Team placement", pnlTPL);

        getContentPane().add(tpnParameters);
        tpnParameters.setBounds(3, 0, 790, 470);

        btnPrint.setText("Print ...");
        btnPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPrintActionPerformed(evt);
            }
        });
        getContentPane().add(btnPrint);
        btnPrint.setBounds(10, 480, 375, 30);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnDlgChangeSystemCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDlgChangeSystemCancelActionPerformed
        dlgChangeSystem.dispose();
    }//GEN-LAST:event_btnDlgChangeSystemCancelActionPerformed

    private void btnDlgChangeSystemOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDlgChangeSystemOKActionPerformed
        int system = TournamentParameterSet.TYPE_MCMAHON;
        if (this.rdbMcMahon.isSelected()) system = TournamentParameterSet.TYPE_MCMAHON;
        if (this.rdbSwiss.isSelected()) system = TournamentParameterSet.TYPE_SWISS;
        if (this.rdbSwissCat.isSelected()) system = TournamentParameterSet.TYPE_SWISSCAT;
        
        TournamentParameterSet tps;
        try {
            tps = tournament.getTournamentParameterSet();
        } catch (RemoteException ex) {
            Logger.getLogger(JFrTournamentOptions.class.getName()).log(Level.SEVERE, null, ex);
            return;
        }
        GeneralParameterSet gps = tps.getGeneralParameterSet();
        HandicapParameterSet hps = tps.getHandicapParameterSet();
        PlacementParameterSet pps = tps.getPlacementParameterSet();
        PairingParameterSet paiPS = tps.getPairingParameterSet();
        DPParameterSet dpps = tps.getDPParameterSet();
        switch (system){
            case TournamentParameterSet.TYPE_MCMAHON :
                gps.initForMM();
                hps.initForMM();
                pps.initForMM();
                paiPS.initForMM();
                dpps.initForMM();              
                break;
            case TournamentParameterSet.TYPE_SWISS:
                gps.initForSwiss();
                hps.initForSwiss();
                pps.initForSwiss();
                paiPS.initForSwiss();
                dpps.initForSwiss();
                break;
            case TournamentParameterSet.TYPE_SWISSCAT :
                gps.initForSwissCat();
                hps.initForSwissCat();
                pps.initForSwissCat();
                paiPS.initForSwissCat();
                dpps.initForSwissCat();
                break;
            default :
                gps.initForMM();
                hps.initForMM();
                pps.initForMM();
                paiPS.initForMM();
        }
        
        try {
            tournament.setTournamentParameterSet(tps);
            this.tournamentChanged();
        } catch (RemoteException ex) {
            Logger.getLogger(JFrTournamentOptions.class.getName()).log(Level.SEVERE, null, ex);
        }              
        dlgChangeSystem.dispose();
    }//GEN-LAST:event_btnDlgChangeSystemOKActionPerformed

    private void btnChangeSystemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChangeSystemActionPerformed
        int w = JFrGotha.SMALL_FRAME_WIDTH;
        int h = JFrGotha.SMALL_FRAME_HEIGHT;
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        dlgChangeSystem.setBounds((dim.width - w)/2, (dim.height -h)/2, w, h);
        dlgChangeSystem.setTitle("Change tournament system");
        dlgChangeSystem.setIconImage(Gotha.getIconImage());
        
        this.ckbResetParameters.setSelected(false);

        this.lblNewSystem.setEnabled(true);
        this.rdbMcMahon.setEnabled(true);
        this.rdbSwiss.setEnabled(true);
        this.rdbSwissCat.setEnabled(true);
        this.lblRecommended.setEnabled(true);

        int tournamentType = TournamentParameterSet.TYPE_UNDEFINED;
        try {
            tournamentType = tournament.tournamentType();
        } catch (RemoteException ex) {
            Logger.getLogger(JFrTournamentOptions.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (tournamentType == TournamentParameterSet.TYPE_MCMAHON) rdbMcMahon.setSelected(true);
        if (tournamentType == TournamentParameterSet.TYPE_SWISS) rdbSwiss.setSelected(true);
        if (tournamentType == TournamentParameterSet.TYPE_SWISSCAT) rdbSwissCat.setSelected(true);
         
        dlgChangeSystem.setVisible(true);

    }//GEN-LAST:event_btnChangeSystemActionPerformed

    private void btnPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPrintActionPerformed
//        DPParameterSet dpps = null;
//        try {
//            dpps = tournament.getTournamentParameterSet().getDPParameterSet();
//        } catch (RemoteException ex) {
//            Logger.getLogger(JFrGamesPair.class.getName()).log(Level.SEVERE, null, ex);
//        }
//        TournamentPrinting tpr = new TournamentPrinting(tournament, dpps);
//        
//        tpr.setRoundNumber(-1);
//        tpr.makePrinting(TournamentPrinting.TYPE_TOURNAMENT_PARAMETERS, TournamentPrinting.SUBTYPE_DEFAULT, true);
        TournamentPrinting.printTournamentParameters(tournament);
    }//GEN-LAST:event_btnPrintActionPerformed

    private void rdbAcceptRandomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdbAcceptRandomActionPerformed
        this.randomControlsChange();
    }//GEN-LAST:event_rdbAcceptRandomActionPerformed

    private void rdbNoRandomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdbNoRandomActionPerformed
        this.randomControlsChange();
    }//GEN-LAST:event_rdbNoRandomActionPerformed

    private void ckbSecCritFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_ckbSecCritFocusLost
        secCritControlsFocusLost();
    }//GEN-LAST:event_ckbSecCritFocusLost

    private void txfSecCritFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txfSecCritFocusLost
        secCritControlsFocusLost();
    }//GEN-LAST:event_txfSecCritFocusLost

    private void secCritControlsFocusLost(){
        TournamentParameterSet tps;
        PairingParameterSet paiPS;
        try {
            tps = tournament.getTournamentParameterSet();
            paiPS = tps.getPairingParameterSet();
        } catch (RemoteException ex) {
            Logger.getLogger(JFrTournamentOptions.class.getName()).log(Level.SEVERE, null, ex);
            return;
        }       
        
        boolean bSomethingHasChanged = false;

        
        int oldRankThreshold = paiPS.getPaiSeRankThreshold();
        int newRankThreshold = Player.convertKDPToInt(this.txfSeRankThreshold.getText());
        if (newRankThreshold != oldRankThreshold){
            paiPS.setPaiSeRankThreshold(newRankThreshold);
            bSomethingHasChanged = true;
        }
        
        boolean oldBarThresholdActive = paiPS.isPaiSeBarThresholdActive();
        boolean newBarThresholdActive = this.ckbSeBarThresholdActive.isSelected();
        if (newBarThresholdActive != oldBarThresholdActive){
            paiPS.setPaiSeBarThresholdActive(newBarThresholdActive);
            bSomethingHasChanged = true;            
        }
        boolean oldNbWinsThresholdActive = paiPS.isPaiSeNbWinsThresholdActive();
        boolean newNbWinsThresholdActive = this.ckbSeNbWinsThresholdActive.isSelected();
         if (newNbWinsThresholdActive != oldNbWinsThresholdActive){
            paiPS.setPaiSeNbWinsThresholdActive(newNbWinsThresholdActive);
            bSomethingHasChanged = true;            
        }
        
        int oldPreferMMSDiffRatherThanSameCountry = paiPS.getPaiSePreferMMSDiffRatherThanSameCountry();
        int newPreferMMSDiffRatherThanSameCountry = new Integer(this.txfSeCountry.getText()).intValue();
        if (newPreferMMSDiffRatherThanSameCountry != oldPreferMMSDiffRatherThanSameCountry){
            paiPS.setPaiSePreferMMSDiffRatherThanSameCountry(newPreferMMSDiffRatherThanSameCountry);
            bSomethingHasChanged = true;            
        }
        int oldPreferMMSDiffRatherThanSameClub = paiPS.getPaiSePreferMMSDiffRatherThanSameClub();
        int newPreferMMSDiffRatherThanSameClub = new Integer(this.txfSeClub.getText()).intValue();
        if (newPreferMMSDiffRatherThanSameClub != oldPreferMMSDiffRatherThanSameClub){
            paiPS.setPaiSePreferMMSDiffRatherThanSameClub(newPreferMMSDiffRatherThanSameClub);
            bSomethingHasChanged = true; 
        }
        long oldMinimizeHandicap = paiPS.getPaiSeMinimizeHandicap();
        long newMinimizeHandicap = this.ckbSeMinimizeHandicap.isSelected() ? paiPS.getPaiSeDefSecCrit() : 0;
        if (newMinimizeHandicap != oldMinimizeHandicap){
            paiPS.setPaiSeMinimizeHandicap(newMinimizeHandicap);
            bSomethingHasChanged = true;
        }
        
        if (bSomethingHasChanged){
            try {
                tournament.setTournamentParameterSet(tps);
                this.tournamentChanged();
            } catch (RemoteException ex) {
                Logger.getLogger(JFrTournamentOptions.class.getName()).log(Level.SEVERE, null, ex);
            }
        }    
    }
    
    private void ckbBalanceWBFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_ckbBalanceWBFocusLost
        TournamentParameterSet tps;
        PairingParameterSet paiPS;
        try {
            tps = tournament.getTournamentParameterSet();
            paiPS = tps.getPairingParameterSet();
        } catch (RemoteException ex) {
            Logger.getLogger(JFrTournamentOptions.class.getName()).log(Level.SEVERE, null, ex);
            return;
        }        
        
        boolean bSomethingHasChanged = false;
        long oldBalanceWB = paiPS.getPaiBaBalanceWB();
        long newBalanceWB = this.ckbBalanceWB.isSelected() ? PairingParameterSet.PAIBA_MAX_BALANCEWB : 0;
        if (newBalanceWB != oldBalanceWB){
            paiPS.setPaiBaBalanceWB(newBalanceWB);
            bSomethingHasChanged = true;
        }
        if (bSomethingHasChanged){
            try {
                tournament.setTournamentParameterSet(tps);
            this.tournamentChanged();
            } catch (RemoteException ex) {
                Logger.getLogger(JFrTournamentOptions.class.getName()).log(Level.SEVERE, null, ex);
            }
        }    
    }//GEN-LAST:event_ckbBalanceWBFocusLost

    private void ckbDeterministicFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_ckbDeterministicFocusLost
        randomControlsChange();
    }//GEN-LAST:event_ckbDeterministicFocusLost

    private void rdbRandomFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_rdbRandomFocusLost
        randomControlsChange();
    }//GEN-LAST:event_rdbRandomFocusLost



    private void randomControlsChange(){
        TournamentParameterSet tps;
        PairingParameterSet paiPS;
        try {
            tps = tournament.getTournamentParameterSet();
            paiPS = tps.getPairingParameterSet();
        } catch (RemoteException ex) {
            Logger.getLogger(JFrTournamentOptions.class.getName()).log(Level.SEVERE, null, ex);
            return;
        }        
        
        boolean bSomethingHasChanged = false;
        long oldRandom = paiPS.getPaiBaRandom();
        long newRandom = this.rdbAcceptRandom.isSelected() ? PairingParameterSet.PAIBA_MAX_RANDOM : 0;
        if (newRandom != oldRandom){
            paiPS.setPaiBaRandom(newRandom);
            bSomethingHasChanged = true;
        }
        boolean oldDeterminitic = paiPS.isPaiBaDeterministic();
        boolean newDeterminitic = this.ckbDeterministic.isSelected();
        if (newDeterminitic != oldDeterminitic){
            paiPS.setPaiBaDeterministic(newDeterminitic);
            bSomethingHasChanged = true;
        }
        if (bSomethingHasChanged){
            try {
                tournament.setTournamentParameterSet(tps);
                this.tournamentChanged();
             } catch (RemoteException ex) {
                Logger.getLogger(JFrTournamentOptions.class.getName()).log(Level.SEVERE, null, ex);
            }
        }                
    }
    
    private void rdbDUDDFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_rdbDUDDFocusLost
        TournamentParameterSet tps;
        PairingParameterSet paiPS;
        try {
            tps = tournament.getTournamentParameterSet();
            paiPS = tps.getPairingParameterSet();
        } catch (RemoteException ex) {
            Logger.getLogger(JFrTournamentOptions.class.getName()).log(Level.SEVERE, null, ex);
            return;
        }   
        
        boolean bSomethingHasChanged = false;
        int oldDUDDUpperMode = paiPS.getPaiMaDUDDUpperMode();
        int newDUDDUpperMode = PairingParameterSet.PAIMA_DUDD_TOP;       
        if (this.rdbDUDDUGMid.isSelected()) newDUDDUpperMode = PairingParameterSet.PAIMA_DUDD_MID;
        if (this.rdbDUDDUGBot.isSelected()) newDUDDUpperMode = PairingParameterSet.PAIMA_DUDD_BOT;     
        if (newDUDDUpperMode != oldDUDDUpperMode){
            paiPS.setPaiMaDUDDUpperMode(newDUDDUpperMode);
            bSomethingHasChanged = true;
        }
        int oldDUDDLowerMode = paiPS.getPaiMaDUDDLowerMode();
        int newDUDDLowerMode = PairingParameterSet.PAIMA_DUDD_TOP;       
        if (this.rdbDUDDLGMid.isSelected()) newDUDDLowerMode = PairingParameterSet.PAIMA_DUDD_MID;
        if (this.rdbDUDDLGBot.isSelected()) newDUDDLowerMode = PairingParameterSet.PAIMA_DUDD_BOT;     
        if (newDUDDLowerMode != oldDUDDLowerMode){
            paiPS.setPaiMaDUDDLowerMode(newDUDDLowerMode);
            bSomethingHasChanged = true;
        }
                
        if (bSomethingHasChanged){
            try {
                tournament.setTournamentParameterSet(tps);
                this.tournamentChanged();
            } catch (RemoteException ex) {
                Logger.getLogger(JFrTournamentOptions.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_rdbDUDDFocusLost

    private void rdbSeedSystemFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_rdbSeedSystemFocusLost
        TournamentParameterSet tps;
        PairingParameterSet paiPS;
        try {
            tps = tournament.getTournamentParameterSet();
            paiPS = tps.getPairingParameterSet();
        } catch (RemoteException ex) {
            Logger.getLogger(JFrTournamentOptions.class.getName()).log(Level.SEVERE, null, ex);
            return;
        }   
        
        boolean bSomethingHasChanged = false;
        int oldSeedSystem1 = paiPS.getPaiMaSeedSystem1();
        int newSeedSystem1 = PairingParameterSet.PAIMA_SEED_SPLITANDRANDOM;
        if (this.rdbFormerSplitAndFold.isSelected()) newSeedSystem1 = PairingParameterSet.PAIMA_SEED_SPLITANDFOLD;
        if (this.rdbFormerSplitAndSlip.isSelected()) newSeedSystem1 = PairingParameterSet.PAIMA_SEED_SPLITANDSLIP;        
        if (newSeedSystem1 != oldSeedSystem1){
            paiPS.setPaiMaSeedSystem1(newSeedSystem1);
            bSomethingHasChanged = true;
        }
        
        int oldSeedSystem2 = paiPS.getPaiMaSeedSystem2();
        int newSeedSystem2 = PairingParameterSet.PAIMA_SEED_SPLITANDRANDOM;
        if (this.rdbLatterSplitAndFold.isSelected()) newSeedSystem2 = PairingParameterSet.PAIMA_SEED_SPLITANDFOLD;
        if (this.rdbLatterSplitAndSlip.isSelected()) newSeedSystem2 = PairingParameterSet.PAIMA_SEED_SPLITANDSLIP;        
        if (newSeedSystem2 != oldSeedSystem2){
            paiPS.setPaiMaSeedSystem2(newSeedSystem2);
            bSomethingHasChanged = true;
        }
        
        if (bSomethingHasChanged){
            try {
                tournament.setTournamentParameterSet(tps);
                this.tournamentChanged();
            } catch (RemoteException ex) {
                Logger.getLogger(JFrTournamentOptions.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_rdbSeedSystemFocusLost

    private void ckbAddSortOnRatingFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_ckbAddSortOnRatingFocusLost
        TournamentParameterSet tps;
        GeneralParameterSet gps = null;
        PairingParameterSet paiPS;
        try {
            tps = tournament.getTournamentParameterSet();
            paiPS = tps.getPairingParameterSet();
        } catch (RemoteException ex) {
            Logger.getLogger(JFrTournamentOptions.class.getName()).log(Level.SEVERE, null, ex);
            return;
        }
        int oldPaiMaAdditionalPlacementCritSystem1 = paiPS.getPaiMaAdditionalPlacementCritSystem1();
        int newPaiMaAdditionalPlacementCritSystem1 = this.ckbAddSortOnRating.isSelected() ? 
            PlacementParameterSet.PLA_CRIT_RATING : 0;
        
        if (newPaiMaAdditionalPlacementCritSystem1 != oldPaiMaAdditionalPlacementCritSystem1){
            paiPS.setPaiMaAdditionalPlacementCritSystem1(newPaiMaAdditionalPlacementCritSystem1);
            try {
                tournament.setTournamentParameterSet(tps);
                this.tournamentChanged();
            } catch (RemoteException ex) {
                Logger.getLogger(JFrTournamentOptions.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_ckbAddSortOnRatingFocusLost

    private void txfLastRoundForSeedSystem1FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txfLastRoundForSeedSystem1FocusLost
        TournamentParameterSet tps;
        GeneralParameterSet gps;
        PairingParameterSet paiPS;
        try {
            tps = tournament.getTournamentParameterSet();
            gps = tps.getGeneralParameterSet();
            paiPS = tps.getPairingParameterSet();
        } catch (RemoteException ex) {
            Logger.getLogger(JFrTournamentOptions.class.getName()).log(Level.SEVERE, null, ex);
            return;
        }   
        int oldLastRoundForSeedSystem1 = paiPS.getPaiMaLastRoundForSeedSystem1();
        int newLastRoundForSeedSystem1 = new Integer(txfLastRoundForSeedSystem1.getText()).intValue() - 1;
        if (newLastRoundForSeedSystem1 < 1 || newLastRoundForSeedSystem1 >= gps.getNumberOfRounds()){ 
            this.txfLastRoundForSeedSystem1.setText("" + (oldLastRoundForSeedSystem1 + 1));
            return;
        }
        if (newLastRoundForSeedSystem1 != oldLastRoundForSeedSystem1){
            paiPS.setPaiMaLastRoundForSeedSystem1(newLastRoundForSeedSystem1);
            try {
                tournament.setTournamentParameterSet(tps);
                this.tournamentChanged();
            } catch (RemoteException ex) {
                Logger.getLogger(JFrTournamentOptions.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_txfLastRoundForSeedSystem1FocusLost

    private void txfMMFloorFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txfMMFloorFocusLost
        TournamentParameterSet tps;
        GeneralParameterSet gps;
        try {
            tps = tournament.getTournamentParameterSet();
            gps = tps.getGeneralParameterSet();
        } catch (RemoteException ex) {
            Logger.getLogger(JFrTournamentOptions.class.getName()).log(Level.SEVERE, null, ex);
            return;
        }   
        int oldGenMMFloor = gps.getGenMMFloor();
        int newGenMMFloor = Player.convertKDPToInt(this.txfMMFloor.getText());        
        txfMMFloor.setText("" + Player.convertIntToKD(newGenMMFloor)); 
        if (newGenMMFloor > GeneralParameterSet.GEN_MM_FLOOR_MAX 
                || newGenMMFloor < GeneralParameterSet.GEN_MM_FLOOR_MIN
                || newGenMMFloor > gps.getGenMMBar()){
            // Error. Keep old value
            txfMMFloor.setText("" + Player.convertIntToKD(oldGenMMFloor));  
            return;
        } 
        if (newGenMMFloor != oldGenMMFloor){
            gps.setGenMMFloor(newGenMMFloor);
            try {
                tournament.setTournamentParameterSet(tps);
                this.tournamentChanged();
            } catch (RemoteException ex) {
                Logger.getLogger(JFrTournamentOptions.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_txfMMFloorFocusLost

    private void txfMMBarFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txfMMBarFocusLost
        TournamentParameterSet tps;
        GeneralParameterSet gps;
        try {
            tps = tournament.getTournamentParameterSet();
            gps = tps.getGeneralParameterSet();
        } catch (RemoteException ex) {
            Logger.getLogger(JFrTournamentOptions.class.getName()).log(Level.SEVERE, null, ex);
            return;
        }   
        int oldGenMMBar = gps.getGenMMBar();
        int newGenMMBar = Player.convertKDPToInt(this.txfMMBar.getText());
        txfMMBar.setText("" + Player.convertIntToKD(newGenMMBar));  
        if ((newGenMMBar > GeneralParameterSet.GEN_MM_BAR_MAX) 
            || (newGenMMBar < GeneralParameterSet.GEN_MM_BAR_MIN)
            || (newGenMMBar < gps.getGenMMFloor())){
            // Error. Keep old value
            txfMMBar.setText("" + Player.convertIntToKD(oldGenMMBar));  
            return;
        } 
        if (newGenMMBar != oldGenMMBar){
            gps.setGenMMBar(newGenMMBar);
            try {
                tournament.setTournamentParameterSet(tps);
                this.tournamentChanged();
            } catch (RemoteException ex) {
                Logger.getLogger(JFrTournamentOptions.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_txfMMBarFocusLost

    private void rdbAbsentOrByeFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_rdbAbsentOrByeFocusLost
        TournamentParameterSet tps;
        GeneralParameterSet gps;
        try {
            tps = tournament.getTournamentParameterSet();
            gps = tps.getGeneralParameterSet();
        } catch (RemoteException ex) {
            Logger.getLogger(JFrTournamentOptions.class.getName()).log(Level.SEVERE, null, ex);
            return;
        }   
        
        boolean bSomethingHasChanged = false;
        int newGenMMS2ValueAbsent = 0;
        if (this.rdbAbsentMMS1.isSelected()) newGenMMS2ValueAbsent = 1;
        if (this.rdbAbsentMMS2.isSelected()) newGenMMS2ValueAbsent = 2;
        if (newGenMMS2ValueAbsent != gps.getGenMMS2ValueAbsent()){
            gps.setGenMMS2ValueAbsent(newGenMMS2ValueAbsent);
            bSomethingHasChanged = true;
        }
        int newGenNBW2ValueAbsent = 0;
        if (this.rdbAbsentNBW1.isSelected()) newGenNBW2ValueAbsent = 1;
        if (this.rdbAbsentNBW2.isSelected()) newGenNBW2ValueAbsent = 2;
        if (newGenNBW2ValueAbsent != gps.getGenNBW2ValueAbsent()){
            gps.setGenNBW2ValueAbsent(newGenNBW2ValueAbsent);
            bSomethingHasChanged = true;
        }
        int newGenMMS2ValueBye = 0;
        if (this.rdbByeMMS1.isSelected()) newGenMMS2ValueBye = 1;
        if (this.rdbByeMMS2.isSelected()) newGenMMS2ValueBye = 2;
        if (newGenMMS2ValueBye != gps.getGenMMS2ValueBye()){
            gps.setGenMMS2ValueBye(newGenMMS2ValueBye);
            bSomethingHasChanged = true;
        }
        int newGenNBW2ValueBye = 0;
        if (this.rdbByeNBW1.isSelected()) newGenNBW2ValueBye = 1;
        if (this.rdbByeNBW2.isSelected()) newGenNBW2ValueBye = 2;
        if (newGenNBW2ValueBye != gps.getGenNBW2ValueBye()){
            gps.setGenNBW2ValueBye(newGenNBW2ValueBye);
            bSomethingHasChanged = true;
        }

        if (bSomethingHasChanged){
            try {
                tournament.setTournamentParameterSet(tps);
                this.tournamentChanged();
            } catch (RemoteException ex) {
                Logger.getLogger(JFrTournamentOptions.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_rdbAbsentOrByeFocusLost
    
    private void txfHdCeilingFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txfHdCeilingFocusLost
       TournamentParameterSet tps;
        try {
            tps = tournament.getTournamentParameterSet();
        } catch (RemoteException ex) {
            Logger.getLogger(JFrTournamentOptions.class.getName()).log(Level.SEVERE, null, ex);
            return;
        }
        HandicapParameterSet hps = tps.getHandicapParameterSet();
        int oldHdCeiling = hps.getHdCeiling();
        int newHdCeiling;
        try{
            newHdCeiling = (new Integer(txfHdCeiling.getText())).intValue();            
        }
        catch(NumberFormatException e){
            try {
                this.updatePnlHan();
            } catch (RemoteException ex) {
                Logger.getLogger(JFrTournamentOptions.class.getName()).log(Level.SEVERE, null, ex);
            }
            return;
        }
        if (newHdCeiling < 0 || newHdCeiling > 9) {  
            try {
                this.updatePnlHan();
            } catch (RemoteException ex) {
                Logger.getLogger(JFrTournamentOptions.class.getName()).log(Level.SEVERE, null, ex);
            }
            return;
        }
        if (newHdCeiling == oldHdCeiling) return;
        hps.setHdCeiling(newHdCeiling);
        tps.setHandicapParameterSet(hps);
        try {
            tournament.setTournamentParameterSet(tps);
            this.tournamentChanged();
        } catch (RemoteException ex) {
            Logger.getLogger(JFrTournamentOptions.class.getName()).log(Level.SEVERE, null, ex);
        }      
    }//GEN-LAST:event_txfHdCeilingFocusLost
    
    private void updHdCorrection(){
        TournamentParameterSet tps;
        try {
            tps = tournament.getTournamentParameterSet();
        } catch (RemoteException ex) {
            Logger.getLogger(JFrTournamentOptions.class.getName()).log(Level.SEVERE, null, ex);
            return;
        }
        HandicapParameterSet hps = tps.getHandicapParameterSet();
        int oldHdCorrection = hps.getHdCorrection();
        int newHdCorrection = 0;
        if (rdbHdCorrection0.isSelected()) newHdCorrection = 0; 
        if (rdbHdCorrection1.isSelected()) newHdCorrection = 1; 
        if (rdbHdCorrection2.isSelected()) newHdCorrection = 2; 
        if (rdbHdCorrection3.isSelected()) newHdCorrection = 3; 
        if (rdbHdCorrectionPlus1.isSelected()) newHdCorrection = -1; 
        if (newHdCorrection == oldHdCorrection) return;
        hps.setHdCorrection(newHdCorrection);
        tps.setHandicapParameterSet(hps);
        try {
            tournament.setTournamentParameterSet(tps);
            this.tournamentChanged();
        } catch (RemoteException ex) {
            Logger.getLogger(JFrTournamentOptions.class.getName()).log(Level.SEVERE, null, ex);
        }                  
    }
    
    private void txfNoHdRankThresholdFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txfNoHdRankThresholdFocusLost
        TournamentParameterSet tps;
        try {
            tps = tournament.getTournamentParameterSet();
        } catch (RemoteException ex) {
            Logger.getLogger(JFrTournamentOptions.class.getName()).log(Level.SEVERE, null, ex);
            return;
        }
        HandicapParameterSet hps = tps.getHandicapParameterSet();
        int oldNoHdRankThreshold = hps.getHdNoHdRankThreshold();
        int newNoHdRankThreshold = Player.convertKDPToInt(txfNoHdRankThreshold.getText());
        if (newNoHdRankThreshold < Gotha.MIN_RANK) {   
            try {
                this.updatePnlHan();
            } catch (RemoteException ex) {
                Logger.getLogger(JFrTournamentOptions.class.getName()).log(Level.SEVERE, null, ex);
            }
            return;
        }
        if (newNoHdRankThreshold == oldNoHdRankThreshold) return;
        hps.setHdNoHdRankThreshold(newNoHdRankThreshold);
        tps.setHandicapParameterSet(hps);
        try {
            tournament.setTournamentParameterSet(tps);
            this.tournamentChanged();
        } catch (RemoteException ex) {
            Logger.getLogger(JFrTournamentOptions.class.getName()).log(Level.SEVERE, null, ex);
        }      
    }//GEN-LAST:event_txfNoHdRankThresholdFocusLost

    private void btnAdjustCategoryLimitsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAdjustCategoryLimitsActionPerformed
        try {
            tournament.adjustCategoryLimits();
            this.tournamentChanged();
        } catch (RemoteException ex) {
            Logger.getLogger(JFrTournamentOptions.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnAdjustCategoryLimitsActionPerformed

    private void txfNumberOfRoundsFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txfNumberOfRoundsFocusLost
        TournamentParameterSet tps;
        try {
            tps = tournament.getTournamentParameterSet();
        } catch (RemoteException ex) {
            Logger.getLogger(JFrTournamentOptions.class.getName()).log(Level.SEVERE, null, ex);
            return;
        }
        GeneralParameterSet gps = tps.getGeneralParameterSet();
        
        int oldNbRounds = gps.getNumberOfRounds();
        int newNbRounds = oldNbRounds;
        try {           
            newNbRounds = Integer.parseInt(this.txfNumberOfRounds.getText());
        } catch (NumberFormatException ex) {
        }
        if (newNbRounds <= 0) newNbRounds = oldNbRounds;
        if (newNbRounds > Gotha.MAX_NUMBER_OF_ROUNDS) newNbRounds = Gotha.MAX_NUMBER_OF_ROUNDS;
        
        // Refuse to decrease number of rounds if round not empty
        for (int r = oldNbRounds - 1; r >= newNbRounds; r-- ){
            try {
                if ((tournament.gamesList(r).size() > 0) || (tournament.getByePlayer(r) != null)) {
                    newNbRounds = r + 1;
                    break;
                }
            } catch (RemoteException ex) {
                Logger.getLogger(JFrTournamentOptions.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        if (newNbRounds == oldNbRounds){
            this.txfNumberOfRounds.setText("" + oldNbRounds);
            return;
        }

        gps.setNumberOfRounds(newNbRounds);
        tps.setGeneralParameterSet(gps);
        try {
            tournament.setTournamentParameterSet(tps);
            this.tournamentChanged();
        } catch (RemoteException ex) {
            Logger.getLogger(JFrTournamentOptions.class.getName()).log(Level.SEVERE, null, ex);
        }      
        
    }//GEN-LAST:event_txfNumberOfRoundsFocusLost

    private void txfBeginDateFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txfBeginDateFocusLost
        TournamentParameterSet tps;
        try {
            tps = tournament.getTournamentParameterSet();
        } catch (RemoteException ex) {
            Logger.getLogger(JFrTournamentOptions.class.getName()).log(Level.SEVERE, null, ex);
            return;
        }
        GeneralParameterSet gps = tps.getGeneralParameterSet();
        Date oldBeginDate = gps.getBeginDate();
        Date newBeginDate;
        try {
            newBeginDate = new SimpleDateFormat("yyyy-MM-dd").parse(this.txfBeginDate.getText());  
        } catch (ParseException ex) {
            Logger.getLogger(JFrTournamentOptions.class.getName()).log(Level.SEVERE, null, ex);
            return;
        }
        if (newBeginDate.equals(oldBeginDate)) return;
        gps.setBeginDate(newBeginDate);        

        tps.setGeneralParameterSet(gps);
        try {
            tournament.setTournamentParameterSet(tps);
            this.tournamentChanged();
        } catch (RemoteException ex) {
            Logger.getLogger(JFrTournamentOptions.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_txfBeginDateFocusLost

    private void txfLocationFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txfLocationFocusLost
        TournamentParameterSet tps;
        try {
            tps = tournament.getTournamentParameterSet();
        } catch (RemoteException ex) {
            Logger.getLogger(JFrTournamentOptions.class.getName()).log(Level.SEVERE, null, ex);
            return;
        }
        GeneralParameterSet gps = tps.getGeneralParameterSet();
        String oldLocation = gps.getLocation();
        String newLocation = txfLocation.getText();
        if (newLocation.compareTo(oldLocation) == 0) return;
        gps.setLocation(newLocation);
        tps.setGeneralParameterSet(gps);
        try {
            tournament.setTournamentParameterSet(tps);
            this.tournamentChanged();
        } catch (RemoteException ex) {
            Logger.getLogger(JFrTournamentOptions.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_txfLocationFocusLost

    private void txfNameFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txfNameFocusLost
        TournamentParameterSet tps;
        try {
            tps = tournament.getTournamentParameterSet();
        } catch (RemoteException ex) {
            Logger.getLogger(JFrTournamentOptions.class.getName()).log(Level.SEVERE, null, ex);
            return;
        }
        GeneralParameterSet gps = tps.getGeneralParameterSet();
        String oldName = gps.getName();
        String newName = txfName.getText();
        if (newName.compareTo(oldName) == 0) return;
        gps.setName(newName);
        tps.setGeneralParameterSet(gps);
        try {
            tournament.setTournamentParameterSet(tps);
            this.tournamentChanged();
        } catch (RemoteException ex) {
            Logger.getLogger(JFrTournamentOptions.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_txfNameFocusLost

    private void txfNumberOfCategoriesFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txfNumberOfCategoriesFocusLost
        TournamentParameterSet tps;
        try {
            tps = tournament.getTournamentParameterSet();
        } catch (RemoteException ex) {
            Logger.getLogger(JFrTournamentOptions.class.getName()).log(Level.SEVERE, null, ex);
            return;
        }
        GeneralParameterSet gps = tps.getGeneralParameterSet();
        
        int oldNbCategories = gps.getNumberOfCategories();
        int newNbCategories = -1;
        try {           
            newNbCategories = Integer.parseInt(this.txfNumberOfCategories.getText());
        } catch (NumberFormatException ex) {
            Logger.getLogger(JFrTournamentOptions.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (newNbCategories <= 0 || newNbCategories > Gotha.MAX_NUMBER_OF_CATEGORIES){
            this.txfNumberOfCategories.setText("" + oldNbCategories);  
        }
        else{
            if (newNbCategories == oldNbCategories) return;
            int[] oldLowerCategoryLimits = gps.getLowerCategoryLimits();
            int[] newLowerCategoryLimits = new int[newNbCategories - 1];
            for (int c = 0; c < newLowerCategoryLimits.length; c++ ){
                if (c < oldLowerCategoryLimits.length) newLowerCategoryLimits[c] = oldLowerCategoryLimits[c];
                else newLowerCategoryLimits[c] = -30;
            } 
            gps.setNumberOfCategories(newNbCategories);
            gps.setLowerCategoryLimits(newLowerCategoryLimits);
            tps.setGeneralParameterSet(gps);
            try {
                tournament.setTournamentParameterSet(tps);
                this.tournamentChanged();
            } catch (RemoteException ex) {
                Logger.getLogger(JFrTournamentOptions.class.getName()).log(Level.SEVERE, null, ex);
            }      
        }
    }//GEN-LAST:event_txfNumberOfCategoriesFocusLost
    
    private void tabTxfLowerLimitOfCatFocusLost(java.awt.event.FocusEvent evt) {        
        TournamentParameterSet tps;
        try {
            tps = tournament.getTournamentParameterSet();
        } catch (RemoteException ex) {
            Logger.getLogger(JFrTournamentOptions.class.getName()).log(Level.SEVERE, null, ex);
            return;
        }
        GeneralParameterSet gps = tps.getGeneralParameterSet();
        
        for (int c = 0; c < this.tabTxfLowerLimitOfCat.length; c++){
            if (evt.getSource() == tabTxfLowerLimitOfCat[c]){
                int newLowerLimit = Player.convertKDPToInt(tabTxfLowerLimitOfCat[c].getText());
                int oldLowerLimit = gps.getLowerCategoryLimits()[c];
                if (newLowerLimit < -30) {
                    try {
                        this.updatePnlGen();
                    } catch (RemoteException ex) {
                        Logger.getLogger(JFrTournamentOptions.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    return;
                }
                if (newLowerLimit == oldLowerLimit) return;
                int[] newTabTxfLowerLimitOfCat = gps.getLowerCategoryLimits();
                newTabTxfLowerLimitOfCat[c] = newLowerLimit;
                for (int cc = 0; cc < c; cc++) 
                    if (newTabTxfLowerLimitOfCat[cc] < newLowerLimit) newTabTxfLowerLimitOfCat[cc] = newLowerLimit;
                for (int cc = c; cc < newTabTxfLowerLimitOfCat.length; cc++) 
                    if (newTabTxfLowerLimitOfCat[cc] > newLowerLimit) newTabTxfLowerLimitOfCat[cc] = newLowerLimit;
                gps.setLowerCategoryLimits(newTabTxfLowerLimitOfCat);
                tps.setGeneralParameterSet(gps);
                try {
                    tournament.setTournamentParameterSet(tps);
                    this.tournamentChanged();
                } catch (RemoteException ex) {
                    Logger.getLogger(JFrTournamentOptions.class.getName()).log(Level.SEVERE, null, ex);
                }      
            }                
        }         
    }
    
    private void updateCriteriaFromComboBoxes(){
        TournamentParameterSet tps;
        PlacementParameterSet pps;
        try {
            tps = tournament.getTournamentParameterSet();
            pps = tps.getPlacementParameterSet();
        } catch (RemoteException ex) {
            Logger.getLogger(JFrTournamentOptions.class.getName()).log(Level.SEVERE, null, ex);
            return;
        }
        int[] plaCrit = pps.getPlaCriteria();
        plaCrit[0] = PlacementParameterSet.criterionUID((String)cbxCrit1.getModel().getSelectedItem());
        plaCrit[1] = PlacementParameterSet.criterionUID((String)cbxCrit2.getModel().getSelectedItem());
        plaCrit[2] = PlacementParameterSet.criterionUID((String)cbxCrit3.getModel().getSelectedItem());
        plaCrit[3] = PlacementParameterSet.criterionUID((String)cbxCrit4.getModel().getSelectedItem());
        
        // Immediately filter double DC/SDC criteria, which is stritly forbidden
        int nbDirCrit = 0;
        for (int c = 0; c < plaCrit.length; c++){
            if (plaCrit[c] != PlacementParameterSet.PLA_CRIT_DC && plaCrit[c] != PlacementParameterSet.PLA_CRIT_SDC) continue;
            nbDirCrit ++;
            if (nbDirCrit > 1) plaCrit[c] = PlacementParameterSet.PLA_CRIT_NUL;
        }

        pps.setPlaCriteria(plaCrit);
        tps.setPlacementParameterSet(pps);

        String strCriteria = pps.checkCriteriaCoherence(this);
        this.txaWarning.setText(strCriteria);
        try {
            tournament.setTournamentParameterSet(tps);
            this.tournamentChanged();
        } catch (RemoteException ex) {
            Logger.getLogger(JFrTournamentOptions.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    private void updateTeamCriteriaFromComboBoxes(){
        TeamTournamentParameterSet ttps;
        TeamPlacementParameterSet tpps;
        try {
            ttps = tournament.getTeamTournamentParameterSet();
            tpps = ttps.getTeamPlacementParameterSet();
        } catch (RemoteException ex) {
            Logger.getLogger(JFrTournamentOptions.class.getName()).log(Level.SEVERE, null, ex);
            return;
        }
        int[] plaCrit = tpps.getPlaCriteria();
        plaCrit[0] = TeamPlacementParameterSet.criterionUID((String)cbxTeamCrit1.getModel().getSelectedItem());
        plaCrit[1] = TeamPlacementParameterSet.criterionUID((String)cbxTeamCrit2.getModel().getSelectedItem());
        plaCrit[2] = TeamPlacementParameterSet.criterionUID((String)cbxTeamCrit3.getModel().getSelectedItem());
        plaCrit[3] = TeamPlacementParameterSet.criterionUID((String)cbxTeamCrit4.getModel().getSelectedItem());
        plaCrit[4] = TeamPlacementParameterSet.criterionUID((String)cbxTeamCrit5.getModel().getSelectedItem());
        plaCrit[5] = TeamPlacementParameterSet.criterionUID((String)cbxTeamCrit6.getModel().getSelectedItem());

        tpps.setPlaCriteria(plaCrit);
        ttps.setTeamPlacementParameterSet(tpps);



        try {
            tournament.setTeamTournamentParameterSet(ttps);
            this.tournamentChanged();
        } catch (RemoteException ex) {
            Logger.getLogger(JFrTournamentOptions.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void btnQuitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnQuitActionPerformed
        dispose();
    }//GEN-LAST:event_btnQuitActionPerformed

    private void txfShortNameFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txfShortNameFocusLost
        TournamentParameterSet tps;
        try {
            tps = tournament.getTournamentParameterSet();
        } catch (RemoteException ex) {
            Logger.getLogger(JFrTournamentOptions.class.getName()).log(Level.SEVERE, null, ex);
            return;
        }
        GeneralParameterSet gps = tps.getGeneralParameterSet();
        String oldShortName = gps.getShortName();
        String newShortName = txfShortName.getText();
        newShortName = Gotha.eliminateForbiddenCharacters(newShortName);
        txfShortName.setText(newShortName);
        if (newShortName.compareTo(oldShortName) == 0) return;
        gps.setShortName(newShortName);
        tps.setGeneralParameterSet(gps);
        try {
            tournament.setTournamentParameterSet(tps);
            tournament.setHasBeenSavedOnce(false);
            this.tournamentChanged();
        } catch (RemoteException ex) {
            Logger.getLogger(JFrTournamentOptions.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_txfShortNameFocusLost

    private void rdbHdBaseMMSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdbHdBaseMMSActionPerformed
        this.updHdBase();
    }//GEN-LAST:event_rdbHdBaseMMSActionPerformed

    private void rdbHdBaseRankActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdbHdBaseRankActionPerformed
        this.updHdBase();
    }//GEN-LAST:event_rdbHdBaseRankActionPerformed

    private void btnHelpPlacementActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHelpPlacementActionPerformed
        Gotha.displayGothaHelp("Placement settings");
}//GEN-LAST:event_btnHelpPlacementActionPerformed

    private void btnHelpGeneralActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHelpGeneralActionPerformed
        Gotha.displayGothaHelp("General settings");
    }//GEN-LAST:event_btnHelpGeneralActionPerformed

    private void btnHelpHandicapActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHelpHandicapActionPerformed
        Gotha.displayGothaHelp("Handicap settings");
    }//GEN-LAST:event_btnHelpHandicapActionPerformed

    private void btnHelpPairingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHelpPairingActionPerformed
        Gotha.displayGothaHelp("Pairing settings");
    }//GEN-LAST:event_btnHelpPairingActionPerformed

    private void ckbResetParametersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ckbResetParametersActionPerformed
        boolean bResetSelected = this.ckbResetParameters.isSelected();

        this.lblNewSystem.setEnabled(!bResetSelected);
        this.rdbMcMahon.setEnabled(!bResetSelected);
        this.rdbSwiss.setEnabled(!bResetSelected);
        this.rdbSwissCat.setEnabled(!bResetSelected);
        this.lblRecommended.setEnabled(!bResetSelected);
        
        if (bResetSelected){
            int tournamentType = TournamentParameterSet.TYPE_UNDEFINED;
            try {
                tournamentType = tournament.tournamentType();
            } catch (RemoteException ex) {
                Logger.getLogger(JFrTournamentOptions.class.getName()).log(Level.SEVERE, null, ex);
            }
            if (tournamentType == TournamentParameterSet.TYPE_MCMAHON) rdbMcMahon.setSelected(true);
            if (tournamentType == TournamentParameterSet.TYPE_SWISS) rdbSwiss.setSelected(true);
            if (tournamentType == TournamentParameterSet.TYPE_SWISSCAT) rdbSwissCat.setSelected(true);
        }

    }//GEN-LAST:event_ckbResetParametersActionPerformed

    private void btnHelpTeamPlacementActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHelpTeamPlacementActionPerformed
        Gotha.displayGothaHelp("Team Placement settings");
    }//GEN-LAST:event_btnHelpTeamPlacementActionPerformed

    private void cbxCritFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cbxCritFocusLost
        updateCriteriaFromComboBoxes();
    }//GEN-LAST:event_cbxCritFocusLost

    private void cbxTeamCritFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cbxTeamCritFocusLost
        updateTeamCriteriaFromComboBoxes();
    }//GEN-LAST:event_cbxTeamCritFocusLost

    private void txfEndDateFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txfEndDateFocusLost
        TournamentParameterSet tps;
        try {
            tps = tournament.getTournamentParameterSet();
        } catch (RemoteException ex) {
            Logger.getLogger(JFrTournamentOptions.class.getName()).log(Level.SEVERE, null, ex);
            return;
        }
        GeneralParameterSet gps = tps.getGeneralParameterSet();
        Date oldEndDate = gps.getEndDate();
        Date newEndDate;
        try {
            newEndDate = new SimpleDateFormat("yyyy-MM-dd").parse(this.txfEndDate.getText());  
        } catch (ParseException ex) {
            Logger.getLogger(JFrTournamentOptions.class.getName()).log(Level.SEVERE, null, ex);
            return;
        }
        if (newEndDate.equals(oldEndDate)) return;
        gps.setEndDate(newEndDate);        

        tps.setGeneralParameterSet(gps);
        try {
            tournament.setTournamentParameterSet(tps);
            this.tournamentChanged();
        } catch (RemoteException ex) {
            Logger.getLogger(JFrTournamentOptions.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_txfEndDateFocusLost

    private void txfDirectorFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txfDirectorFocusLost
        TournamentParameterSet tps;
        try {
            tps = tournament.getTournamentParameterSet();
        } catch (RemoteException ex) {
            Logger.getLogger(JFrTournamentOptions.class.getName()).log(Level.SEVERE, null, ex);
            return;
        }
        GeneralParameterSet gps = tps.getGeneralParameterSet();
        String oldDirector = gps.getDirector();
        String newDirector = txfDirector.getText();
        if (newDirector.compareTo(oldDirector) == 0) return;
        gps.setDirector(newDirector);
        tps.setGeneralParameterSet(gps);
        try {
            tournament.setTournamentParameterSet(tps);
            this.tournamentChanged();
        } catch (RemoteException ex) {
            Logger.getLogger(JFrTournamentOptions.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_txfDirectorFocusLost

    private void rdbHdCorrectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdbHdCorrectionActionPerformed
        updHdCorrection();
    }//GEN-LAST:event_rdbHdCorrectionActionPerformed

    private void ckbRoundDownFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_ckbRoundDownFocusLost
        TournamentParameterSet tps;
        GeneralParameterSet gps;
        try {
            tps = tournament.getTournamentParameterSet();
            gps = tps.getGeneralParameterSet();
        } catch (RemoteException ex) {
            Logger.getLogger(JFrTournamentOptions.class.getName()).log(Level.SEVERE, null, ex);
            return;
        }   
        
        boolean bSomethingHasChanged = false;
        boolean newRoundDown = this.ckbRoundDown.isSelected();
        if (newRoundDown != gps.isGenRoundDownNBWMMS()){
            gps.setGenRoundDownNBWMMS(newRoundDown);
            bSomethingHasChanged = true;
        }

        if (bSomethingHasChanged){
            try {
                tournament.setTournamentParameterSet(tps);
                this.tournamentChanged();
            } catch (RemoteException ex) {
                Logger.getLogger(JFrTournamentOptions.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

    }//GEN-LAST:event_ckbRoundDownFocusLost

    private void ckbSeBarThresholdActiveFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_ckbSeBarThresholdActiveFocusLost
        secCritControlsFocusLost();
    }//GEN-LAST:event_ckbSeBarThresholdActiveFocusLost

    private void ckbCompensateFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_ckbCompensateFocusLost
        TournamentParameterSet tps;
        PairingParameterSet paiPS;
        try {
            tps = tournament.getTournamentParameterSet();
            paiPS = tps.getPairingParameterSet();
        } catch (RemoteException ex) {
            Logger.getLogger(JFrTournamentOptions.class.getName()).log(Level.SEVERE, null, ex);
            return;
        }        
        
        boolean bSomethingHasChanged = false;
        boolean oldCompensateDUDD = paiPS.isPaiMaCompensateDUDD();
        boolean newCompensateDUDD = this.ckbCompensate.isSelected();
        if (newCompensateDUDD != oldCompensateDUDD){
            paiPS.setPaiMaCompensateDUDD(newCompensateDUDD);
            bSomethingHasChanged = true;
        }
        if (bSomethingHasChanged){
            try {
                tournament.setTournamentParameterSet(tps);
            this.tournamentChanged();
            } catch (RemoteException ex) {
                Logger.getLogger(JFrTournamentOptions.class.getName()).log(Level.SEVERE, null, ex);
            }
        }    

    }//GEN-LAST:event_ckbCompensateFocusLost

    private void txfMMZeroFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txfMMZeroFocusLost
        TournamentParameterSet tps;
        GeneralParameterSet gps;
        try {
            tps = tournament.getTournamentParameterSet();
            gps = tps.getGeneralParameterSet();
        } catch (RemoteException ex) {
            Logger.getLogger(JFrTournamentOptions.class.getName()).log(Level.SEVERE, null, ex);
            return;
        }   
        int oldGenMMZero = gps.getGenMMZero();
        int newGenMMZero = Player.convertKDPToInt(this.txfMMZero.getText());        
        txfMMZero.setText("" + Player.convertIntToKD(newGenMMZero)); 
        if (newGenMMZero > GeneralParameterSet.GEN_MM_ZERO_MAX 
                || newGenMMZero < GeneralParameterSet.GEN_MM_ZERO_MIN){
            // Error. Keep old value
            txfMMZero.setText("" + Player.convertIntToKD(oldGenMMZero));  
            return;
        } 
        if (newGenMMZero != oldGenMMZero){
            gps.setGenMMZero(newGenMMZero);
            try {
                tournament.setTournamentParameterSet(tps);
                this.tournamentChanged();
            } catch (RemoteException ex) {
                Logger.getLogger(JFrTournamentOptions.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_txfMMZeroFocusLost

    private void updHdBase(){
        TournamentParameterSet tps;
        try {
            tps = tournament.getTournamentParameterSet();
        } catch (RemoteException ex) {
            Logger.getLogger(JFrTournamentOptions.class.getName()).log(Level.SEVERE, null, ex);
            return;
        }
        HandicapParameterSet hps = tps.getHandicapParameterSet();
        boolean oldHdBase = hps.isHdBasedOnMMS();
        boolean newHdBase = true;
        if (rdbHdBaseRank.isSelected()) newHdBase = false;
        if (newHdBase == oldHdBase) return;
        hps.setHdBasedOnMMS(newHdBase);
        tps.setHandicapParameterSet(hps);
        try {
            tournament.setTournamentParameterSet(tps);
            this.tournamentChanged();
        } catch (RemoteException ex) {
            Logger.getLogger(JFrTournamentOptions.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void customInitComponents()throws RemoteException{
        int w = JFrGotha.MEDIUM_FRAME_WIDTH;
        int h = JFrGotha.MEDIUM_FRAME_HEIGHT;
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((dim.width - w)/2, (dim.height -h)/2, w, h);
        setIconImage(Gotha.getIconImage());
        
        this.tpnParameters.setBounds(0, 0, w - 6, h - 84);
        initPnlGen();
        initPnlHan();
        initPnlPla();
        initPnlPai();
        initPnlTPl();
    }
    
    private void initPnlGen()throws RemoteException{
        if (Gotha.runningMode == Gotha.RUNNING_MODE_CLI) this.txfShortName.setEditable(false);
        updatePnlGen();
    }
    private void initPnlHan()throws RemoteException{
        updatePnlHan();
    }
    private void initPnlPla()throws RemoteException{       
        // Fill criterion combo boxes
        String[] strCritLN = PlacementParameterSet.criteriaLongNames();
        cbxCrit1.setModel(new DefaultComboBoxModel(strCritLN));
        cbxCrit2.setModel(new DefaultComboBoxModel(strCritLN));
        cbxCrit3.setModel(new DefaultComboBoxModel(strCritLN));
        cbxCrit4.setModel(new DefaultComboBoxModel(strCritLN));
        
        // For any type of tournament crit 1 should not be modified
        cbxCrit1.setEnabled(false);
        // And for SwissCat Tournaments, crit 2 should not be modified
        if (tournament.tournamentType() == TournamentParameterSet.TYPE_SWISSCAT)         
            cbxCrit2.setEnabled(false);

        // Fill Criterion Glossary JTable
        
        JFrGotha.formatColumn(tblGlossary, CRITERION_NAME, "Name", 60, SwingConstants.LEFT, SwingConstants.LEFT);
        JFrGotha.formatColumn(tblGlossary, CRITERION_SHORT_NAME, "Short name", 50, SwingConstants.LEFT, SwingConstants.LEFT);
        JFrGotha.formatColumn(tblGlossary, CRITERION_DESCRIPTION, "Description", 270, SwingConstants.LEFT, SwingConstants.LEFT);
        
        DefaultTableModel model = (DefaultTableModel)tblGlossary.getModel();
        while (model.getRowCount() > 0) model.removeRow(0);

        for (int iPCrit = 0; iPCrit < PlacementParameterSet.allPlacementCriteria.length; iPCrit++){
            PlacementCriterion pCrit = PlacementParameterSet.allPlacementCriteria[iPCrit];
            Vector<String> row = new Vector<String>();
            row.add("" + pCrit.longName);  
            row.add("" + pCrit.shortName);  
            row.add("" + pCrit.description);  
          
            model.addRow(row);
        }

        updatePnlPla();
    }

    private void initPnlTPl()throws RemoteException{
        // Fill criterion combo boxes
        String[] strCritLN = TeamPlacementParameterSet.criteriaLongNames();

        cbxTeamCrit1.setModel(new DefaultComboBoxModel(strCritLN));
        cbxTeamCrit2.setModel(new DefaultComboBoxModel(strCritLN));
        cbxTeamCrit3.setModel(new DefaultComboBoxModel(strCritLN));
        cbxTeamCrit4.setModel(new DefaultComboBoxModel(strCritLN));
        cbxTeamCrit5.setModel(new DefaultComboBoxModel(strCritLN));
        cbxTeamCrit6.setModel(new DefaultComboBoxModel(strCritLN));

        // For any type of tournament crit 1 should not be modified
        cbxTeamCrit1.setEnabled(false);

        // Fill Criterion Glossary JTable

        JFrGotha.formatColumn(tblTeamGlossary, CRITERION_NAME, "Name", 60, SwingConstants.LEFT, SwingConstants.LEFT);
        JFrGotha.formatColumn(tblTeamGlossary, CRITERION_SHORT_NAME, "Short name", 50, SwingConstants.LEFT, SwingConstants.LEFT);
        JFrGotha.formatColumn(tblTeamGlossary, CRITERION_DESCRIPTION, "Description", 270, SwingConstants.LEFT, SwingConstants.LEFT);

        DefaultTableModel model = (DefaultTableModel)tblTeamGlossary.getModel();
        while (model.getRowCount() > 0) model.removeRow(0);

        for (int iPCrit = 0; iPCrit < TeamPlacementParameterSet.allPlacementCriteria.length; iPCrit++){
            PlacementCriterion pCrit = TeamPlacementParameterSet.allPlacementCriteria[iPCrit];
            Vector<String> row = new Vector<String>();
            row.add("" + pCrit.longName);
            row.add("" + pCrit.shortName);
            row.add("" + pCrit.description);


            model.addRow(row);
        }

        updatePnlTPl();
    }

    private void initPnlPai()throws RemoteException{
        updatePnlPai();
    }
    
    private void updatePnlGen()throws RemoteException{
        GeneralParameterSet gps = tournament.getTournamentParameterSet().getGeneralParameterSet();
        int tournamentType = tournament.tournamentType();
        if (tournamentType == TournamentParameterSet.TYPE_UNDEFINED){
            this.pnlTournamentDetails.setVisible(true);
            this.lblSystemName.setVisible(false);
            this.pnlCategories.setVisible(false); 
            this.pnlMcMahon.setVisible(false);
        }
        if (tournamentType == TournamentParameterSet.TYPE_MCMAHON){
            this.pnlTournamentDetails.setVisible(true);
            this.lblSystemName.setVisible(true);
            this.lblSystemName.setText("McMahon system");
            this.pnlCategories.setVisible(false);                      
            this.pnlMcMahon.setVisible(true);
        }        
        if (tournamentType == TournamentParameterSet.TYPE_SWISS){
            this.pnlTournamentDetails.setVisible(true);
            this.lblSystemName.setVisible(true);
            this.lblSystemName.setText("Swiss system");
            this.pnlCategories.setVisible(false);
            this.pnlMcMahon.setVisible(false);
        }
        if (tournamentType == TournamentParameterSet.TYPE_SWISSCAT){
            this.pnlTournamentDetails.setVisible(true);
            this.lblSystemName.setVisible(true);
            this.lblSystemName.setText("SwissCat system");
            this.pnlCategories.setVisible(true);                      
            this.pnlMcMahon.setVisible(false);
        }
        
        // Identification Panel
        this.txfShortName.setText(gps.getShortName());
        this.txfName.setText(gps.getName());
        this.txfLocation.setText(gps.getLocation());
        this.txfDirector.setText(gps.getDirector());
        this.txfBeginDate.setText((new SimpleDateFormat("yyyy-MM-dd")).format(gps.getBeginDate()));  
        this.txfEndDate.setText((new SimpleDateFormat("yyyy-MM-dd")).format(gps.getEndDate()));  
        this.txfNumberOfRounds.setText("" + gps.getNumberOfRounds());  
        
        // Categories Panel
        if (this.pnlCategories.isVisible()){
            int nbCat = gps.getNumberOfCategories();
            this.txfNumberOfCategories.setText("" + nbCat);  
            if (tabLblCat != null){
                for (int c = 0; c < tabLblCat.length; c++){
                    pnlCategories.remove(tabLblCat[c]);
                }
            }            
            if (tabTxfLowerLimitOfCat != null){
                for (int c = 0; c < tabTxfLowerLimitOfCat.length; c++){
                    pnlCategories.remove(tabTxfLowerLimitOfCat[c]);
                }
            }
            if (tabLblNbPlayersOfCat != null){
                for (int c = 0; c < tabLblNbPlayersOfCat.length; c++){
                    pnlCategories.remove(tabLblNbPlayersOfCat[c]);
                }
            }
            
            // Dimensions for pnlCategories and its components
            int tpgcPnlWidth = 220;
            int tpgcPnlHeadHeight = 120;
            int tpgcPnlBottomHeight = 30;
            
            int tpgcLblLeft = 30;
            int tpgcLblTop = tpgcPnlHeadHeight;
            int tpgcLblHeight = 20;
            int tpgcLblWidth = 80;
            
            int tpgcTxfLeft = tpgcLblLeft + tpgcLblWidth + 10;
            int tpgcTxfWidth = 30;

            int tpgcNbPLeft = tpgcTxfLeft + tpgcTxfWidth + 10;
            int tpgcNbPWidth = 30;
                  
            tabLblCat = new JLabel[nbCat];
            tabTxfLowerLimitOfCat = new JTextField[nbCat];
            tabLblNbPlayersOfCat = new JLabel[nbCat];
            pnlCategories.setSize(tpgcPnlWidth, tpgcPnlHeadHeight + tpgcLblHeight * nbCat + tpgcPnlBottomHeight);
            for (int c = 0; c < nbCat; c++){
                // Category c Labels
                tabLblCat[c] = new JLabel("Category" + (c + 1));
//                tabLblCat[c].setBounds(30, 120 + 20 * c, 80, 20);
                tabLblCat[c].setBounds(tpgcLblLeft, tpgcPnlHeadHeight + tpgcLblHeight * c, tpgcLblWidth, tpgcLblHeight);
                pnlCategories.add(tabLblCat[c]);
                tabLblCat[c].updateUI();
                // Lower limits Text fields
                int niv = (c < nbCat -1) ? gps.getLowerCategoryLimits()[c] : -30;
                String strNiv = Player.convertIntToKD(niv);
                tabTxfLowerLimitOfCat[c] = new JTextField(strNiv);
//                tabTxfLowerLimitOfCat[c].setBounds(120, 120 + 20 * c, 30, 20);
                tabTxfLowerLimitOfCat[c].setBounds(tpgcTxfLeft, tpgcPnlHeadHeight + tpgcLblHeight * c, tpgcTxfWidth, tpgcLblHeight);
                pnlCategories.add(tabTxfLowerLimitOfCat[c]);
                tabTxfLowerLimitOfCat[c].updateUI();
                if (c < nbCat -1){
                    tabTxfLowerLimitOfCat[c].setEditable(true);
                    tabTxfLowerLimitOfCat[c].addFocusListener(new java.awt.event.FocusAdapter() {
                        @Override
                        public void focusLost(java.awt.event.FocusEvent evt) {
                            tabTxfLowerLimitOfCatFocusLost(evt);
                        }
                    });
                }
                else tabTxfLowerLimitOfCat[c].setEditable(false);
                // number of players in the category Text Field
                int nbPl = tournament.numberOfPlayersStrongerOrEqualTo(niv);
                if (c > 0) nbPl -= tournament.numberOfPlayersStrongerOrEqualTo(gps.getLowerCategoryLimits()[c-1]);
                tabLblNbPlayersOfCat[c] = new JLabel("" + nbPl);
//                tabLblNbPlayersOfCat[c].setBounds(160, 120 + 20 * c, 30, 20);
                tabLblNbPlayersOfCat[c].setBounds(tpgcNbPLeft, tpgcPnlHeadHeight + tpgcLblHeight * c, tpgcNbPWidth, tpgcLblHeight);
                pnlCategories.add(tabLblNbPlayersOfCat[c]); 
                tabLblNbPlayersOfCat[c].updateUI();
            }          
        }
        // McMahon Panel
        if (this.pnlMcMahon.isVisible()){
            this.txfMMBar.setText(Player.convertIntToKD(gps.getGenMMBar()));
            this.txfMMFloor.setText(Player.convertIntToKD(gps.getGenMMFloor()));
            this.txfMMZero.setText(Player.convertIntToKD(gps.getGenMMZero()));
        }
        
        // Special results panel
        switch(gps.getGenMMS2ValueAbsent()){
            case 0 : this.rdbAbsentMMS0.setSelected(true); break;
            case 1 : this.rdbAbsentMMS1.setSelected(true); break;
            case 2 : this.rdbAbsentMMS2.setSelected(true); break;
        }
        switch(gps.getGenNBW2ValueAbsent()){
            case 0 : this.rdbAbsentNBW0.setSelected(true); break;
            case 1 : this.rdbAbsentNBW1.setSelected(true); break;
            case 2 : this.rdbAbsentNBW2.setSelected(true); break;
        }
        switch(gps.getGenMMS2ValueBye()){
            case 0 : this.rdbByeMMS0.setSelected(true); break;
            case 1 : this.rdbByeMMS1.setSelected(true); break;
            case 2 : this.rdbByeMMS2.setSelected(true); break;
        }
        switch(gps.getGenNBW2ValueBye()){
            case 0 : this.rdbByeNBW0.setSelected(true); break;
            case 1 : this.rdbByeNBW1.setSelected(true); break;
            case 2 : this.rdbByeNBW2.setSelected(true); break;
        }
        
        this.ckbRoundDown.setSelected(gps.isGenRoundDownNBWMMS());
    }
    
    private void updatePnlHan()throws RemoteException{
        int tournamentType = tournament.tournamentType();
        if (tournamentType == TournamentParameterSet.TYPE_UNDEFINED){
            this.lblHandicap.setText("No Handicap");
            this.pnlHandicap.setVisible(true);
        }
        if (tournamentType == TournamentParameterSet.TYPE_MCMAHON){
            this.lblHandicap.setText("");
            this.pnlHandicap.setVisible(true);
        }        
        if (tournamentType == TournamentParameterSet.TYPE_SWISS){
            this.lblHandicap.setText("No Handicap");
            this.pnlHandicap.setVisible(false);
       }
        if (tournamentType == TournamentParameterSet.TYPE_SWISSCAT){
            this.lblHandicap.setText("");
            this.pnlHandicap.setVisible(true);
        }
        if (pnlHandicap.isVisible()){
            HandicapParameterSet hps = tournament.getTournamentParameterSet().getHandicapParameterSet();
            this.txfNoHdRankThreshold.setText(Player.convertIntToKD(hps.getHdNoHdRankThreshold()));
            if(hps.isHdBasedOnMMS()) this.rdbHdBaseMMS.setSelected(true);
            else this.rdbHdBaseRank.setSelected(true);
            switch(hps.getHdCorrection()){
                case 0 : this.rdbHdCorrection0.setSelected(true); break;
                case 1 : this.rdbHdCorrection1.setSelected(true); break;
                case 2 : this.rdbHdCorrection2.setSelected(true); break;
                case 3 : this.rdbHdCorrection3.setSelected(true); break;
                case -1: this.rdbHdCorrectionPlus1.setSelected(true); break;
            }
            this.txfHdCeiling.setText("" + hps.getHdCeiling());
        }
    }

    private void updatePnlPla()throws RemoteException{
        PlacementParameterSet pps = tournament.getTournamentParameterSet().getPlacementParameterSet();
        GeneralParameterSet gps = tournament.getTournamentParameterSet().getGeneralParameterSet();
        // update contents of combo boxes
        int[] displayedCriteria = pps.getPlaCriteria();
        this.cbxCrit1.getModel().setSelectedItem(PlacementParameterSet.criterionLongName(displayedCriteria[0]));
        this.cbxCrit2.getModel().setSelectedItem(PlacementParameterSet.criterionLongName(displayedCriteria[1]));
        this.cbxCrit3.getModel().setSelectedItem(PlacementParameterSet.criterionLongName(displayedCriteria[2]));
        this.cbxCrit4.getModel().setSelectedItem(PlacementParameterSet.criterionLongName(displayedCriteria[3]));   
        
        // update of McMahon bar and floor JTextField
        int bar = gps.getGenMMBar();
        int floor = gps.getGenMMFloor();
        int zero = gps.getGenMMZero();
        this.txfMMBar.setText("" + Player.convertIntToKD(bar));
        this.txfMMFloor.setText("" + Player.convertIntToKD(floor));
        this.txfMMZero.setText("" + Player.convertIntToKD(zero));
    }
    
    private void updatePnlTPl()throws RemoteException{
        TeamPlacementParameterSet tpps = tournament.getTeamTournamentParameterSet().getTeamPlacementParameterSet();
        // update contents of combo boxes
        int[] displayedCriteria = tpps.getPlaCriteria();
        this.cbxTeamCrit1.getModel().setSelectedItem(TeamPlacementParameterSet.criterionLongName(displayedCriteria[0]));
        this.cbxTeamCrit2.getModel().setSelectedItem(TeamPlacementParameterSet.criterionLongName(displayedCriteria[1]));
        this.cbxTeamCrit3.getModel().setSelectedItem(TeamPlacementParameterSet.criterionLongName(displayedCriteria[2]));
        this.cbxTeamCrit4.getModel().setSelectedItem(TeamPlacementParameterSet.criterionLongName(displayedCriteria[3]));
        this.cbxTeamCrit5.getModel().setSelectedItem(TeamPlacementParameterSet.criterionLongName(displayedCriteria[4]));
        this.cbxTeamCrit6.getModel().setSelectedItem(TeamPlacementParameterSet.criterionLongName(displayedCriteria[5]));
    }
    
    private void updatePnlPai()throws RemoteException{
        if (tournament.tournamentType() == TournamentParameterSet.TYPE_SWISSCAT)
            this.ckbSeMinimizeHandicap.setVisible(true);
        else 
            this.ckbSeMinimizeHandicap.setVisible(false);
        
        if (tournament.tournamentType() == TournamentParameterSet.TYPE_MCMAHON)
            this.ckbSeBarThresholdActive.setVisible(true);
        else 
            this.ckbSeBarThresholdActive.setVisible(false);
        
        PairingParameterSet paiPS = tournament.getTournamentParameterSet().getPairingParameterSet();
        
        this.ckbAvoidMixingCategories.setSelected(paiPS.getPaiMaAvoidMixingCategories() != 0);
        this.ckbMinimizeScoreDifference.setSelected(paiPS.getPaiMaMinimizeScoreDifference() != 0);
        this.txfLastRoundForSeedSystem1.setText("" + (paiPS.getPaiMaLastRoundForSeedSystem1() + 1));
        this.ckbAddSortOnRating.setSelected(
                paiPS.getPaiMaAdditionalPlacementCritSystem1() == PlacementParameterSet.PLA_CRIT_RATING);
        
        if (paiPS.getPaiMaSeedSystem1() == PairingParameterSet.PAIMA_SEED_SPLITANDRANDOM)
            this.rdbFormerSplitAndRandom.setSelected(true);
        if (paiPS.getPaiMaSeedSystem1() == PairingParameterSet.PAIMA_SEED_SPLITANDFOLD)
            this.rdbFormerSplitAndFold.setSelected(true);
        if (paiPS.getPaiMaSeedSystem1() == PairingParameterSet.PAIMA_SEED_SPLITANDSLIP)
            this.rdbFormerSplitAndSlip.setSelected(true);
        if (paiPS.getPaiMaSeedSystem2() == PairingParameterSet.PAIMA_SEED_SPLITANDRANDOM)
            this.rdbLatterSplitAndRandom.setSelected(true);
        if (paiPS.getPaiMaSeedSystem2() == PairingParameterSet.PAIMA_SEED_SPLITANDFOLD)
            this.rdbLatterSplitAndFold.setSelected(true);
        if (paiPS.getPaiMaSeedSystem2() == PairingParameterSet.PAIMA_SEED_SPLITANDSLIP)
            this.rdbLatterSplitAndSlip.setSelected(true);
        
        this.ckbCompensate.setSelected(paiPS.isPaiMaCompensateDUDD());
        if (paiPS.getPaiMaDUDDUpperMode() == PairingParameterSet.PAIMA_DUDD_TOP)
            this.rdbDUDDUGTop.setSelected(true);
        if (paiPS.getPaiMaDUDDUpperMode() == PairingParameterSet.PAIMA_DUDD_MID)
            this.rdbDUDDUGMid.setSelected(true);
        if (paiPS.getPaiMaDUDDUpperMode() == PairingParameterSet.PAIMA_DUDD_BOT)
            this.rdbDUDDUGBot.setSelected(true);
        if (paiPS.getPaiMaDUDDLowerMode() == PairingParameterSet.PAIMA_DUDD_TOP)
            this.rdbDUDDLGTop.setSelected(true);
        if (paiPS.getPaiMaDUDDLowerMode() == PairingParameterSet.PAIMA_DUDD_MID)
            this.rdbDUDDLGMid.setSelected(true);
        if (paiPS.getPaiMaDUDDLowerMode() == PairingParameterSet.PAIMA_DUDD_BOT)
            this.rdbDUDDLGBot.setSelected(true);
        
        this.ckbAvoidPairingSamePair.setSelected(paiPS.getPaiBaAvoidDuplGame() != 0);
        
        if (paiPS.getPaiBaRandom() == 0){
            this.rdbNoRandom.setSelected(true);
            this.ckbDeterministic.setSelected(false);
            this.ckbDeterministic.setEnabled(false);
        }
        else{
            this.rdbAcceptRandom.setSelected(true);
            this.ckbDeterministic.setSelected(paiPS.isPaiBaDeterministic());
            this.ckbDeterministic.setEnabled(true);
        }
        
        this.ckbBalanceWB.setSelected(paiPS.getPaiBaBalanceWB() != 0);
        
        this.txfSeRankThreshold.setText(Player.convertIntToKD(paiPS.getPaiSeRankThreshold()));
        this.ckbSeBarThresholdActive.setSelected(paiPS.isPaiSeBarThresholdActive());
        this.ckbSeNbWinsThresholdActive.setSelected(paiPS.isPaiSeNbWinsThresholdActive());
        this.txfSeCountry.setText("" + paiPS.getPaiSePreferMMSDiffRatherThanSameCountry());
        this.txfSeClub.setText("" + paiPS.getPaiSePreferMMSDiffRatherThanSameClub());
        this.ckbSeMinimizeHandicap.setSelected(paiPS.getPaiSeMinimizeHandicap() != 0);
    }    
        
    private void tournamentChanged(){
        try {
            tournament.setLastTournamentModificationTime(tournament.getCurrentTournamentTime());
        } catch (RemoteException ex) {
            Logger.getLogger(JFrTournamentOptions.class.getName()).log(Level.SEVERE, null, ex);
        }
        updateAllViews();
    }

    private void updateAllViews(){      
        this.tpnParameters.setVisible(true);
        try {
            if (!tournament.isOpen()) dispose();
            this.lastComponentsUpdateTime = tournament.getCurrentTournamentTime();
            setTitle("Tournament settings. " + tournament.getFullName());           
            updatePnlGen();
            updatePnlHan();
            updatePnlPla();
            updatePnlPai();
            updatePnlTPl();
        } catch (RemoteException ex) {
            Logger.getLogger(JFrTournamentOptions.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdjustCategoryLimits;
    private javax.swing.JButton btnChangeSystem;
    private javax.swing.JButton btnDlgChangeSystemCancel;
    private javax.swing.JButton btnDlgChangeSystemOK;
    private javax.swing.JButton btnHelpGeneral;
    private javax.swing.JButton btnHelpHandicap;
    private javax.swing.JButton btnHelpPairing;
    private javax.swing.JButton btnHelpPlacement;
    private javax.swing.JButton btnHelpTeamPlacement;
    private javax.swing.JButton btnPrint;
    private javax.swing.JButton btnQuit;
    private javax.swing.JComboBox cbxCrit1;
    private javax.swing.JComboBox cbxCrit2;
    private javax.swing.JComboBox cbxCrit3;
    private javax.swing.JComboBox cbxCrit4;
    private javax.swing.JComboBox cbxTeamCrit1;
    private javax.swing.JComboBox cbxTeamCrit2;
    private javax.swing.JComboBox cbxTeamCrit3;
    private javax.swing.JComboBox cbxTeamCrit4;
    private javax.swing.JComboBox cbxTeamCrit5;
    private javax.swing.JComboBox cbxTeamCrit6;
    private javax.swing.JCheckBox ckbAddSortOnRating;
    private javax.swing.JCheckBox ckbAvoid2DUDD;
    private javax.swing.JCheckBox ckbAvoidMixingCategories;
    private javax.swing.JCheckBox ckbAvoidPairingSamePair;
    private javax.swing.JCheckBox ckbBalanceWB;
    private javax.swing.JCheckBox ckbCompensate;
    private javax.swing.JCheckBox ckbDeterministic;
    private javax.swing.JCheckBox ckbMinimizeScoreDifference;
    private javax.swing.JCheckBox ckbResetParameters;
    private javax.swing.JCheckBox ckbRoundDown;
    private javax.swing.JCheckBox ckbSeBarThresholdActive;
    private javax.swing.JCheckBox ckbSeMinimizeHandicap;
    private javax.swing.JCheckBox ckbSeNbWinsThresholdActive;
    private javax.swing.JDialog dlgChangeSystem;
    private javax.swing.ButtonGroup grpAbsentMMS;
    private javax.swing.ButtonGroup grpAbsentNBW;
    private javax.swing.ButtonGroup grpByeMMS;
    private javax.swing.ButtonGroup grpByeNBW;
    private javax.swing.ButtonGroup grpDUDDLG;
    private javax.swing.ButtonGroup grpDUDDUG;
    private javax.swing.ButtonGroup grpGameFormat;
    private javax.swing.ButtonGroup grpHdBase;
    private javax.swing.ButtonGroup grpHdCorrection;
    private javax.swing.ButtonGroup grpNewSystem;
    private javax.swing.ButtonGroup grpRandom;
    private javax.swing.ButtonGroup grpSeedingFormer;
    private javax.swing.ButtonGroup grpSeedingLatter;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblHandicap;
    private javax.swing.JLabel lblMMBar;
    private javax.swing.JLabel lblMMFloor;
    private javax.swing.JLabel lblMMZero;
    private javax.swing.JLabel lblNewSystem;
    private javax.swing.JLabel lblRecommended;
    private javax.swing.JLabel lblSystemName;
    private javax.swing.JPanel pnlBase;
    private javax.swing.JPanel pnlCategories;
    private javax.swing.JPanel pnlDUDD;
    private javax.swing.JPanel pnlDUDDLG;
    private javax.swing.JPanel pnlDUDDUG;
    private javax.swing.JPanel pnlFormer;
    private javax.swing.JPanel pnlGen;
    private javax.swing.JPanel pnlGlossary;
    private javax.swing.JPanel pnlHan;
    private javax.swing.JPanel pnlHandicap;
    private javax.swing.JPanel pnlLatter;
    private javax.swing.JPanel pnlMain;
    private javax.swing.JPanel pnlMcMahon;
    private javax.swing.JPanel pnlPai;
    private javax.swing.JPanel pnlPla;
    private javax.swing.JPanel pnlSecondary;
    private javax.swing.JPanel pnlSeeding;
    private javax.swing.JPanel pnlSpecialResults;
    private javax.swing.JPanel pnlTPL;
    private javax.swing.JPanel pnlTeamGlossary;
    private javax.swing.JPanel pnlTournamentDetails;
    private javax.swing.JRadioButton rdbAbsentMMS0;
    private javax.swing.JRadioButton rdbAbsentMMS1;
    private javax.swing.JRadioButton rdbAbsentMMS2;
    private javax.swing.JRadioButton rdbAbsentNBW0;
    private javax.swing.JRadioButton rdbAbsentNBW1;
    private javax.swing.JRadioButton rdbAbsentNBW2;
    private javax.swing.JRadioButton rdbAcceptRandom;
    private javax.swing.JRadioButton rdbByeMMS0;
    private javax.swing.JRadioButton rdbByeMMS1;
    private javax.swing.JRadioButton rdbByeMMS2;
    private javax.swing.JRadioButton rdbByeNBW0;
    private javax.swing.JRadioButton rdbByeNBW1;
    private javax.swing.JRadioButton rdbByeNBW2;
    private javax.swing.JRadioButton rdbDUDDLGBot;
    private javax.swing.JRadioButton rdbDUDDLGMid;
    private javax.swing.JRadioButton rdbDUDDLGTop;
    private javax.swing.JRadioButton rdbDUDDUGBot;
    private javax.swing.JRadioButton rdbDUDDUGMid;
    private javax.swing.JRadioButton rdbDUDDUGTop;
    private javax.swing.JRadioButton rdbFormerSplitAndFold;
    private javax.swing.JRadioButton rdbFormerSplitAndRandom;
    private javax.swing.JRadioButton rdbFormerSplitAndSlip;
    private javax.swing.JRadioButton rdbHdBaseMMS;
    private javax.swing.JRadioButton rdbHdBaseRank;
    private javax.swing.JRadioButton rdbHdCorrection0;
    private javax.swing.JRadioButton rdbHdCorrection1;
    private javax.swing.JRadioButton rdbHdCorrection2;
    private javax.swing.JRadioButton rdbHdCorrection3;
    private javax.swing.JRadioButton rdbHdCorrectionPlus1;
    private javax.swing.JRadioButton rdbLatterSplitAndFold;
    private javax.swing.JRadioButton rdbLatterSplitAndRandom;
    private javax.swing.JRadioButton rdbLatterSplitAndSlip;
    private javax.swing.JRadioButton rdbMcMahon;
    private javax.swing.JRadioButton rdbNoRandom;
    private javax.swing.JRadioButton rdbSwiss;
    private javax.swing.JRadioButton rdbSwissCat;
    private javax.swing.JScrollPane scpGlossary;
    private javax.swing.JScrollPane scpTeamGlossary;
    private javax.swing.JScrollPane scpTeamWarning;
    private javax.swing.JTable tblGlossary;
    private javax.swing.JTable tblTeamGlossary;
    private javax.swing.JTabbedPane tpnParameters;
    private javax.swing.JTextArea txaTeamWarning;
    private javax.swing.JTextArea txaWarning;
    private javax.swing.JTextField txfBeginDate;
    private javax.swing.JTextField txfDirector;
    private javax.swing.JTextField txfEndDate;
    private javax.swing.JTextField txfHdCeiling;
    private javax.swing.JTextField txfLastRoundForSeedSystem1;
    private javax.swing.JTextField txfLocation;
    private javax.swing.JTextField txfMMBar;
    private javax.swing.JTextField txfMMFloor;
    private javax.swing.JTextField txfMMZero;
    private javax.swing.JTextField txfName;
    private javax.swing.JTextField txfNoHdRankThreshold;
    private javax.swing.JTextField txfNumberOfCategories;
    private javax.swing.JTextField txfNumberOfRounds;
    private javax.swing.JTextField txfSeClub;
    private javax.swing.JTextField txfSeCountry;
    private javax.swing.JTextField txfSeRankThreshold;
    private javax.swing.JTextField txfShortName;
    // End of variables declaration//GEN-END:variables
    
    JLabel[] tabLblCat;
    JTextField[] tabTxfLowerLimitOfCat;
    JLabel[] tabLblNbPlayersOfCat;
}
